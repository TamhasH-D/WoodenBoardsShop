import uuid # Changed from 'from uuid import uuid4'
import pytest
from httpx import AsyncClient

from backend.daos import AllDAOs

URI = "/api/v1/sellers/"


@pytest.mark.anyio
async def test_post_seller(
    client: AsyncClient,
    daos: AllDAOs,
) -> None:
    """Test create Seller: 201."""
    input_json = {
        "id": str(uuid.uuid4()), # Changed to uuid.uuid4()
        "keycloak_uuid": str(uuid.uuid4()), # Changed to uuid.uuid4()
        "is_online": False,
    }

    response = await client.post(URI, json=input_json)
    assert response.status_code == 201

    response_data = response.json()["data"]
    db_seller = await daos.seller.filter_first(
        keycloak_uuid=response_data["keycloak_uuid"],
    )

    assert db_seller is not None
    assert db_seller.is_online == input_json["is_online"]


@pytest.mark.anyio
async def test_create_seller_duplicate_keycloak_uuid(
    client: AsyncClient,
    # daos: AllDAOs, # Not strictly needed for this test if not verifying DB state post-failure
) -> None:
    """Test creating a seller with a duplicate keycloak_uuid returns 409."""
    keycloak_uuid_val = str(uuid.uuid4()) # Use uuid.uuid4()

    # First POST request: Create a seller with this keycloak_uuid.
    # The Seller model has 'id' as primary key (auto-generated if not provided)
    # and 'keycloak_uuid' has a UNIQUE constraint.
    payload1 = {"keycloak_uuid": keycloak_uuid_val, "is_online": False}
    response1 = await client.post(URI, json=payload1)
    assert response1.status_code == 201

    # Second POST request: Attempt to create another seller with the same keycloak_uuid.
    # A new 'id' will be generated by the DB if not provided, but 'keycloak_uuid' should conflict.
    payload2 = {"keycloak_uuid": keycloak_uuid_val, "is_online": True}
    response2 = await client.post(URI, json=payload2)
    assert response2.status_code == 409
    data2 = response2.json()
    # This message comes from BaseDAO's IntegrityError handler,
    # as SellerDAO does not have a specific pre-check for keycloak_uuid uniqueness in its create override.
    # The unique constraint is at the database level.
    assert data2["detail"] == "Database integrity violation: A record with conflicting unique values already exists."
