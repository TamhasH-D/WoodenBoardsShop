#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º –∏ –±—ç–∫–µ–Ω–¥–æ–º –¥–ª—è API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import asyncio
import sys
import os
from urllib.parse import parse_qs, urlparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend/backend'))

def test_frontend_api_calls():
    """–¢–µ—Å—Ç —Ç–æ–≥–æ, –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç API –≤—ã–∑–æ–≤—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è API –≤—ã–∑–æ–≤–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    filters = {
        'search_query': '–¥—Ä–µ–≤–µ—Å–∏–Ω–∞',
        'price_min': 100.0,
        'price_max': 1000.0,
        'volume_min': 0.5,
        'volume_max': 10.0,
        'wood_type_ids': ['123e4567-e89b-12d3-a456-426614174000'],
        'delivery_possible': True,
        'sort_by': 'created_at',
        'sort_order': 'desc'
    }
    
    page = 0
    size = 20
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–∞–∫ –≤ frontend/buyer/src/services/api.js)
    params = {
        'offset': str(page * size),
        'limit': str(size)
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if filters.get('search_query'):
        params['search_query'] = filters['search_query']
    if filters.get('price_min') is not None:
        params['price_min'] = str(filters['price_min'])
    if filters.get('price_max') is not None:
        params['price_max'] = str(filters['price_max'])
    if filters.get('volume_min') is not None:
        params['volume_min'] = str(filters['volume_min'])
    if filters.get('volume_max') is not None:
        params['volume_max'] = str(filters['volume_max'])
    if filters.get('wood_type_ids'):
        for wood_type_id in filters['wood_type_ids']:
            params['wood_type_ids'] = wood_type_id  # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π!
    if filters.get('delivery_possible') is not None:
        params['delivery_possible'] = str(filters['delivery_possible']).lower()
    if filters.get('sort_by'):
        params['sort_by'] = filters['sort_by']
    if filters.get('sort_order'):
        params['sort_order'] = filters['sort_order']
    
    print("üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º:")
    for key, value in params.items():
        print(f"  {key}: {value}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    query_string = '&'.join([f"{key}={value}" for key, value in params.items()])
    url = f"/api/v1/products/search?{query_string}"
    
    print(f"\nüåê URL –∑–∞–ø—Ä–æ—Å–∞: {url}")
    
    return params

def test_backend_parameter_parsing():
    """–¢–µ—Å—Ç —Ç–æ–≥–æ, –∫–∞–∫ –±—ç–∫–µ–Ω–¥ –ø–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—ç–∫–µ–Ω–¥–æ–º...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    query_params = {
        'offset': ['0'],
        'limit': ['20'],
        'sort_by': ['created_at'],
        'sort_order': ['desc'],
        'search_query': ['–¥—Ä–µ–≤–µ—Å–∏–Ω–∞'],
        'price_min': ['100.0'],
        'price_max': ['1000.0'],
        'volume_min': ['0.5'],
        'volume_max': ['10.0'],
        'wood_type_ids': ['123e4567-e89b-12d3-a456-426614174000'],
        'delivery_possible': ['true']
    }
    
    try:
        from backend.dtos import PaginationParamsSortBy
        from backend.dtos.product_dtos import ProductFilterDTO
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ PaginationParamsSortBy
        pagination_data = {
            'offset': int(query_params['offset'][0]),
            'limit': int(query_params['limit'][0]),
            'sort_by': query_params['sort_by'][0],
            'sort_order': query_params['sort_order'][0]
        }
        
        pagination = PaginationParamsSortBy(**pagination_data)
        print(f"‚úÖ PaginationParamsSortBy: {pagination}")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ ProductFilterDTO
        filter_data = {}
        if 'search_query' in query_params:
            filter_data['search_query'] = query_params['search_query'][0]
        if 'price_min' in query_params:
            filter_data['price_min'] = float(query_params['price_min'][0])
        if 'price_max' in query_params:
            filter_data['price_max'] = float(query_params['price_max'][0])
        if 'volume_min' in query_params:
            filter_data['volume_min'] = float(query_params['volume_min'][0])
        if 'volume_max' in query_params:
            filter_data['volume_max'] = float(query_params['volume_max'][0])
        if 'wood_type_ids' in query_params:
            # –ü—Ä–æ–±–ª–µ–º–∞: —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Å—Å–∏–≤, –Ω–æ –º—ã –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É
            filter_data['wood_type_ids'] = query_params['wood_type_ids']
        if 'delivery_possible' in query_params:
            filter_data['delivery_possible'] = query_params['delivery_possible'][0].lower() == 'true'
        
        filters = ProductFilterDTO(**filter_data)
        print(f"‚úÖ ProductFilterDTO: {filters}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

def test_array_parameter_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...")
    
    # –ü—Ä–æ–±–ª–µ–º–∞: —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–∞—Å—Å–∏–≤—ã –ø–æ-—Ä–∞–∑–Ω–æ–º—É
    test_cases = [
        # –°–ª—É—á–∞–π 1: –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        {'wood_type_ids': ['123e4567-e89b-12d3-a456-426614174000']},
        # –°–ª—É—á–∞–π 2: –ù–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
        {'wood_type_ids': ['123e4567-e89b-12d3-a456-426614174000', '456e7890-e89b-12d3-a456-426614174001']},
        # –°–ª—É—á–∞–π 3: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        {'wood_type_ids': []},
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç —Å–ª—É—á–∞–π {i}: {case}")
        try:
            from backend.dtos.product_dtos import ProductFilterDTO
            filters = ProductFilterDTO(**case)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {filters.wood_type_ids}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_boolean_parameter_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ boolean –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ boolean –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –§—Ä–æ–Ω—Ç–µ–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç boolean –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
    test_cases = [
        {'delivery_possible': True},
        {'delivery_possible': False},
        {'delivery_possible': None},
        {'has_pickup_location': True},
        {'has_pickup_location': False},
        {'has_pickup_location': None},
    ]
    
    for i, case in enumerate(test_cases, 1):
        print(f"\nüìã –¢–µ—Å—Ç —Å–ª—É—á–∞–π {i}: {case}")
        try:
            from backend.dtos.product_dtos import ProductFilterDTO
            filters = ProductFilterDTO(**case)
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: delivery_possible={filters.delivery_possible}, has_pickup_location={filters.has_pickup_location}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def test_full_integration():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–±—ç–∫–µ–Ω–¥...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    frontend_params = test_frontend_api_calls()
    test_backend_parameter_parsing()
    test_array_parameter_handling()
    test_boolean_parameter_handling()
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    print("   - –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–∏–≤–æ–≤ wood_type_ids –∏ seller_ids")
    print("   - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ boolean –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫")
    print("   - –í–∞–ª–∏–¥–∞—Ü–∏—è UUID –≤ –º–∞—Å—Å–∏–≤–∞—Ö")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–±—ç–∫–µ–Ω–¥ –¥–ª—è API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n")
    
    asyncio.run(test_full_integration())
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main()
