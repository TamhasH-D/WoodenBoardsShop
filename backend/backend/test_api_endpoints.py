#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import asyncio
import sys
import os
from uuid import uuid4

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(__file__))

async def test_search_endpoint_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã search endpoint"""
    print("üß™ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã /products/search endpoint...")
    
    try:
        from backend.dtos import PaginationParamsSortBy
        from backend.dtos.product_dtos import ProductFilterDTO, ProductDTO
        from backend.daos.product_daos import ProductDAO
        from backend.models.product_models import Product
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockSession:
            async def execute(self, query):
                print(f"üìù SQL Query: {query}")
                return MockResult()
        
        class MockResult:
            def scalars(self):
                return []
        
        # –°–æ–∑–¥–∞–µ–º DAO
        dao = ProductDAO(MockSession())
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        async def mock_compute_pagination(query):
            from backend.dtos import OffsetPaginationMetadata
            return OffsetPaginationMetadata(total=50)
        
        dao._compute_offset_pagination = mock_compute_pagination
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
        print("\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
        pagination = PaginationParamsSortBy(
            offset=0,
            limit=20,
            sort_by='created_at',
            sort_order='desc'
        )
        
        filters = ProductFilterDTO(
            search_query='–¥—Ä–µ–≤–µ—Å–∏–Ω–∞'
        )
        
        result = await dao.get_filtered_results(
            out_dto=ProductDTO,
            pagination=pagination,
            filters=filters
        )
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—Å–µ–≥–æ: {result.pagination.total}")
        
        # –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        print("\nüìã –¢–µ—Å—Ç 2: –°–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã")
        filters = ProductFilterDTO(
            search_query='—Å–æ—Å–Ω–∞',
            price_min=100.0,
            price_max=1000.0,
            volume_min=0.5,
            volume_max=10.0,
            wood_type_ids=[uuid4(), uuid4()],
            delivery_possible=True
        )
        
        pagination = PaginationParamsSortBy(
            offset=20,
            limit=20,
            sort_by='price',
            sort_order='asc'
        )
        
        result = await dao.get_filtered_results(
            out_dto=ProductDTO,
            pagination=pagination,
            filters=filters
        )
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.data)} –∑–∞–ø–∏—Å–µ–π, –≤—Å–µ–≥–æ: {result.pagination.total}")
        
        # –¢–µ—Å—Ç 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
        print("\nüìã –¢–µ—Å—Ç 3: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º")
        test_sorts = [
            ('title', 'asc'),
            ('price', 'desc'),
            ('volume', 'asc'),
            ('created_at', 'desc')
        ]
        
        for sort_by, sort_order in test_sorts:
            pagination = PaginationParamsSortBy(
                offset=0,
                limit=10,
                sort_by=sort_by,
                sort_order=sort_order
            )
            
            filters = ProductFilterDTO()
            
            result = await dao.get_filtered_results(
                out_dto=ProductDTO,
                pagination=pagination,
                filters=filters
            )
            print(f"‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ {sort_by} {sort_order}: OK")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_fastapi_parameter_parsing():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ FastAPI"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ FastAPI...")
    
    try:
        from fastapi import FastAPI, Depends
        from backend.dtos import PaginationParamsSortBy
        from backend.dtos.product_dtos import ProductFilterDTO
        
        app = FastAPI()
        
        # –°–∏–º—É–ª—è—Ü–∏—è endpoint
        @app.get("/test-search")
        async def test_search(
            pagination: PaginationParamsSortBy = Depends(),
            filters: ProductFilterDTO = Depends()
        ):
            return {
                "pagination": pagination,
                "filters": filters
            }
        
        print("‚úÖ FastAPI endpoint –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
        pagination = PaginationParamsSortBy(
            offset=0,
            limit=20,
            sort_by='created_at',
            sort_order='desc'
        )
        
        filters = ProductFilterDTO(
            search_query='—Ç–µ—Å—Ç',
            price_min=100.0,
            wood_type_ids=[uuid4()]
        )
        
        print(f"‚úÖ PaginationParamsSortBy: {pagination}")
        print(f"‚úÖ ProductFilterDTO: {filters}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ FastAPI: {e}")

def test_url_parameter_simulation():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    print("\nüß™ –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è query string –∫–∞–∫ –æ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    query_string = "offset=0&limit=20&sort_by=created_at&sort_order=desc&search_query=–¥—Ä–µ–≤–µ—Å–∏–Ω–∞&price_min=100.0&price_max=1000.0&wood_type_ids=123e4567-e89b-12d3-a456-426614174000&wood_type_ids=456e7890-e89b-12d3-a456-426614174001&delivery_possible=true"
    
    print(f"üìã Query string: {query_string}")
    
    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç FastAPI
    from urllib.parse import parse_qs
    parsed = parse_qs(query_string)
    
    print("üìã –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    for key, values in parsed.items():
        print(f"  {key}: {values}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    if 'wood_type_ids' in parsed:
        wood_type_ids = parsed['wood_type_ids']
        print(f"‚úÖ wood_type_ids –º–∞—Å—Å–∏–≤: {wood_type_ids}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º boolean
    if 'delivery_possible' in parsed:
        delivery_possible = parsed['delivery_possible'][0].lower() == 'true'
        print(f"‚úÖ delivery_possible boolean: {delivery_possible}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n")
    
    await test_search_endpoint_simulation()
    test_fastapi_parameter_parsing()
    test_url_parameter_simulation()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
