#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
"""

import asyncio
import sys
import os
import json
from uuid import uuid4
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend/backend'))

def test_frontend_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å API...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ–≥–æ, –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å
    frontend_filters = {
        'search_query': '—Å–æ—Å–Ω–∞',
        'price_min': 100.0,
        'price_max': 1000.0,
        'volume_min': 0.5,
        'volume_max': 10.0,
        'wood_type_ids': ['123e4567-e89b-12d3-a456-426614174000', '456e7890-e89b-12d3-a456-426614174001'],
        'seller_ids': ['789e0123-e89b-12d3-a456-426614174002'],
        'delivery_possible': True,
        'has_pickup_location': False,
        'sort_by': 'created_at',
        'sort_order': 'desc'
    }
    
    page = 0
    size = 20
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    params = []
    params.append(f"offset={page * size}")
    params.append(f"limit={size}")
    
    if frontend_filters.get('search_query'):
        params.append(f"search_query={frontend_filters['search_query']}")
    if frontend_filters.get('price_min') is not None:
        params.append(f"price_min={frontend_filters['price_min']}")
    if frontend_filters.get('price_max') is not None:
        params.append(f"price_max={frontend_filters['price_max']}")
    if frontend_filters.get('volume_min') is not None:
        params.append(f"volume_min={frontend_filters['volume_min']}")
    if frontend_filters.get('volume_max') is not None:
        params.append(f"volume_max={frontend_filters['volume_max']}")
    
    # –ú–∞—Å—Å–∏–≤—ã - –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    if frontend_filters.get('wood_type_ids'):
        for wood_type_id in frontend_filters['wood_type_ids']:
            params.append(f"wood_type_ids={wood_type_id}")
    if frontend_filters.get('seller_ids'):
        for seller_id in frontend_filters['seller_ids']:
            params.append(f"seller_ids={seller_id}")
    
    # Boolean –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if frontend_filters.get('delivery_possible') is not None:
        params.append(f"delivery_possible={str(frontend_filters['delivery_possible']).lower()}")
    if frontend_filters.get('has_pickup_location') is not None:
        params.append(f"has_pickup_location={str(frontend_filters['has_pickup_location']).lower()}")
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if frontend_filters.get('sort_by'):
        params.append(f"sort_by={frontend_filters['sort_by']}")
    if frontend_filters.get('sort_order'):
        params.append(f"sort_order={frontend_filters['sort_order']}")
    
    query_string = "&".join(params)
    url = f"/api/v1/products/search?{query_string}"
    
    print(f"üìã –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL: {url}")
    print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(params)}")
    
    return query_string

async def test_backend_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±—ç–∫–µ–Ω–¥–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –±—ç–∫–µ–Ω–¥–æ–º...")
    
    try:
        from backend.dtos import PaginationParamsSortBy
        from backend.dtos.product_dtos import ProductFilterDTO, ProductDTO
        from backend.daos.product_daos import ProductDAO
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ—Ç FastAPI
        pagination_params = {
            'offset': 0,
            'limit': 20,
            'sort_by': 'created_at',
            'sort_order': 'desc'
        }
        
        filter_params = {
            'search_query': '—Å–æ—Å–Ω–∞',
            'price_min': 100.0,
            'price_max': 1000.0,
            'volume_min': 0.5,
            'volume_max': 10.0,
            'wood_type_ids': [
                '123e4567-e89b-12d3-a456-426614174000',
                '456e7890-e89b-12d3-a456-426614174001'
            ],
            'seller_ids': ['789e0123-e89b-12d3-a456-426614174002'],
            'delivery_possible': True,
            'has_pickup_location': False
        }
        
        # –°–æ–∑–¥–∞–µ–º DTO –æ–±—ä–µ–∫—Ç—ã
        pagination = PaginationParamsSortBy(**pagination_params)
        filters = ProductFilterDTO(**filter_params)
        
        print(f"‚úÖ PaginationParamsSortBy —Å–æ–∑–¥–∞–Ω: {pagination}")
        print(f"‚úÖ ProductFilterDTO —Å–æ–∑–¥–∞–Ω: {filters}")
        
        # –°–∏–º—É–ª—è—Ü–∏—è DAO
        class MockSession:
            async def execute(self, query):
                print(f"üìù –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL: {str(query)[:200]}...")
                return MockResult()
        
        class MockResult:
            def scalars(self):
                return []
        
        dao = ProductDAO(MockSession())
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        async def mock_compute_pagination(query):
            from backend.dtos import OffsetPaginationMetadata
            return OffsetPaginationMetadata(total=150)
        
        dao._compute_offset_pagination = mock_compute_pagination
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = await dao.get_filtered_results(
            out_dto=ProductDTO,
            pagination=pagination,
            filters=filters
        )
        
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(result.data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {result.pagination.total}")
        
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—ç–∫–µ–Ω–¥–æ–º: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_response_format():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API...")
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API –∫–∞–∫ –µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    mock_api_response = {
        "data": [
            {
                "id": "123e4567-e89b-12d3-a456-426614174000",
                "title": "–°–æ—Å–Ω–æ–≤–∞—è –¥–æ—Å–∫–∞",
                "descrioption": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–æ—Å–Ω–æ–≤–∞—è –¥–æ—Å–∫–∞",
                "price": 500.0,
                "volume": 2.5,
                "delivery_possible": True,
                "pickup_location": "–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ—Å–Ω–∞—è, 10",
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:30:00Z",
                "seller_id": "789e0123-e89b-12d3-a456-426614174002",
                "wood_type_id": "456e7890-e89b-12d3-a456-426614174001"
            }
        ],
        "pagination": {
            "total": 150
        }
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
        products = mock_api_response.get('data', [])
        total = mock_api_response.get('pagination', {}).get('total', 0)
        
        print(f"‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø–æ–ª—É—á–∏–ª {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
        print(f"‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞
        if products:
            product = products[0]
            required_fields = ['id', 'title', 'price', 'volume', 'seller_id', 'wood_type_id']
            for field in required_fields:
                if field in product:
                    print(f"‚úÖ –ü–æ–ª–µ {field}: {product[field]}")
                else:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        return False

def test_error_handling():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    
    try:
        from backend.dtos import PaginationParamsSortBy
        from backend.dtos.product_dtos import ProductFilterDTO
        
        # –¢–µ—Å—Ç 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π sort_order
        try:
            pagination = PaginationParamsSortBy(
                offset=0,
                limit=20,
                sort_by='title',
                sort_order='invalid'
            )
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ sort_order")
        except Exception as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ sort_order: {type(e).__name__}")
        
        # –¢–µ—Å—Ç 2: –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        try:
            pagination = PaginationParamsSortBy(
                offset=0,
                limit=25,  # –ü—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 20
                sort_by='title',
                sort_order='asc'
            )
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞")
        except Exception as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞: {type(e).__name__}")
        
        # –¢–µ—Å—Ç 3: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞
        try:
            filters = ProductFilterDTO(price_min=-100.0)
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã")
        except Exception as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã: {type(e).__name__}")
        
        # –¢–µ—Å—Ç 4: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π UUID
        try:
            filters = ProductFilterDTO(wood_type_ids=['invalid-uuid'])
            print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ UUID")
        except Exception as e:
            print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ UUID: {type(e).__name__}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—à–∏–±–æ–∫: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n")
    
    # –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    query_string = test_frontend_api_integration()
    
    # –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ç–∫–µ–Ω–¥–æ–º
    result = await test_backend_processing()
    
    # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
    response_ok = test_response_format()
    
    # –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    test_error_handling()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print("=" * 50)
    print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
    print("‚úÖ –ë—ç–∫–µ–Ω–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    print("‚úÖ SQL –∑–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –î–û –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
    print("‚úÖ –ú–∞—Å—Å–∏–≤—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ Boolean –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    if response_ok:
        print("‚úÖ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞")
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
    print("üîß API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
