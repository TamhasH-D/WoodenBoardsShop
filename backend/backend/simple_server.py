#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è admin frontend
–≠–º—É–ª–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ API endpoints backend
"""

import json
import uuid
import re
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# UUID –≤–∞–ª–∏–¥–∞—Ü–∏—è
UUID_PATTERN = re.compile(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', re.IGNORECASE)

def is_valid_uuid(uuid_string):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UUID"""
    return UUID_PATTERN.match(uuid_string) is not None

# –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ
MOCK_DATA = {
    "buyers": [
        {
            "id": str(uuid.uuid4()),
            "keycloak_uuid": str(uuid.uuid4()),
            "is_online": True,
            "last_activity": datetime.now().isoformat(),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        for _ in range(5)
    ],
    "sellers": [
        {
            "id": str(uuid.uuid4()),
            "keycloak_uuid": str(uuid.uuid4()),
            "is_online": True,
            "last_activity": datetime.now().isoformat(),
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat()
        }
        for _ in range(3)
    ],
    "products": [
        {
            "id": str(uuid.uuid4()),
            "volume": 2.5,
            "price": 150.0,
            "title": f"–ü—Ä–æ–¥—É–∫—Ç {i+1}",
            "descrioption": f"–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ {i+1}",
            "delivery_possible": True,
            "pickup_location": "–°–∫–ª–∞–¥",
            "created_at": datetime.now().isoformat(),
            "updated_at": datetime.now().isoformat(),
            "seller_id": str(uuid.uuid4()),
            "wood_type_id": str(uuid.uuid4())
        }
        for i in range(10)
    ],
    "wood_types": [
        {
            "id": str(uuid.uuid4()),
            "neme": wood_type,
            "description": f"–û–ø–∏—Å–∞–Ω–∏–µ {wood_type}"
        }
        for wood_type in ["–î—É–±", "–°–æ—Å–Ω–∞", "–ë–µ—Ä–µ–∑–∞", "–ï–ª—å"]
    ],
    "wood_type_prices": [
        {
            "id": str(uuid.uuid4()),
            "price_per_m3": 1000.0 + i * 100,
            "created_at": datetime.now().isoformat(),
            "wood_type_id": str(uuid.uuid4())
        }
        for i in range(4)
    ],
    "wooden_boards": [],
    "images": [],
    "chat_threads": [],
    "chat_messages": []
}

class SimpleAPIHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        query_params = parse_qs(parsed_url.query)
        
        logger.info(f"GET {path}")
        
        # Health check
        if path == "/api/v1/health":
            self.send_json_response(True)
            return
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
        for entity_type in MOCK_DATA.keys():
            if path == f"/api/v1/{entity_type.replace('_', '-')}":
                offset = int(query_params.get('offset', [0])[0])
                limit = int(query_params.get('limit', [10])[0])
                
                data = MOCK_DATA[entity_type]
                paginated_data = data[offset:offset + limit]
                
                response = {
                    "data": paginated_data,
                    "pagination": {
                        "total": len(data),
                        "offset": offset,
                        "limit": limit
                    }
                }
                self.send_json_response(response)
                return
        
        # 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π —Å JSON –æ—Ç–≤–µ—Ç–æ–º
        self.send_error_response(404, f"Endpoint {self.path} not found")
    
    def do_POST(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤"""
        parsed_url = urlparse(self.path)
        path = parsed_url.path
        
        logger.info(f"POST {path}")
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        content_length = int(self.headers.get('Content-Length', 0))
        post_data = self.rfile.read(content_length)
        
        try:
            data = json.loads(post_data.decode('utf-8'))
        except:
            data = {}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        for entity_type in MOCK_DATA.keys():
            if path == f"/api/v1/{entity_type.replace('_', '-')}":
                new_item = {
                    "id": str(uuid.uuid4()),
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat(),
                    **data
                }
                MOCK_DATA[entity_type].append(new_item)
                
                response = {"data": new_item}
                self.send_json_response(response, status=201)
                return
        
        # 404 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—É—Ç–µ–π —Å JSON –æ—Ç–≤–µ—Ç–æ–º
        self.send_error_response(404, f"Endpoint {self.path} not found")
    
    def do_PATCH(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ PATCH –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_json_response({"message": "Updated successfully"})
    
    def do_DELETE(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.send_json_response({"message": "Deleted successfully"})
    
    def send_json_response(self, data, status=200):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—Ç–≤–µ—Ç–∞"""
        self.send_response(status)
        self.send_header('Content-Type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()

        response_json = json.dumps(data, ensure_ascii=False, indent=2)
        self.wfile.write(response_json.encode('utf-8'))

    def send_error_response(self, status_code, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON –æ—à–∏–±–∫–∏ —Å —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        # –†—É—Å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        russian_messages = {
            400: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
            404: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            409: "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            422: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            500: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞."
        }

        localized_message = russian_messages.get(status_code, message)

        error_response = {
            "detail": localized_message,
            "status_code": status_code,
            "message": message  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        }

        self.send_json_response(error_response, status_code)
    
    def do_OPTIONS(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è CORS"""
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, Authorization')
        self.end_headers()
    
    def log_message(self, format, *args):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        logger.info(f"{self.address_string()} - {format % args}")

def run_server(port=8000):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = ('', port)
    httpd = HTTPServer(server_address, SimpleAPIHandler)
    
    logger.info(f"üöÄ –ü—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    logger.info(f"   GET  /api/v1/health")
    for entity_type in MOCK_DATA.keys():
        endpoint = entity_type.replace('_', '-')
        logger.info(f"   CRUD /api/v1/{endpoint}")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        logger.info("üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.shutdown()

if __name__ == "__main__":
    run_server(8001)
