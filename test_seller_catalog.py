#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–≥–æ API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ ID —Ç–æ–≤–∞—Ä–∞.
"""

import asyncio
import tempfile
from pathlib import Path
from uuid import uuid4

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
import sys
sys.path.append('/home/kindaruman/Sync/projects/diplom/backend/backend')

try:
    from backend.settings import settings
    from backend.database import get_session
    from backend.daos import AllDAOs
    from backend.dtos.product_dtos import ProductInputDTO
    from backend.dtos.image_dtos import ImageInputDTO
    from backend.services.image_service import image_service
    from tests import factories
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    sys.exit(1)


async def test_seller_catalog():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...")
    
    async with get_session() as session:
        daos = AllDAOs(session)
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
            print("üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞...")
            seller = await factories.SellerFactory.create()
            print(f"‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–∑–¥–∞–Ω: {seller.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
            print("üå≤ –°–æ–∑–¥–∞–µ–º —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã...")
            wood_type = await factories.WoodTypeFactory.create()
            print(f"‚úÖ –¢–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å–æ–∑–¥–∞–Ω: {wood_type.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä
            print("üì¶ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä...")
            product_id = uuid4()
            product_dto = ProductInputDTO(
                id=product_id,
                volume=1.5,
                price=5000.0,
                title="–¢–µ—Å—Ç–æ–≤–∞—è –¥–æ—Å–∫–∞ –¥—É–±",
                descrioption="–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –¥—É–±–æ–≤–∞—è –¥–æ—Å–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                delivery_possible=True,
                pickup_location="–ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
                seller_id=seller.id,
                wood_type_id=wood_type.id
            )
            
            product = await daos.product.create(product_dto)
            print(f"‚úÖ –¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω: {product.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            print("üñºÔ∏è  –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
            with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_file:
                tmp_file.write(b"fake image content for testing seller catalog")
                tmp_path = tmp_file.name
            
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î
                image_id = uuid4()
                image_dto = ImageInputDTO(
                    id=image_id,
                    image_path=tmp_path,
                    product_id=product.id
                )
                
                image = await daos.image.create(image_dto)
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {image.id}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
                print("üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞...")
                seller_products = await daos.product.filter(seller_id=seller.id)
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞: {len(seller_products)}")
                
                if seller_products:
                    test_product = seller_products[0]
                    print(f"üì¶ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {test_product.title}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
                    print("üñºÔ∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞...")
                    product_images = await daos.image.filter(product_id=test_product.id)
                    
                    if product_images:
                        test_image = product_images[0]
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image.id}")
                        print(f"üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {test_image.image_path}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if Path(test_image.image_path).exists():
                            print("‚úÖ –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                            
                            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                            with open(test_image.image_path, 'rb') as f:
                                content = f.read()
                            
                            if content == b"fake image content for testing seller catalog":
                                print("‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                            else:
                                print("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É")
                                return False
                        else:
                            print("‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                            return False
                    else:
                        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                        return False
                else:
                    print("‚ùå –¢–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    return False
                
                print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
                return True
                
            finally:
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                Path(tmp_path).unlink(missing_ok=True)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False


async def test_api_endpoint_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID —Ç–æ–≤–∞—Ä–∞."""
    print("\nüîó –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É API endpoint /products/{product_id}/image...")
    
    async with get_session() as session:
        daos = AllDAOs(session)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–æ–π —Ç–æ–≤–∞—Ä —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            products = await daos.product.filter()
            
            for product in products:
                images = await daos.image.filter(product_id=product.id)
                if images:
                    print(f"üì¶ –¢–æ–≤–∞—Ä: {product.title}")
                    print(f"üñºÔ∏è  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
                    
                    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É API endpoint
                    first_image = images[0]
                    print(f"üìÅ –ü—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {first_image.image_path}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if Path(first_image.image_path).exists():
                        print("‚úÖ API endpoint –≤–µ—Ä–Ω—É–ª –±—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
                        file_extension = Path(first_image.image_path).suffix.lower()
                        media_type_map = {
                            ".jpg": "image/jpeg",
                            ".jpeg": "image/jpeg",
                            ".png": "image/png",
                            ".gif": "image/gif",
                            ".webp": "image/webp",
                        }
                        media_type = media_type_map.get(file_extension, "image/jpeg")
                        print(f"üìÑ MIME-—Ç–∏–ø: {media_type}")
                        
                        return True
                    else:
                        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - API endpoint –≤–µ—Ä–Ω—É–ª –±—ã 404")
            
            print("‚ÑπÔ∏è  –¢–æ–≤–∞—Ä–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ API: {e}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞\n")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        test1_result = await test_seller_catalog()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é API endpoint
        test2_result = await test_api_endpoint_simulation()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –¢–µ—Å—Ç –∫–∞—Ç–∞–ª–æ–≥–∞: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        print(f"   –¢–µ—Å—Ç API endpoint: {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
        
        if test1_result and test2_result:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            return 0
        else:
            print("\nüí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
            return 1
            
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
