/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID –¥–ª—è –≤—Å–µ—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ UUID –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ –≤—Å–µ—Ö API —Å–µ—Ä–≤–∏—Å–∞—Ö
 */

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã UUID –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ UUID —É—Ç–∏–ª–∏—Ç—ã
function loadUUIDUtils(frontendPath) {
  const uuidPath = path.join(__dirname, frontendPath, 'src/utils/uuid.js');
  
  if (!fs.existsSync(uuidPath)) {
    throw new Error(`UUID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${uuidPath}`);
  }
  
  const uuidCode = fs.readFileSync(uuidPath, 'utf8');
  
  // –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è ES6 –º–æ–¥—É–ª–µ–π –¥–ª—è Node.js
  const exports = {};
  const module = { exports };
  
  // –ó–∞–º–µ–Ω—è–µ–º export –Ω–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∫ exports
  const nodeCode = uuidCode
    .replace(/export const (\w+) = /g, 'exports.$1 = ')
    .replace(/export default (\w+);/, 'module.exports = $1;')
    .replace(/process\.env\.NODE_ENV/g, '"development"');
  
  eval(nodeCode);
  
  return exports;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ UUID
function isValidUUID(uuid) {
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  return uuidRegex.test(uuid);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
const frontends = ['frontend/buyer', 'frontend/seller', 'frontend/admin'];

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID –≤–æ –≤—Å–µ—Ö —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞—Ö...\n');

frontends.forEach(frontend => {
  console.log(`üìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º ${frontend}:`);
  
  try {
    const uuidUtils = loadUUIDUtils(frontend);
    
    // –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ UUID
    const uuid1 = uuidUtils.generateUUID();
    console.log(`  ‚úÖ generateUUID(): ${uuid1} - ${isValidUUID(uuid1) ? 'VALID' : 'INVALID'}`);
    
    // –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏
    const uuid2 = uuidUtils.generateEntityUUID('test_entity');
    console.log(`  ‚úÖ generateEntityUUID(): ${uuid2} - ${isValidUUID(uuid2) ? 'VALID' : 'INVALID'}`);
    
    // –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å UUID
    const testData = { name: 'Test', value: 123 };
    const withUUIDData = uuidUtils.withUUID(testData, 'test');
    console.log(`  ‚úÖ withUUID(): ${withUUIDData.id} - ${isValidUUID(withUUIDData.id) ? 'VALID' : 'INVALID'}`);
    console.log(`     –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(withUUIDData)}`);
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ç–∏–ø–æ–≤ —Å—É—â–Ω–æ—Å—Ç–µ–π
    const entityTypes = uuidUtils.ENTITY_TYPES;
    console.log(`  ‚úÖ ENTITY_TYPES: ${Object.keys(entityTypes).length} —Ç–∏–ø–æ–≤`);
    console.log(`     –¢–∏–ø—ã: ${Object.values(entityTypes).join(', ')}`);
    
    // –¢–µ—Å—Ç 5: –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å UUID
    const uuids = new Set();
    for (let i = 0; i < 100; i++) {
      uuids.add(uuidUtils.generateUUID());
    }
    console.log(`  ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: ${uuids.size}/100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö UUID`);
    
    console.log(`  üéâ ${frontend} - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!\n`);
    
  } catch (error) {
    console.log(`  ‚ùå ${frontend} - –û–®–ò–ë–ö–ê: ${error.message}\n`);
  }
});

// –¢–µ—Å—Ç API –∑–∞–ø—Ä–æ—Å–∞ —Å UUID (—Å–∏–º—É–ª—è—Ü–∏—è)
console.log('üîå –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å UUID:');

try {
  const buyerUtils = loadUUIDUtils('frontend/buyer');
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  const buyerData = {
    keycloak_uuid: 'test-keycloak-uuid',
    is_online: true
  };
  
  const buyerWithUUID = buyerUtils.withUUID(buyerData, buyerUtils.ENTITY_TYPES.BUYER);
  console.log('  üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:');
  console.log(`     POST /api/v1/buyers`);
  console.log(`     Body: ${JSON.stringify(buyerWithUUID, null, 2)}`);
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  const sellerUtils = loadUUIDUtils('frontend/seller');
  const productData = {
    title: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞',
    price: 1000,
    volume: 2.5,
    seller_id: 'seller-uuid',
    wood_type_id: 'wood-type-uuid'
  };
  
  const productWithUUID = sellerUtils.withUUID(productData, sellerUtils.ENTITY_TYPES.PRODUCT);
  console.log('\n  üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
  console.log(`     POST /api/v1/products`);
  console.log(`     Body: ${JSON.stringify(productWithUUID, null, 2)}`);
  
  console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ UUID –ì–ï–ù–ï–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
  
} catch (error) {
  console.log(`\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–• API: ${error.message}`);
}
