import React, { useState, useEffect } from 'react';
import { useApi } from '../hooks/useApi';
import { apiService } from '../services/api';

function SystemMonitor() {
  const [autoRefresh, setAutoRefresh] = useState(false);
  const [refreshInterval, setRefreshInterval] = useState(30); // seconds
  const [lastUpdate, setLastUpdate] = useState(null);

  const { data: healthData, loading, error, refetch } = useApi(
    () => apiService.getDetailedHealthCheck(),
    []
  );

  // Auto-refresh functionality
  useEffect(() => {
    let interval;
    if (autoRefresh) {
      interval = setInterval(() => {
        refetch();
        setLastUpdate(new Date());
      }, refreshInterval * 1000);
    }
    return () => {
      if (interval) {
        clearInterval(interval);
      }
    };
  }, [autoRefresh, refreshInterval, refetch]);

  const getStatusColor = (status) => {
    switch (status) {
      case 'healthy':
      case 'operational':
      case 'connected':
        return '#10b981'; // green
      case 'unhealthy':
      case 'error':
        return '#ef4444'; // red
      case 'warning':
        return '#f59e0b'; // yellow
      default:
        return '#6b7280'; // gray
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'healthy':
      case 'operational':
      case 'connected':
        return '‚úÖ';
      case 'unhealthy':
      case 'error':
        return '‚ùå';
      case 'warning':
        return '‚ö†Ô∏è';
      default:
        return '‚ùì';
    }
  };



  const formatNumber = (num) => {
    if (typeof num !== 'number') return num;
    return num.toLocaleString();
  };

  return (
    <div className="card">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
        <h3>üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã</h3>
        <div style={{ display: 'flex', gap: '1rem', alignItems: 'center' }}>
          <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', fontSize: '0.9em' }}>
            <input
              type="checkbox"
              checked={autoRefresh}
              onChange={(e) => setAutoRefresh(e.target.checked)}
            />
            –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </label>
          {autoRefresh && (
            <select
              value={refreshInterval}
              onChange={(e) => setRefreshInterval(parseInt(e.target.value))}
              className="form-input"
              style={{ width: 'auto', fontSize: '0.9em' }}
            >
              <option value={10}>10 —Å–µ–∫</option>
              <option value={30}>30 —Å–µ–∫</option>
              <option value={60}>1 –º–∏–Ω</option>
              <option value={300}>5 –º–∏–Ω</option>
            </select>
          )}
          <button onClick={refetch} className="btn btn-secondary" disabled={loading}>
            {loading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'}
          </button>
        </div>
      </div>

      {/* Last Update Info */}
      {(lastUpdate || healthData?.timestamp) && (
        <div style={{ fontSize: '0.9em', color: '#666', marginBottom: '1rem' }}>
          –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {(lastUpdate || new Date(healthData.timestamp)).toLocaleString()}
        </div>
      )}

      {/* Error Display */}
      {error && (
        <div className="error" style={{ marginBottom: '1rem' }}>
          –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {error}
        </div>
      )}

      {/* Loading State */}
      {loading && !healthData && (
        <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</div>
      )}

      {/* Health Data Display */}
      {healthData && (
        <>
          {/* Overall Status */}
          <div className="card" style={{ 
            backgroundColor: healthData.status === 'healthy' ? '#f0fdf4' : '#fef2f2',
            marginBottom: '1.5rem'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
              <div style={{ fontSize: '2rem' }}>
                {getStatusIcon(healthData.status)}
              </div>
              <div>
                <h4 style={{ margin: 0, color: getStatusColor(healthData.status) }}>
                  –°–∏—Å—Ç–µ–º–∞ {healthData.status === 'healthy' ? '—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ' : '–∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã'}
                </h4>
                <p style={{ margin: '0.25rem 0 0 0', fontSize: '0.9em', color: '#666' }}>
                  –°—Ç–∞—Ç—É—Å –Ω–∞ {new Date(healthData.timestamp).toLocaleString()}
                </p>
              </div>
            </div>
          </div>

          {/* Services Status */}
          <div className="grid grid-3" style={{ gap: '1rem', marginBottom: '1.5rem' }}>
            {Object.entries(healthData.services || {}).map(([service, status]) => (
              <div key={service} className="card" style={{ 
                backgroundColor: status === 'connected' || status === 'operational' ? '#f0fdf4' : '#fef2f2',
                textAlign: 'center'
              }}>
                <div style={{ fontSize: '1.5rem', marginBottom: '0.5rem' }}>
                  {getStatusIcon(status)}
                </div>
                <h5 style={{ margin: '0 0 0.25rem 0', textTransform: 'capitalize' }}>
                  {service === 'database' ? '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö' : 
                   service === 'redis' ? 'Redis' : 
                   service === 'api' ? 'API' : service}
                </h5>
                <p style={{ 
                  margin: 0, 
                  fontSize: '0.9em', 
                  color: getStatusColor(status),
                  fontWeight: 'bold'
                }}>
                  {status === 'connected' ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' :
                   status === 'operational' ? '–†–∞–±–æ—Ç–∞–µ—Ç' :
                   status === 'error' ? '–û—à–∏–±–∫–∞' : status}
                </p>
              </div>
            ))}
          </div>

          {/* System Statistics */}
          {healthData.system && (
            <div className="card" style={{ backgroundColor: '#f8fafc', marginBottom: '1.5rem' }}>
              <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h4>
              <div className="grid grid-4" style={{ gap: '1rem' }}>
                {/* Users */}
                <div className="card" style={{ backgroundColor: 'white', textAlign: 'center' }}>
                  <div style={{ fontSize: '1.2rem', color: '#3b82f6' }}>üë•</div>
                  <h5 style={{ margin: '0.5rem 0 0.25rem 0' }}>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h5>
                  <p style={{ margin: 0, fontSize: '1.1em', fontWeight: 'bold' }}>
                    {formatNumber(healthData.system.buyers?.total || 0)} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
                  </p>
                  <p style={{ margin: 0, fontSize: '1.1em', fontWeight: 'bold' }}>
                    {formatNumber(healthData.system.sellers?.total || 0)} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
                  </p>
                  <small style={{ color: '#666' }}>
                    –û–Ω–ª–∞–π–Ω: {formatNumber((healthData.system.buyers?.online || 0) + (healthData.system.sellers?.online || 0))}
                  </small>
                </div>

                {/* Products */}
                <div className="card" style={{ backgroundColor: 'white', textAlign: 'center' }}>
                  <div style={{ fontSize: '1.2rem', color: '#10b981' }}>üì¶</div>
                  <h5 style={{ margin: '0.5rem 0 0.25rem 0' }}>–¢–æ–≤–∞—Ä—ã</h5>
                  <p style={{ margin: 0, fontSize: '1.1em', fontWeight: 'bold' }}>
                    {formatNumber(healthData.system.products?.total || 0)}
                  </p>
                  <small style={{ color: '#666' }}>
                    –û–±—ä–µ–º: {(healthData.system.products?.totalVolume || 0).toFixed(2)} –º¬≥
                  </small>
                </div>

                {/* Wood Types */}
                <div className="card" style={{ backgroundColor: 'white', textAlign: 'center' }}>
                  <div style={{ fontSize: '1.2rem', color: '#8b5cf6' }}>üå≥</div>
                  <h5 style={{ margin: '0.5rem 0 0.25rem 0' }}>–¢–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã</h5>
                  <p style={{ margin: 0, fontSize: '1.1em', fontWeight: 'bold' }}>
                    {formatNumber(healthData.system.woodTypes?.total || 0)}
                  </p>
                  <small style={{ color: '#666' }}>
                    –¶–µ–Ω—ã: {formatNumber(healthData.system.prices?.total || 0)}
                  </small>
                </div>

                {/* Communication */}
                <div className="card" style={{ backgroundColor: 'white', textAlign: 'center' }}>
                  <div style={{ fontSize: '1.2rem', color: '#f59e0b' }}>üí¨</div>
                  <h5 style={{ margin: '0.5rem 0 0.25rem 0' }}>–û–±—â–µ–Ω–∏–µ</h5>
                  <p style={{ margin: 0, fontSize: '1.1em', fontWeight: 'bold' }}>
                    {formatNumber(healthData.system.communication?.threads || 0)} —á–∞—Ç–æ–≤
                  </p>
                  <small style={{ color: '#666' }}>
                    –°–æ–æ–±—â–µ–Ω–∏–π: {formatNumber(healthData.system.communication?.messages || 0)}
                  </small>
                </div>
              </div>
            </div>
          )}

          {/* Error Details */}
          {healthData.error && (
            <div className="card" style={{ backgroundColor: '#fef2f2', marginBottom: '1rem' }}>
              <h4 style={{ color: '#dc2626' }}>‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏</h4>
              <pre style={{ 
                backgroundColor: 'white', 
                padding: '1rem', 
                borderRadius: '4px',
                fontSize: '0.9em',
                overflow: 'auto'
              }}>
                {healthData.error}
              </pre>
            </div>
          )}
        </>
      )}

      {/* System Actions */}
      <div className="card" style={{ backgroundColor: '#f1f5f9' }}>
        <h4>‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
        <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
          <button
            onClick={() => window.open('/api/v1/docs', '_blank')}
            className="btn btn-secondary"
            style={{ fontSize: '0.9em' }}
          >
            üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
          </button>
          <button
            onClick={() => window.open('/api/v1/health', '_blank')}
            className="btn btn-secondary"
            style={{ fontSize: '0.9em' }}
          >
            üîç Health Check
          </button>
          <button
            onClick={refetch}
            className="btn btn-secondary"
            disabled={loading}
            style={{ fontSize: '0.9em' }}
          >
            üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
          </button>
        </div>
      </div>
    </div>
  );
}

export default SystemMonitor;
