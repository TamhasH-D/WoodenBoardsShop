import React, { useState } from 'react';
import { useApiMutation } from '../hooks/useApi';
import { apiService } from '../services/api';

function RedisManager() {
  const [redisKey, setRedisKey] = useState('');
  const [redisValue, setRedisValue] = useState('');
  const [getKey, setGetKey] = useState('');
  const [retrievedData, setRetrievedData] = useState(null);
  const [showAdvanced, setShowAdvanced] = useState(false);

  const { mutate, loading, error, success } = useApiMutation();

  const handleSetValue = async (e) => {
    e.preventDefault();
    if (!redisKey.trim() || !redisValue.trim()) {
      return;
    }

    try {
      await mutate(apiService.setRedisValue, redisKey.trim(), redisValue.trim());
      setRedisKey('');
      setRedisValue('');
    } catch (err) {
      console.error('Failed to set Redis value:', err);
    }
  };

  const handleGetValue = async (e) => {
    e.preventDefault();
    if (!getKey.trim()) {
      return;
    }

    try {
      const result = await mutate(apiService.getRedisValue, getKey.trim());
      setRetrievedData(result);
    } catch (err) {
      console.error('Failed to get Redis value:', err);
      setRetrievedData(null);
    }
  };

  const predefinedKeys = [
    'system:status',
    'cache:buyers_sellers',
    'session:active',
    'config:settings',
    'analytics:daily'
  ];

  return (
    <div className="card">
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
        <h3>üîß Redis –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
        <button
          onClick={() => setShowAdvanced(!showAdvanced)}
          className="btn btn-secondary"
          style={{ fontSize: '0.9em' }}
        >
          {showAdvanced ? '–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º' : '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º'}
        </button>
      </div>

      {/* Error and Success Messages */}
      {error && (
        <div className="error" style={{ marginBottom: '1rem' }}>
          –û—à–∏–±–∫–∞ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏: {error}
        </div>
      )}

      {success && (
        <div className="success" style={{ marginBottom: '1rem' }}>
          Redis –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
        </div>
      )}

      <div className="grid grid-2" style={{ gap: '2rem' }}>
        {/* Set Value Section */}
        <div className="card" style={{ backgroundColor: '#f7fafc' }}>
          <h4>üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ</h4>
          <form onSubmit={handleSetValue}>
            <div className="form-group">
              <label className="form-label">–ö–ª—é—á *</label>
              {showAdvanced ? (
                <input
                  type="text"
                  value={redisKey}
                  onChange={(e) => setRedisKey(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á Redis..."
                  required
                />
              ) : (
                <select
                  value={redisKey}
                  onChange={(e) => setRedisKey(e.target.value)}
                  className="form-input"
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á...</option>
                  {predefinedKeys.map(key => (
                    <option key={key} value={key}>{key}</option>
                  ))}
                  <option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á</option>
                </select>
              )}
              {!showAdvanced && redisKey === 'custom' && (
                <input
                  type="text"
                  value={redisKey}
                  onChange={(e) => setRedisKey(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á..."
                  style={{ marginTop: '0.5rem' }}
                  required
                />
              )}
            </div>
            <div className="form-group">
              <label className="form-label">–ó–Ω–∞—á–µ–Ω–∏–µ *</label>
              <textarea
                value={redisValue}
                onChange={(e) => setRedisValue(e.target.value)}
                className="form-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ (JSON, —Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ)..."
                rows={4}
                required
              />
            </div>
            <button 
              type="submit" 
              className="btn btn-primary" 
              disabled={loading || !redisKey.trim() || !redisValue.trim()}
            >
              {loading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
            </button>
          </form>
        </div>

        {/* Get Value Section */}
        <div className="card" style={{ backgroundColor: '#f0fff4' }}>
          <h4>üîç –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ</h4>
          <form onSubmit={handleGetValue}>
            <div className="form-group">
              <label className="form-label">–ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ *</label>
              {showAdvanced ? (
                <input
                  type="text"
                  value={getKey}
                  onChange={(e) => setGetKey(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞..."
                  required
                />
              ) : (
                <select
                  value={getKey}
                  onChange={(e) => setGetKey(e.target.value)}
                  className="form-input"
                  required
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á...</option>
                  {predefinedKeys.map(key => (
                    <option key={key} value={key}>{key}</option>
                  ))}
                  <option value="custom">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á</option>
                </select>
              )}
              {!showAdvanced && getKey === 'custom' && (
                <input
                  type="text"
                  value={getKey}
                  onChange={(e) => setGetKey(e.target.value)}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª—é—á..."
                  style={{ marginTop: '0.5rem' }}
                  required
                />
              )}
            </div>
            <button 
              type="submit" 
              className="btn btn-success" 
              disabled={loading || !getKey.trim()}
            >
              {loading ? '–ü–æ–∏—Å–∫...' : '–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ'}
            </button>
          </form>

          {/* Retrieved Data Display */}
          {retrievedData && (
            <div style={{ marginTop: '1rem' }}>
              <h5>üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:</h5>
              <div 
                className="card" 
                style={{ 
                  backgroundColor: '#e6fffa', 
                  padding: '1rem',
                  fontFamily: 'monospace',
                  fontSize: '0.9em',
                  maxHeight: '200px',
                  overflowY: 'auto'
                }}
              >
                <strong>–ö–ª—é—á:</strong> {retrievedData.key}<br/>
                <strong>–ó–Ω–∞—á–µ–Ω–∏–µ:</strong><br/>
                <pre style={{ margin: '0.5rem 0', whiteSpace: 'pre-wrap' }}>
                  {typeof retrievedData.value === 'object' 
                    ? JSON.stringify(retrievedData.value, null, 2)
                    : retrievedData.value
                  }
                </pre>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Quick Actions */}
      {showAdvanced && (
        <div className="card" style={{ backgroundColor: '#fff5f5', marginTop: '1rem' }}>
          <h4>‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h4>
          <div style={{ display: 'flex', gap: '1rem', flexWrap: 'wrap' }}>
            <button
              onClick={() => {
                setRedisKey('system:timestamp');
                setRedisValue(new Date().toISOString());
              }}
              className="btn btn-secondary"
              style={{ fontSize: '0.9em' }}
            >
              –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            </button>
            <button
              onClick={() => {
                setRedisKey('admin:session');
                setRedisValue(JSON.stringify({ user: 'admin', timestamp: Date.now() }));
              }}
              className="btn btn-secondary"
              style={{ fontSize: '0.9em' }}
            >
              –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∞
            </button>
            <button
              onClick={() => {
                setGetKey('system:status');
              }}
              className="btn btn-secondary"
              style={{ fontSize: '0.9em' }}
            >
              –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            </button>
          </div>
        </div>
      )}

      {/* Help Section */}
      <div className="card" style={{ backgroundColor: '#f8f9fa', marginTop: '1rem' }}>
        <h5>üí° –°–ø—Ä–∞–≤–∫–∞</h5>
        <ul style={{ margin: '0.5rem 0', paddingLeft: '1.5rem', fontSize: '0.9em' }}>
          <li><strong>Redis</strong> - —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏</li>
          <li><strong>–ö–ª—é—á</strong> - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è</li>
          <li><strong>–ó–Ω–∞—á–µ–Ω–∏–µ</strong> - –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ –∫–ª—é—á—É (—Å—Ç—Ä–æ–∫–∞, JSON, —á–∏—Å–ª–æ)</li>
          <li><strong>–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏</strong> - —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–ª—é—á–∏</li>
          <li><strong>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</strong> - –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∫–ª—é—á–∏</li>
        </ul>
      </div>
    </div>
  );
}

export default RedisManager;
