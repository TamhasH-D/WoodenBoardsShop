import React, { useState, useRef, useEffect } from 'react';

/**
 * –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å–æ–∫ –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
 * –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–ª–µ–≤–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∞
 */
const CompactBoardAnalyzer = ({
  onAnalysisComplete,
  onImageSelect,
  disabled = false,
  initialHeight = '50',
  initialLength = '1000'
}) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [imageUrl, setImageUrl] = useState(null);
  const [boardHeight, setBoardHeight] = useState(initialHeight);
  const [boardLength, setBoardLength] = useState(initialLength);
  const [analyzing, setAnalyzing] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);
  
  const fileInputRef = useRef(null);
  const canvasRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
  const handleFileSelect = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      const url = URL.createObjectURL(file);
      setImageUrl(url);
      setResult(null);
      setError(null);
      
      if (onImageSelect) {
        onImageSelect(file);
      }
    }
  };

  // –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleAnalyze = async () => {
    if (!selectedFile || !boardHeight || !boardLength) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å–æ–∫');
      return;
    }

    const height = parseFloat(boardHeight);
    const length = parseFloat(boardLength);

    if (height <= 0 || length <= 0) {
      setError('–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏');
      return;
    }

    setAnalyzing(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('image', selectedFile);

      const response = await fetch(
        `/api/v1/wooden-boards/calculate-volume?board_height=${height}&board_length=${length}`,
        {
          method: 'POST',
          body: formData,
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.status}`);
      }

      const data = await response.json();
      setResult(data);

      if (onAnalysisComplete) {
        onAnalysisComplete({
          ...data,
          image: selectedFile,
          boardHeight: height,
          boardLength: length
        });
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ');
    } finally {
      setAnalyzing(false);
    }
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
  useEffect(() => {
    if (!canvasRef.current || !imageUrl) return;

    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const img = new Image();

    img.onload = () => {
      // –†–∞–∑–º–µ—Ä—ã canvas
      const maxWidth = 300;
      const maxHeight = 200;
      let { width, height } = img;

      // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
      if (width > maxWidth || height > maxHeight) {
        const ratio = Math.min(maxWidth / width, maxHeight / height);
        width *= ratio;
        height *= ratio;
      }

      canvas.width = width;
      canvas.height = height;

      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      ctx.drawImage(img, 0, 0, width, height);

      // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–æ–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ (–±–µ–∑ –ø–æ–¥—Å—á–µ—Ç–∞)
      if (result?.wooden_boards) {
        drawBoardOutlines(ctx, result.wooden_boards, width, height, img.width, img.height);
      }
    };

    img.src = imageUrl;
  }, [imageUrl, result]);

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–Ω—Ç—É—Ä–æ–≤ –¥–æ—Å–æ–∫ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏
  const drawBoardOutlines = (ctx, boards, canvasWidth, canvasHeight, originalWidth, originalHeight) => {
    const scaleX = canvasWidth / originalWidth;
    const scaleY = canvasHeight / originalHeight;

    boards.forEach((board) => {
      if (board.detection?.points && board.detection.points.length > 0) {
        // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ª–∏–Ω–∏–∏ –±–µ–∑ –∑–∞–ª–∏–≤–∫–∏
        ctx.strokeStyle = 'rgba(37, 99, 235, 0.6)';
        ctx.lineWidth = 1.5;
        ctx.setLineDash([5, 3]); // –ü—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è

        ctx.beginPath();
        const firstPoint = board.detection.points[0];
        ctx.moveTo(firstPoint.x * scaleX, firstPoint.y * scaleY);

        board.detection.points.forEach((point, i) => {
          if (i > 0) {
            ctx.lineTo(point.x * scaleX, point.y * scaleY);
          }
        });

        ctx.closePath();
        ctx.stroke();
        ctx.setLineDash([]); // –°–±—Ä–æ—Å –ø—É–Ω–∫—Ç–∏—Ä–∞
      }
    });
  };

  return (
    <div className="compact-board-analyzer">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="analyzer-header">
        <div className="analyzer-icon">üì∏</div>
        <div className="analyzer-title">
          <h4>–ê–Ω–∞–ª–∏–∑ –¥–æ—Å–æ–∫</h4>
          <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</p>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className={`analyzer-content ${disabled ? 'disabled' : ''}`}>
        <div className="analyzer-layout">
          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ */}
          <div className="controls-section">
            <div className="dimensions-row">
              <div className="dimension-input">
                <label>–í—ã—Å–æ—Ç–∞ (–º–º)</label>
                <input
                  type="number"
                  value={boardHeight}
                  onChange={(e) => setBoardHeight(e.target.value)}
                  placeholder="50"
                  min="1"
                  max="1000"
                  disabled={analyzing}
                />
              </div>
              <div className="dimension-input">
                <label>–î–ª–∏–Ω–∞ (–º–º)</label>
                <input
                  type="number"
                  value={boardLength}
                  onChange={(e) => setBoardLength(e.target.value)}
                  placeholder="1000"
                  min="1"
                  max="10000"
                  disabled={analyzing}
                />
              </div>
            </div>

            <div className="action-buttons">
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileSelect}
                style={{ display: 'none' }}
              />
              <button
                type="button"
                onClick={() => fileInputRef.current?.click()}
                className="btn btn-secondary btn-sm"
                disabled={analyzing}
              >
                üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å
              </button>
              {selectedFile && (
                <button
                  type="button"
                  onClick={handleAnalyze}
                  className="btn btn-primary btn-sm"
                  disabled={analyzing || !boardHeight || !boardLength}
                >
                  {analyzing ? '‚è≥ –ê–Ω–∞–ª–∏–∑...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'}
                </button>
              )}
              {selectedFile && (
                <button
                  type="button"
                  onClick={() => {
                    setSelectedFile(null);
                    setImageUrl(null);
                    setResult(null);
                    setError(null);
                  }}
                  className="btn btn-ghost btn-sm"
                  disabled={analyzing}
                >
                  üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
                </button>
              )}
            </div>

            {selectedFile && (
              <div className="file-info">
                üìé {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
              </div>
            )}

            {result && (
              <div className="quick-results">
                <div className="result-item">
                  <span className="result-label">–î–æ—Å–æ–∫:</span>
                  <span className="result-value">{result.wooden_boards?.length || 0}</span>
                </div>
                <div className="result-item">
                  <span className="result-label">–û–±—ä–µ–º:</span>
                  <span className="result-value">{result.total_volume?.toFixed(4)} –º¬≥</span>
                </div>
              </div>
            )}

            {error && (
              <div className="error-message">
                ‚ö†Ô∏è {error}
              </div>
            )}
          </div>

          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
          <div className="image-section">
            {analyzing && (
              <div className="loading-overlay">
                <div className="spinner"></div>
                <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</p>
              </div>
            )}
            
            {imageUrl && (
              <div className="image-container">
                <canvas
                  ref={canvasRef}
                  className="analysis-canvas"
                />
              </div>
            )}

            {!imageUrl && !analyzing && (
              <div className="image-placeholder">
                <div className="placeholder-icon">üñºÔ∏è</div>
                <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CompactBoardAnalyzer;
