import React, { useState } from 'react';
import { useApi, useApiMutation } from '../hooks/useApi';
import { apiService } from '../services/api';
import { MOCK_IDS } from '../utils/constants';

// Use shared mock seller keycloak ID
const MOCK_SELLER_KEYCLOAK_ID = MOCK_IDS.SELLER_KEYCLOAK_ID;

function Chats() {
  const [page, setPage] = useState(0);
  const [selectedThread, setSelectedThread] = useState(null);
  const [newMessage, setNewMessage] = useState('');

  // Get seller profile to get seller_id
  const { data: sellerProfile } = useApi(() => apiService.getSellerProfileByKeycloakId(MOCK_SELLER_KEYCLOAK_ID), []);
  const sellerId = sellerProfile?.data?.id;

  const { data, loading, error, refetch } = useApi(() => apiService.getSellerChatsByKeycloakId(MOCK_SELLER_KEYCLOAK_ID, page, 10), [page]);
  const { data: messages, loading: messagesLoading, refetch: refetchMessages } = useApi(
    () => selectedThread ? apiService.getChatMessages(selectedThread.id) : Promise.resolve(null),
    [selectedThread?.id] // Only depend on the ID, not the entire object
  );
  const { mutate, loading: sending } = useApiMutation();

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim() || !selectedThread) return;

    try {
      // ID is auto-generated by the backend
      await mutate(() => apiService.sendMessage({
        message: newMessage.trim(),
        is_read_by_buyer: false,
        is_read_by_seller: true,
        thread_id: selectedThread.id,
        buyer_id: selectedThread.buyer_id,
        seller_id: sellerId
      }));
      setNewMessage('');
      refetchMessages();
    } catch (err) {
      console.error('Failed to send message:', err);
    }
  };

  return (
    <div>
      <div className="page-header">
        <h1 className="page-title">Customer Chats</h1>
        <p className="page-description">Communicate with customers about your products</p>
      </div>

      <div className="flex justify-between items-center mb-6">
        <div>
          <p>Total chat threads: {data?.total || data?.data?.length || 0}</p>
        </div>
        <button onClick={refetch} className="btn btn-secondary" disabled={loading}>
          {loading ? 'Loading...' : 'Refresh'}
        </button>
      </div>

      {error && (
        <div className="error mb-4">
          <strong>Chats Loading Issue:</strong> {error}
          <br />
          <small>This may occur if there are no chat threads yet or if the seller account needs to be initialized.</small>
          <div style={{ marginTop: '1rem' }}>
            <button onClick={refetch} className="btn btn-secondary">
              Retry Loading Chats
            </button>
          </div>
        </div>
      )}

      {loading && <div className="loading">Loading chats...</div>}

      {data && (
        <>
          {data.data && data.data.length > 0 ? (
            <div className="card mb-6">
              <div className="card-header">
                <h2 className="card-title">Chat Threads</h2>
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 'var(--space-6)' }}>
                <div>
                  <div style={{ maxHeight: '400px', overflowY: 'auto' }}>
                    {data.data.map((thread) => (
                      <div
                        key={thread.id}
                        onClick={() => setSelectedThread(thread)}
                        className={`card mb-4 ${selectedThread?.id === thread.id ? 'status-success' : ''}`}
                        style={{
                          cursor: 'pointer',
                          backgroundColor: selectedThread?.id === thread.id ? '#dcfce7' : 'white'
                        }}
                      >
                        <div style={{ fontWeight: 'bold' }}>
                          Thread {thread.id.substring(0, 8)}...
                        </div>
                        <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>
                          Buyer: {thread.buyer_id?.substring(0, 8)}...
                        </div>
                        <div style={{ fontSize: '0.875rem', color: '#6b7280' }}>
                          Created: {new Date(thread.created_at).toLocaleDateString()}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>

                <div>
                  <h3>Messages</h3>
                  {selectedThread ? (
                    <div>
                      <div className="card mb-4">
                        <strong>Chat with Buyer {selectedThread.buyer_id?.substring(0, 8)}...</strong>
                      </div>
                      
                      {messagesLoading && <div className="loading">Loading messages...</div>}
                      
                      {messages?.data && messages.data.length > 0 ? (
                        <div style={{ maxHeight: '250px', overflowY: 'auto', marginBottom: '1rem' }}>
                          {messages.data.reverse().map((message) => (
                            <div
                              key={message.id}
                              className="card mb-4"
                              style={{
                                backgroundColor: message.seller_id === sellerId ? '#dbeafe' : '#dcfce7'
                              }}
                            >
                              <div style={{ fontSize: '0.875rem', fontWeight: 'bold' }}>
                                {message.seller_id === sellerId ? 'You' : 'Buyer'}
                              </div>
                              <div>{message.message}</div>
                              <div style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.25rem' }}>
                                {new Date(message.created_at).toLocaleString()}
                              </div>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-center mb-4">
                          <p>No messages yet. Start the conversation!</p>
                        </div>
                      )}

                      {/* Message Input */}
                      <form onSubmit={handleSendMessage}>
                        <div className="flex gap-4">
                          <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder="Type your response..."
                            className="form-input"
                            style={{ flex: 1 }}
                            disabled={sending}
                          />
                          <button
                            type="submit"
                            className="btn btn-primary"
                            disabled={sending || !newMessage.trim()}
                          >
                            {sending ? 'Sending...' : 'Send'}
                          </button>
                        </div>
                      </form>
                    </div>
                  ) : (
                    <div className="text-center">
                      <p>Select a chat thread to view messages</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ) : (
            <div className="text-center">
              <p>No chat threads found.</p>
              <p>Customers will be able to contact you about your products.</p>
            </div>
          )}

          {/* Pagination */}
          {data && data.data && data.data.length > 0 && (
            <div className="flex justify-between items-center mt-6">
              <button
                onClick={() => setPage(Math.max(0, page - 1))}
                disabled={page === 0 || loading}
                className="btn btn-secondary"
              >
                Previous
              </button>
              <span>Page {page + 1}</span>
              <button
                onClick={() => setPage(page + 1)}
                disabled={!data?.data || data.data.length < 10 || loading}
                className="btn btn-secondary"
              >
                Next
              </button>
            </div>
          )}
        </>
      )}
    </div>
  );
}

export default Chats;
