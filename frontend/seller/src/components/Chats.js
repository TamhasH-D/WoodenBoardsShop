import React, { useCallback, useEffect, useMemo, useRef } from 'react';
import { ChatContainer } from './chat';
import { useChat } from '../hooks/useChat';
import { SELLER_TEXTS } from '../utils/localization';

/**
 * Chats ‚Äì —ç–∫—Ä–∞–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏.
 *
 * –£–ª—É—á—à–µ–Ω–∏—è v2:
 *  ‚Ä¢ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–ª–±—ç–∫–∏ —á–µ—Ä–µ–∑ useCallback ‚Üí –º–µ–Ω—å—à–µ –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤ –≤ ChatContainer;
 *  ‚Ä¢ ¬´–ª–∏–ø–∫–∏–π¬ª –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏ –æ—Ñ–ª–∞–π–Ω‚Äë—Ä–µ–∂–∏–º–µ;
 *  ‚Ä¢ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏;
 *  ‚Ä¢ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ ¬´typing‚Ä¶¬ª –¥–µ–±–∞—É–Ω—Å–∏—Ç—Å—è (1¬†—Å–µ–∫. —Ç–∏—à–∏–Ω—ã ‚Üí typing=false);
 *  ‚Ä¢ –∑–∞—â–∏—Ç–∞ –æ—Ç setState –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞;
 *  ‚Ä¢ –≤–µ–¥—ë–º –ª–æ–≥ —Ç–æ–ª—å–∫–æ –≤ dev‚Äë—Å–±–æ—Ä–∫–µ.
 */
function Chats() {
  const {
    threads,
    selectedThread,
    messages,
    loading,
    messagesLoading,
    error,
    isConnected,
    isTyping,
    sellerId,
    selectThread,
    sendMessage,
    sendTypingIndicator,
    refreshThreads,
    clearError,
  } = useChat();

  /** ****************************
   * Derived helpers
   */
  const hasUnread = useMemo(
    () => threads.some((t) => (t.unreadCount ?? 0) > 0),
    [threads]
  );

  /** ****************************
   * Lifecycle effects
   */
  // 1Ô∏è‚É£ –ü—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
  useEffect(() => {
    if (isConnected) refreshThreads();
  }, [isConnected, refreshThreads]);

  // 2Ô∏è‚É£ –ê–≤—Ç–æ‚Äë–≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞ (–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ)
  useEffect(() => {
    if (!selectedThread && threads.length) {
      const firstUnread = threads.find((t) => (t.unreadCount ?? 0) > 0) || threads[0];
      if (firstUnread) selectThread(firstUnread);
    }
  }, [threads, selectedThread, selectThread]);

  // 3Ô∏è‚É£ Guard ‚Äì —á—Ç–æ–±—ã –Ω–µ —Å–µ—Ç–∏—Ç—å —Å—Ç–µ–π—Ç –ø–æ—Å–ª–µ unmount
  const mountedRef = useRef(true);
  useEffect(() => () => {
    mountedRef.current = false;
  }, []);

  /** ****************************
   * Handlers (memoised)
   */
  const handleThreadSelect = useCallback(
    (thread) => {
      selectThread(thread);
    },
    [selectThread]
  );

  const handleSendMessage = useCallback(
    async (messageText) => {
      const success = await sendMessage(messageText);
      if (!success && mountedRef.current) {
        // –û—à–∏–±–∫–∞ —É–∂–µ –ø–æ–ª–æ–∂–µ–Ω–∞ –≤ useChat.error, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ dev‚Äë—Å–±–æ—Ä–∫–µ
        if (process.env.NODE_ENV !== 'production') {
          // eslint-disable-next-line no-console
          console.error('[Chats] Failed to send message ‚Äì see useChat.error');
        }
      }
      // Optimistic‚ÄëUI + push‚Äë—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∫—Ä–æ—é—Ç –≤–æ–ø—Ä–æ—Å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    },
    [sendMessage]
  );

  //  Debounced typing indicator
  const typingTimeoutRef = useRef();
  const handleTyping = useCallback(
    (typing) => {
      if (typing) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø–µ—á–∞—Ç–∞—Ç—å ‚Üí —Å—Ä–∞–∑—É true
        sendTypingIndicator(true);
        clearTimeout(typingTimeoutRef.current);
        typingTimeoutRef.current = setTimeout(() => sendTypingIndicator(false), 1000);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏–ª) ‚Üí true‚Üífalse.
        clearTimeout(typingTimeoutRef.current);
        sendTypingIndicator(false);
      }
    },
    [sendTypingIndicator]
  );

  const handleRefresh = useCallback(() => {
    clearError();
    refreshThreads();
  }, [clearError, refreshThreads]);

  /** ****************************
   * Debug log (dev only)
   */
  if (process.env.NODE_ENV !== 'production') {
    // eslint-disable-next-line no-console
    console.log('[Chats] render', { sellerId, loading, threads: threads.length, error });
  }

  /** ****************************
   * UI helpers
   */
  // const OfflineBanner = () =>
  //   !isConnected ? (
  //     <div className="sticky top-0 z-20 bg-red-50 text-red-700 text-sm p-2 text-center rounded-t-2xl">
  //       –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ ‚Äî –æ—Ñ–ª–∞–π–Ω. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã.
  //     </div>
  //   ) : null;

  return (
    <div className="max-w-7xl mx-auto p-5 bg-slate-50 min-h-screen">
      <div className="bg-white rounded-2xl mb-8 shadow-xl border border-slate-200 flex flex-col">
        {/* <OfflineBanner /> */}
        {/* Header */}
        <div className="p-7 md:p-8 flex flex-col sm:flex-row justify-between sm:items-center gap-4 sm:gap-0 border-b border-slate-100">
          <div>
            <h1 className="m-0 text-slate-700 text-2xl sm:text-3xl font-bold">
              üí¨ {SELLER_TEXTS.CHATS || '–ß–∞—Ç—ã —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏'}
            </h1>
            <p className="mt-2 text-slate-500 text-base sm:text-lg">
              –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –æ –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
            </p>
          </div>
          {hasUnread && (
            <span className="inline-flex items-center rounded-full bg-red-500 px-3 py-1 text-xs font-medium text-white">
              –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            </span>
          )}
        </div>

        {/* Chat container */}
        <div className="p-7 md:p-8 flex-1">
          <ChatContainer
            threads={threads}
            selectedThread={selectedThread}
            messages={messages}
            onThreadSelect={handleThreadSelect}
            onSendMessage={handleSendMessage}
            onTyping={handleTyping}
            onRefresh={handleRefresh}
            loading={loading}
            messagesLoading={messagesLoading}
            isConnected={isConnected}
            isTyping={isTyping}
            sellerId={sellerId}
            error={error}
          />
        </div>
      </div>
    </div>
  );
}

export default Chats;
