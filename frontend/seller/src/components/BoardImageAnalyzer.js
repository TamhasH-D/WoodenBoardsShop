import React, { useState, useRef, useEffect } from 'react';

const BoardImageAnalyzer = ({ 
  onAnalysisComplete, 
  onImageSelect, 
  disabled = false,
  initialHeight = '',
  initialLength = ''
}) => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [boardHeight, setBoardHeight] = useState(initialHeight);
  const [boardLength, setBoardLength] = useState(initialLength);
  const [analyzing, setAnalyzing] = useState(false);
  const [analysisResult, setAnalysisResult] = useState(null);
  const [error, setError] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  
  const fileInputRef = useRef(null);
  const canvasRef = useRef(null);

  // –û—á–∏—Å—Ç–∫–∞ preview –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (preview) {
        URL.revokeObjectURL(preview);
      }
    };
  }, [preview]);

  const handleFileSelect = (e) => {
    const file = e.target.files[0];
    if (file) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (file.size > 10 * 1024 * 1024) {
        setError('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
        return;
      }

      setSelectedFile(file);
      setError(null);
      setAnalysisResult(null);

      // –°–æ–∑–¥–∞–Ω–∏–µ preview
      if (preview) {
        URL.revokeObjectURL(preview);
      }
      const newPreview = URL.createObjectURL(file);
      setPreview(newPreview);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (onImageSelect) {
        onImageSelect(file);
      }
    }
  };

  const handleAnalyze = async () => {
    if (!selectedFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      return;
    }

    const height = parseFloat(boardHeight);
    const length = parseFloat(boardLength);

    if (isNaN(height) || height <= 0) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–æ—Å–∫–∏');
      return;
    }

    if (isNaN(length) || length <= 0) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É –¥–æ—Å–∫–∏');
      return;
    }

    setAnalyzing(true);
    setError(null);

    try {
      const formData = new FormData();
      formData.append('image', selectedFile);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–º –≤ –º–µ—Ç—Ä—ã –¥–ª—è API
      const heightInMeters = height / 1000;
      const lengthInMeters = length / 1000;

      const response = await fetch(
        `/api/v1/wooden_boards_volume_seg/?height=${heightInMeters}&length=${lengthInMeters}`,
        {
          method: 'POST',
          body: formData,
        }
      );

      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.status}`);
      }

      const result = await response.json();
      setAnalysisResult(result);
      setShowDetails(true);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
      if (onAnalysisComplete) {
        onAnalysisComplete({
          ...result,
          image: selectedFile,
          boardHeight: height,
          boardLength: length
        });
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    } finally {
      setAnalyzing(false);
    }
  };

  const clearAnalysis = () => {
    setSelectedFile(null);
    setPreview(null);
    setBoardHeight('');
    setBoardLength('');
    setAnalysisResult(null);
    setError(null);
    setShowDetails(false);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ canvas
  useEffect(() => {
    if (analysisResult && preview && canvasRef.current) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas —Ä–∞–≤–Ω—ã–º —Ä–∞–∑–º–µ—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        canvas.width = img.width;
        canvas.height = img.height;
        
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.drawImage(img, 0, 0);
        
        // –†–∏—Å—É–µ–º –∫–æ–Ω—Ç—É—Ä—ã –¥–æ—Å–æ–∫
        analysisResult.wooden_boards.forEach((board, index) => {
          const { points } = board.detection;
          
          ctx.strokeStyle = '#00ff00';
          ctx.lineWidth = 3;
          ctx.beginPath();
          
          if (points && points.length > 0) {
            ctx.moveTo(points[0].x, points[0].y);
            points.forEach((point, i) => {
              if (i > 0) {
                ctx.lineTo(point.x, point.y);
              }
            });
            ctx.closePath();
            ctx.stroke();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–æ—Å–∫–∏
            const centerX = points.reduce((sum, p) => sum + p.x, 0) / points.length;
            const centerY = points.reduce((sum, p) => sum + p.y, 0) / points.length;
            
            ctx.fillStyle = '#00ff00';
            ctx.font = '20px Arial';
            ctx.fillText(`${index + 1}`, centerX - 10, centerY + 5);
          }
        });
      };
      
      img.src = preview;
    }
  }, [analysisResult, preview]);

  return (
    <div className="board-analyzer">
      <div className="form-group">
        <label className="form-label">
          üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        </label>
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleFileSelect}
          disabled={disabled}
          className="form-input"
        />
        {selectedFile && (
          <div className="file-info">
            –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {selectedFile.name} ({(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
          </div>
        )}
      </div>

      <div className="dimensions-input">
        <div className="form-row">
          <div className="form-group">
            <label className="form-label">–í—ã—Å–æ—Ç–∞ –¥–æ—Å–∫–∏ (–º–º) *</label>
            <input
              type="number"
              value={boardHeight}
              onChange={(e) => setBoardHeight(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 50"
              disabled={disabled}
              className="form-input"
              min="1"
              step="0.1"
            />
          </div>
          <div className="form-group">
            <label className="form-label">–î–ª–∏–Ω–∞ –¥–æ—Å–∫–∏ (–º–º) *</label>
            <input
              type="number"
              value={boardLength}
              onChange={(e) => setBoardLength(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 6000"
              disabled={disabled}
              className="form-input"
              min="1"
              step="0.1"
            />
          </div>
        </div>
      </div>

      <div className="analyzer-actions">
        <button
          type="button"
          onClick={handleAnalyze}
          disabled={!selectedFile || !boardHeight || !boardLength || analyzing || disabled}
          className="btn btn-primary"
        >
          {analyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}
        </button>
        
        {(selectedFile || analysisResult) && (
          <button
            type="button"
            onClick={clearAnalysis}
            disabled={analyzing || disabled}
            className="btn btn-secondary"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å
          </button>
        )}
      </div>

      {error && (
        <div className="error-message">
          ‚ùå {error}
        </div>
      )}

      {preview && (
        <div className="image-preview">
          <h4>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</h4>
          {!analysisResult ? (
            <img src={preview} alt="Preview" style={{ maxWidth: '100%', maxHeight: '400px' }} />
          ) : (
            <canvas
              ref={canvasRef}
              style={{ maxWidth: '100%', maxHeight: '400px', border: '1px solid #ddd' }}
            />
          )}
        </div>
      )}

      {analysisResult && showDetails && (
        <div className="analysis-results">
          <h4>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:</h4>
          <div className="results-summary">
            <div className="result-card">
              <div className="result-value">{analysisResult.total_volume.toFixed(4)} –º¬≥</div>
              <div className="result-label">–û–±—â–∏–π –æ–±—ä–µ–º</div>
            </div>
            <div className="result-card">
              <div className="result-value">{analysisResult.total_count}</div>
              <div className="result-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫</div>
            </div>
          </div>

          {analysisResult.wooden_boards && analysisResult.wooden_boards.length > 0 && (
            <div className="boards-details">
              <h5>–î–µ—Ç–∞–ª–∏ –ø–æ –¥–æ—Å–∫–∞–º:</h5>
              <div className="boards-list">
                {analysisResult.wooden_boards.map((board, index) => (
                  <div key={index} className="board-item">
                    <span className="board-number">#{index + 1}</span>
                    <span className="board-volume">{board.volume.toFixed(4)} –º¬≥</span>
                    <span className="board-dimensions">
                      {board.width.toFixed(1)} √ó {board.height.toFixed(1)} √ó {board.length.toFixed(1)} –º–º
                    </span>
                    <span className="board-confidence">
                      {(board.detection.confidence * 100).toFixed(1)}%
                    </span>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default BoardImageAnalyzer;
