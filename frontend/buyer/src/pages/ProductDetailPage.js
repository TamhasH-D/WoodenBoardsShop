import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import styles from './ProductDetailPage.module.css'; // Import CSS module
import { useApp } from '../contexts/AppContext';
import { useNotifications } from '../contexts/NotificationContext';
import { formatCurrencyRu } from '../utils/localization';
import { apiService } from '../services/api';
import ProductImageWithBoards from '../components/ProductImageWithBoards';
import ProductChat from '../components/ProductChat';

// eslint-disable-next-line no-unused-vars
import { getCurrentBuyerKeycloakId } from '../utils/auth';

const ProductDetailPage = () => {
  const { productId } = useParams();
  const navigate = useNavigate();
  const { setPageTitle } = useApp();
  const { showSuccess, showError } = useNotifications();

  const [product, setProduct] = useState(null);
  const [seller, setSeller] = useState(null);
  const [woodType, setWoodType] = useState(null);
  const [boardsCount, setBoardsCount] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const chatRef = useRef(null);

  // buyerId —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ ProductChat –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  useEffect(() => {
    loadProductData();
  }, [productId]); // eslint-disable-line react-hooks/exhaustive-deps

  // Track product page view
  useEffect(() => {
    if (product && window.umami) {
      window.umami.track('Product - Page Viewed', {
        productId: product.id,
        productTitle: product.title || product.neme || 'Untitled',
        price: product.price,
        volume: product.volume,
        sellerId: product.seller_id,
        woodTypeId: product.wood_type_id,
        deliveryPossible: product.delivery_possible,
        hasPickupLocation: product.has_pickup_location
      });
    }
  }, [product]);

  const loadProductData = async () => {
    try {
      setLoading(true);
      setError(null);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
      const productResponse = await apiService.getProduct(productId);
      const productData = productResponse.data;
      // No longer set page title immediately here, do it after image potentially added

      setProduct(productData);
      setPageTitle(productData.title || productData.neme || '–¢–æ–≤–∞—Ä'); // Set page title now

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ (can proceed even if image fetch fails)
      if (productData.seller_id) {
        try {
          const sellerResponse = await apiService.getSeller(productData.seller_id);
          setSeller(sellerResponse.data);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:', err);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã (can proceed even if image fetch fails)
      if (productData.wood_type_id) {
        try {
          const woodTypeResponse = await apiService.getWoodType(productData.wood_type_id);
          setWoodType(woodTypeResponse.data);
        } catch (err) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã:', err);
        }
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫
      try {
        const boardsStats = await apiService.getProductBoardsStats(productData.id);
        setBoardsCount(boardsStats.total_count || 0);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å–æ–∫:', err);
        setBoardsCount(0);
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞:', err);
      setError('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä');
      setProduct(null); // Ensure product is null on error
    } finally {
      setLoading(false);
    }
  };

  const handleStartChat = () => {
    if (product && seller) {
      // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —á–∞—Ç—É –Ω–∞ —ç—Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      scrollToChat();
      showSuccess('–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —á–∞—Ç—É —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º');
    }
  };

  const scrollToChat = () => {
    if (chatRef.current) {
      chatRef.current.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }
  };

  if (loading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.loadingSpinnerContainer}>
          <div className={styles.loadingSpinner} />
          <p className={styles.loadingText}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–∞...</p>
        </div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className={styles.errorContainer}>
        <div className={styles.errorContent}>
          <div className={styles.errorIcon}>üòû</div>
          <h2 className={styles.errorTitle}>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>
          <p className={styles.errorMessage}>
            –í–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞
          </p>
          <button
            onClick={() => navigate('/products')}
            className={styles.errorButton}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É
          </button>
        </div>
      </div>
    );
  }

  const pricePerCubicMeter = product.volume > 0 ? (product.price / product.volume).toFixed(0) : 0;
  const isLgScreen = window.innerWidth >= 1024;
  const isMdScreen = window.innerWidth >= 768;
  const isSmScreen = window.innerWidth >= 640;


  return (
    <div className={`${styles.pageContainer} ${!isMdScreen ? styles.pageContainerResponsive : ''}`}>
      <div className={`${styles.contentWrapper} ${!isMdScreen ? styles.contentWrapperResponsive : ''}`}>
        {/* –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ */}
        <nav className={styles.breadcrumbsNav}>
          <div className={styles.breadcrumbsInner}>
            <button
              onClick={() => navigate('/products')}
              className={styles.breadcrumbButton}
            >
              üè† –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
            </button>
            <span className={styles.breadcrumbSeparator}>‚Üí</span>
            <span className={styles.breadcrumbCurrentPage}>
              {product.title || product.neme || '–¢–æ–≤–∞—Ä'}
            </span>
          </div>
        </nav>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
        <div className={`
          ${styles.productGrid}
          ${!isLgScreen && isMdScreen ? styles.productGridMd : ''}
          ${!isMdScreen ? styles.productGridSm : ''}
        `}>
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ */}
          <div className={styles.imageColumn}>
            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
            <div className={styles.imageContainer}>
              <ProductImageWithBoards
                product={product}
                className={styles.productImageStyle} // Pass className instead of style
              />
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className={styles.infoColumn}>
            <div className={styles.infoHeader}>
              <h1 className={`${styles.productTitle} ${!isMdScreen ? styles.productTitleSm : ''}`}>
                {product.title || product.neme || '–¢–æ–≤–∞—Ä'}
              </h1>
              {product.delivery_possible && (
                <div className={styles.deliveryTag}>
                  üöö –î–æ—Å—Ç–∞–≤–∫–∞
                </div>
              )}
            </div>

            <div className={styles.priceSection}>
              <span className={styles.productPrice}>
                {formatCurrencyRu(product.price || 0)}
              </span>
              <div className={styles.pricePerUnitContainer}>
                <span className={styles.pricePerUnit}>
                  {pricePerCubicMeter} ‚ÇΩ/–º¬≥
                </span>
                <span className={styles.priceUnitLabel}>
                  –∑–∞ –∫—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä
                </span>
              </div>
            </div>

            {product.descrioption && (
              <div className={styles.descriptionSection}>
                <h3 className={styles.sectionTitle}>
                  üìù –û–ø–∏—Å–∞–Ω–∏–µ
                </h3>
                <div className={styles.descriptionContent}>
                  <p className={styles.descriptionText}>
                    {product.descrioption}
                  </p>
                </div>
              </div>
            )}

            {/* –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
            <div className={styles.characteristicsSection}>
              <h3 className={styles.characteristicsTitle}>
                üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </h3>
              <div className={`${styles.characteristicsGrid} ${!isSmScreen ? styles.characteristicsGridSm : ''}`}>
                <div className={styles.characteristicItem}>
                  <div className={styles.characteristicLabel}>
                    üì¶ –û–±—ä–µ–º
                  </div>
                  <div className={styles.characteristicValue}>
                    {product.volume?.toFixed(4) || '0'} –º¬≥
                  </div>
                </div>
                <div className={styles.boardCountItem}>
                  <div className={styles.boardCountLabel}>
                    ü™µ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å–æ–∫
                  </div>
                  <div className={styles.boardCountValue}>
                    {boardsCount !== null ? boardsCount : '–ó–∞–≥—Ä—É–∑–∫–∞...'}
                  </div>
                </div>
                {woodType && (
                  <div className={`${styles.woodTypeItem} ${!isSmScreen ? styles.woodTypeItemSm : ''}`}>
                    <div className={styles.woodTypeLabel}>
                      üå≥ –¢–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
                    </div>
                    <div className={styles.woodTypeValue}>
                      {woodType.neme || woodType.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    </div>
                  </div>
                )}
                {product.pickup_location && (
                  <div className={`${styles.pickupLocationItem} ${!isSmScreen ? styles.pickupLocationItemSm : ''}`}>
                    <div className={styles.pickupLocationLabel}>
                      üìç –ê–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞
                    </div>
                    <div className={styles.pickupLocationValue}>
                      {product.pickup_location}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <div className={`${styles.actionsContainer} ${!isSmScreen ? styles.actionsContainerSm : ''}`}>
              <button
                onClick={handleStartChat}
                className={styles.chatButton}
              >
                <span>üí¨</span>
                <span>–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É</span>
              </button>

              <button
                onClick={() => navigate('/chats')}
                className={styles.allChatsButton}
              >
                <span>üìã</span>
                <span>–í—Å–µ —á–∞—Ç—ã</span>
              </button>
            </div>
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥–∞–≤—Ü–µ */}
        {seller && (
          <div className={styles.sellerInfoContainer}>
            <h2 className={styles.sellerInfoHeader}>
              üè™ –û –ø—Ä–æ–¥–∞–≤—Ü–µ
            </h2>
            <div className={styles.sellerDetails}>
              <div className={`
                ${styles.sellerAvatarContainer}
                ${seller.is_online ? styles.sellerAvatarOnline : styles.sellerAvatarOffline}
              `}>
                üè™
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ */}
                <div className={`
                  ${styles.onlineIndicator}
                  ${seller.is_online ? styles.onlineIndicatorOnline : styles.onlineIndicatorOffline}
                `} />
              </div>
              <div className={styles.sellerMeta}>
                <div className={styles.sellerNameContainer}>
                  <h3 className={styles.sellerName}>
                    {seller.neme || seller.name || '–ü—Ä–æ–¥–∞–≤–µ—Ü'}
                  </h3>
                  <span className={`
                    ${styles.sellerStatusBadge}
                    ${seller.is_online ? styles.sellerStatusOnline : styles.sellerStatusOffline}
                  `}>
                    {seller.is_online ? 'üü¢ –û–Ω–ª–∞–π–Ω' : '‚ö´ –û—Ñ–ª–∞–π–Ω'}
                  </span>
                </div>
                <div className={`${styles.sellerStatsGrid} ${!isSmScreen ? styles.sellerStatsGridSm : ''}`}>
                  <div className={styles.sellerStatItem}>
                    <div className={styles.sellerStatLabel}>
                      ID –ø—Ä–æ–¥–∞–≤—Ü–∞
                    </div>
                    <div className={`${styles.sellerStatValue} ${styles.sellerStatValueMonospace}`}>
                      {seller.id?.substring(0, 8)}...
                    </div>
                  </div>
                  <div className={styles.sellerStatItem}>
                    <div className={styles.sellerStatLabel}>
                      –£—á–∞—Å—Ç–Ω–∏–∫ —Å
                    </div>
                    <div className={styles.sellerStatValue}>
                      {new Date(seller.created_at).toLocaleDateString('ru-RU', {
                        year: 'numeric',
                        month: 'long'
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className={styles.sellerAdviceContainer}>
              <div className={styles.sellerAdviceHeader}>
                <span className={styles.sellerAdviceIcon}>üí°</span>
                <span className={styles.sellerAdviceTitle}>
                  –°–æ–≤–µ—Ç
                </span>
              </div>
              <p className={styles.sellerAdviceText}>
                –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º —á–µ—Ä–µ–∑ —á–∞—Ç –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞,
                —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è –æ —Ü–µ–Ω–µ.
              </p>
            </div>
          </div>
        )}

        {/* –ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º */}
        <div ref={chatRef}>
          <ProductChat
            productId={productId}
            product={product}
            sellerId={product.seller_id}
          />
        </div>
      </div>
    </div>
  );
};

export default ProductDetailPage;
