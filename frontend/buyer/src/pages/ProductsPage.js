import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useApp } from '../contexts/AppContext';
import { useCart } from '../contexts/CartContext';
import { useNotifications } from '../contexts/NotificationContext';
import { BUYER_TEXTS, formatCurrencyRu } from '../utils/localization';
import { apiService } from '../services/api';
import StartChatButton from '../components/chat/StartChatButton';

/**
 * –ü—Ä–µ–º–∏—É–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∏—Å–∫, –ø–∞–≥–∏–Ω–∞—Ü–∏—è
 */
const ProductsPage = () => {
  const navigate = useNavigate();
  const { setPageTitle, searchQuery, setSearchQuery, filters, setFilters, resetFilters } = useApp();
  const { addToCart, isInCart } = useCart();
  const { showCartSuccess } = useNotifications();

  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [totalProducts, setTotalProducts] = useState(0);
  const [currentPage, setCurrentPage] = useState(0);
  const [woodTypes, setWoodTypes] = useState([]);
  const [sellers, setSellers] = useState([]);

  const pageSize = 12;

  // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  const [initialLoaded, setInitialLoaded] = useState(false);

  useEffect(() => {
    setPageTitle(BUYER_TEXTS.PRODUCTS);
    if (!initialLoaded) {
      loadInitialData();
    }
  }, [setPageTitle, initialLoaded, loadInitialData]);

  const loadInitialData = useCallback(async () => {
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
      const [woodTypesData, sellersData] = await Promise.all([
        apiService.getWoodTypes(0, 20),
        apiService.getSellers(0, 20)
      ]);

      setWoodTypes(woodTypesData.data || []);
      setSellers(sellersData.data || []);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã
      await loadProducts();
      setInitialLoaded(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
    }
  }, [loadProducts]);

  const loadProducts = useCallback(async () => {
    try {
      setLoading(true);

      let result;
      if (searchQuery.trim()) {
        result = await apiService.searchProducts(searchQuery, currentPage, pageSize);
      } else {
        result = await apiService.getProducts(currentPage, pageSize);
      }

      setProducts(result.data || []);
      setTotalProducts(result.total || 0);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
      // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
      setProducts([]);
    } finally {
      setLoading(false);
    }
  }, [searchQuery, currentPage]);

  // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
  useEffect(() => {
    if (initialLoaded) {
      loadProducts();
    }
  }, [searchQuery, currentPage, initialLoaded, loadProducts]);

  const handleAddToCart = (product) => {
    addToCart(product, 1);
    showCartSuccess(product.title || product.neme || '–¢–æ–≤–∞—Ä');
  };

  const handleSearch = (query) => {
    setSearchQuery(query);
    setCurrentPage(0);
  };

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    setCurrentPage(0);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const totalPages = Math.ceil(totalProducts / pageSize);

  return (
    <div className="products-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="page-header">
        <h1 className="page-title">{BUYER_TEXTS.PRODUCTS}</h1>
        <p className="page-description">
          –ö–∞—Ç–∞–ª–æ–≥ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã –æ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        </p>
        <div className="page-stats">
          {totalProducts > 0 && (
            <span className="stats-text">
              –ù–∞–π–¥–µ–Ω–æ {totalProducts} —Ç–æ–≤–∞—Ä–æ–≤
            </span>
          )}
        </div>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className="filters-section">
        <div className="filters-card">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="filter-group">
            <label className="filter-label">–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</label>
            <div className="search-container">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => handleSearch(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
                className="form-input"
              />
            </div>
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <div className="filters-grid">
            <div className="filter-group">
              <label className="filter-label">–¢–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã</label>
              <select
                value={filters.woodType}
                onChange={(e) => handleFilterChange({ ...filters, woodType: e.target.value })}
                className="form-select"
              >
                <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                {woodTypes.map(type => (
                  <option key={type.id} value={type.id}>
                    {type.neme || type.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="filter-group">
              <label className="filter-label">–ü—Ä–æ–¥–∞–≤–µ—Ü</label>
              <select
                value={filters.seller}
                onChange={(e) => handleFilterChange({ ...filters, seller: e.target.value })}
                className="form-select"
              >
                <option value="">–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã</option>
                {sellers.map(seller => (
                  <option key={seller.id} value={seller.id}>
                    {seller.neme || seller.name}
                  </option>
                ))}
              </select>
            </div>

            <div className="filter-group">
              <label className="filter-label">–¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</label>
              <div className="price-range">
                <input
                  type="number"
                  placeholder="–û—Ç"
                  value={filters.priceRange[0]}
                  onChange={(e) => handleFilterChange({
                    ...filters,
                    priceRange: [Number(e.target.value) || 0, filters.priceRange[1]]
                  })}
                  className="form-input price-input"
                />
                <span className="price-separator">‚Äî</span>
                <input
                  type="number"
                  placeholder="–î–æ"
                  value={filters.priceRange[1]}
                  onChange={(e) => handleFilterChange({
                    ...filters,
                    priceRange: [filters.priceRange[0], Number(e.target.value) || 100000]
                  })}
                  className="form-input price-input"
                />
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          <div className="filter-actions">
            <button
              onClick={resetFilters}
              className="btn btn-ghost btn-small"
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      <div className="products-section">
        {loading ? (
          <div className="products-loading">
            <div className="loading-grid">
              {Array.from({ length: pageSize }).map((_, index) => (
                <div key={index} className="product-skeleton">
                  <div className="skeleton-image"></div>
                  <div className="skeleton-content">
                    <div className="skeleton-title"></div>
                    <div className="skeleton-price"></div>
                    <div className="skeleton-button"></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : products.length > 0 ? (
          <>
            <div className="products-grid">
              {products.map(product => (
                <ProductCard
                  key={product.id}
                  product={product}
                  onAddToCart={handleAddToCart}
                  isInCart={isInCart(product.id)}
                  navigate={navigate}
                />
              ))}
            </div>

            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            {totalPages > 1 && (
              <div className="pagination">
                <button
                  onClick={() => handlePageChange(currentPage - 1)}
                  disabled={currentPage === 0}
                  className="btn btn-secondary btn-small"
                >
                  ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∞—è
                </button>

                <div className="pagination-info">
                  –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage + 1} –∏–∑ {totalPages}
                </div>

                <button
                  onClick={() => handlePageChange(currentPage + 1)}
                  disabled={currentPage >= totalPages - 1}
                  className="btn btn-secondary btn-small"
                >
                  –°–ª–µ–¥—É—é—â–∞—è ‚Üí
                </button>
              </div>
            )}
          </>
        ) : (
          <div className="empty-state">
            <div className="empty-icon">üîç</div>
            <h3 className="empty-title">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p className="empty-description">
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã
            </p>
            <button
              onClick={resetFilters}
              className="btn btn-primary"
            >
              –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

/**
 * –ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞ - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
 */
const ProductCard = ({ product, onAddToCart, isInCart, navigate }) => {
  // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—É –∑–∞ –∫—É–±–∏—á–µ—Å–∫–∏–π –º–µ—Ç—Ä
  const pricePerCubicMeter = product.volume > 0 ? (product.price / product.volume).toFixed(2) : '0.00';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ
  const deliveryInfo = product.delivery_available
    ? '–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞'
    : product.pickup_address
      ? `–°–∞–º–æ–≤—ã–≤–æ–∑: ${product.pickup_address}`
      : '–£—Ç–æ—á–Ω–∏—Ç–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞';

  return (
    <div className="product-card hover-lift">
      <div className="product-image">
        {product.image_url ? (
          <img
            src={product.image_url}
            alt={product.title || product.neme || '–¢–æ–≤–∞—Ä'}
            style={{ width: '100%', height: '100%', objectFit: 'cover' }}
          />
        ) : (
          <div className="product-placeholder">
            üå≤
          </div>
        )}
        {isInCart && (
          <div className="product-badge">
            –í –∫–æ—Ä–∑–∏–Ω–µ
          </div>
        )}
      </div>

      <div className="product-info">
        <h3 className="product-name">
          <button
            onClick={() => navigate(`/product/${product.id}`)}
            style={{
              background: 'none',
              border: 'none',
              color: 'inherit',
              cursor: 'pointer',
              textAlign: 'left',
              padding: 0,
              font: 'inherit',
              textDecoration: 'none'
            }}
            onMouseEnter={(e) => e.target.style.textDecoration = 'underline'}
            onMouseLeave={(e) => e.target.style.textDecoration = 'none'}
          >
            {product.title || product.neme || '–¢–æ–≤–∞—Ä –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
          </button>
        </h3>

        {(product.descrioption || product.description) && (
          <p className="product-description">
            {product.descrioption || product.description}
          </p>
        )}

        <div className="product-details">
          <div className="product-volume">
            <strong>–û–±—ä–µ–º:</strong> {product.volume || 0} –º¬≥
          </div>
          <div className="product-wood-type">
            <strong>–î—Ä–µ–≤–µ—Å–∏–Ω–∞:</strong> {product.wood_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}
          </div>
          <div className="product-delivery">
            <strong>–î–æ—Å—Ç–∞–≤–∫–∞:</strong> {deliveryInfo}
          </div>
          {product.board_count && (
            <div className="product-volume">
              <strong>–î–æ—Å–æ–∫:</strong> {product.board_count} —à—Ç.
            </div>
          )}
        </div>

        <div className="product-footer">
          <div>
            <div className="product-price">
              {formatCurrencyRu(product.price || 0)}
            </div>
            <div className="product-price-per-unit">
              {pricePerCubicMeter} ‚ÇΩ/–º¬≥
            </div>
          </div>

          <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
            <button
              onClick={() => navigate(`/product/${product.id}`)}
              className="btn btn-small btn-outline"
            >
              üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ
            </button>

            <button
              onClick={() => onAddToCart(product)}
              disabled={isInCart}
              className={`btn btn-small ${isInCart ? 'btn-ghost' : 'btn-primary'}`}
            >
              {isInCart ? '–í –∫–æ—Ä–∑–∏–Ω–µ' : '–í –∫–æ—Ä–∑–∏–Ω—É'}
            </button>

            {product.seller_id && (
              <StartChatButton
                sellerId={product.seller_id}
                sellerName={`–ü—Ä–æ–¥–∞–≤–µ—Ü —Ç–æ–≤–∞—Ä–∞ "${product.title || product.neme || '–¢–æ–≤–∞—Ä'}"`}
                size="small"
                className="btn btn-secondary btn-small"
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductsPage;
