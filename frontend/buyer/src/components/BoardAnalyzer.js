import React, { useState, useRef, useEffect } from 'react';
import ImageUpload from './ui/ImageUpload';
import ResultDisplay from './ui/ResultDisplay';
import ErrorToast from './ui/ErrorToast';
import { apiService } from '../services/api';

/**
 * –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å–æ–∫ –¥–ª—è buyer frontend
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ –∫—Ä–∞—Å–∏–≤—ã–π UI —á—Ç–æ –∏ seller, –Ω–æ —Å API –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è buyer
 */
const BoardAnalyzer = () => {
  const [imageUrl, setImageUrl] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const resultRef = useRef(null);

  // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
  useEffect(() => {
    if (result && !loading && resultRef.current) {
      const yOffset = -window.innerHeight * 0.35; // 35% –≤—ã—Å–æ—Ç—ã viewport –∫–∞–∫ –æ—Ç—Å—Ç—É–ø
      const element = resultRef.current;
      const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

      window.scrollTo({ top: y, behavior: 'smooth' });
    }
  }, [result, loading]);

  const handleAnalyze = async (file, height, length) => {
    try {
      setLoading(true);
      setError(null);

      // –°–æ–∑–¥–∞–µ–º object URL –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
      const objectUrl = URL.createObjectURL(file);
      setImageUrl(objectUrl);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º apiService –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å REACT_APP_API_URL
      const data = await apiService.analyzeWoodenBoard(file, height, length);
      setResult(data);

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å–æ–∫:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{
      minHeight: '100vh',
      background: 'linear-gradient(to bottom, #f9fafb, #f3f4f6)',
      padding: '2rem 1rem',
      fontFamily: 'Inter, system-ui, sans-serif'
    }}>
      <div style={{ maxWidth: '112rem', margin: '0 auto' }}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div style={{ textAlign: 'center', marginBottom: '3rem' }}>
          <h1 style={{
            fontSize: '2.5rem',
            fontWeight: '700',
            color: '#1f2937',
            marginBottom: '1rem',
            background: 'linear-gradient(135deg, var(--color-primary), #1e40af)',
            WebkitBackgroundClip: 'text',
            WebkitTextFillColor: 'transparent',
            backgroundClip: 'text'
          }}>
            ü™µ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–æ—Å–æ–∫
          </h1>
          <p style={{
            fontSize: '1.125rem',
            color: '#6b7280',
            maxWidth: '48rem',
            margin: '0 auto',
            lineHeight: '1.6'
          }}>
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–æ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
          </p>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="card" style={{ marginBottom: '2rem', maxWidth: '48rem', margin: '0 auto 2rem auto' }}>
          <h3 style={{ fontSize: '1.25rem', fontWeight: '600', color: '#374151', marginBottom: '1rem' }}>
            üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
          </h3>
          <div style={{ display: 'flex', flexDirection: 'column', gap: '0.75rem' }}>
            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>
              <span style={{
                backgroundColor: 'var(--color-primary)',
                color: 'white',
                borderRadius: '50%',
                width: '1.5rem',
                height: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '0.75rem',
                fontWeight: '600',
                flexShrink: 0
              }}>1</span>
              <p style={{ margin: 0, color: '#4b5563' }}>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å–æ–∫ (–≤—ã—Å–æ—Ç–∞ –∏ –¥–ª–∏–Ω–∞ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞—Ö)</p>
            </div>
            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>
              <span style={{
                backgroundColor: 'var(--color-primary)',
                color: 'white',
                borderRadius: '50%',
                width: '1.5rem',
                height: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '0.75rem',
                fontWeight: '600',
                flexShrink: 0
              }}>2</span>
              <p style={{ margin: 0, color: '#4b5563' }}>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–æ–∫ (PNG, JPG –¥–æ 10MB)</p>
            </div>
            <div style={{ display: 'flex', alignItems: 'flex-start', gap: '0.75rem' }}>
              <span style={{
                backgroundColor: 'var(--color-primary)',
                color: 'white',
                borderRadius: '50%',
                width: '1.5rem',
                height: '1.5rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '0.75rem',
                fontWeight: '600',
                flexShrink: 0
              }}>3</span>
              <p style={{ margin: 0, color: '#4b5563' }}>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑" –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π</p>
            </div>
          </div>
        </div>

        <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>
          <ImageUpload onAnalyze={handleAnalyze} />

          {loading && (
            <div style={{
              textAlign: 'center',
              padding: '2rem',
              backgroundColor: 'white',
              borderRadius: '0.75rem',
              boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)'
            }}>
              <div style={{
                display: 'inline-block',
                width: '2.5rem',
                height: '2.5rem',
                border: '4px solid var(--color-primary)',
                borderTopColor: 'transparent',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite'
              }}></div>
              <p style={{ marginTop: '1rem', color: '#374151', fontWeight: '500', margin: '1rem 0 0 0' }}>
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...
              </p>
              <p style={{ fontSize: '0.875rem', color: '#6b7280', marginTop: '0.5rem', margin: '0.5rem 0 0 0' }}>
                –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
              </p>
            </div>
          )}

          <ErrorToast error={error} onDismiss={() => setError(null)} />

          {imageUrl && result && (
            <div ref={resultRef}>
              <ResultDisplay imageUrl={imageUrl} result={result} />
            </div>
          )}
        </div>
      </div>

      <style jsx>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );

};

export default BoardAnalyzer;
