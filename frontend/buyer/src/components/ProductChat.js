import React, { useState, useEffect, useRef, useCallback, useMemo } from 'react';
import { useNotifications } from '../contexts/NotificationContext';
import { apiService } from '../services/api';
import { getChatWebSocketUrl } from '../utils/websocket';

const ProductChat = ({ productId, product, sellerId, buyerId }) => {
  const { showError, showSuccess } = useNotifications();
  const [thread, setThread] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [loading, setLoading] = useState(true);
  const [sending, setSending] = useState(false);
  const [hasExistingChat, setHasExistingChat] = useState(false);

  const wsRef = useRef(null);
  const messagesEndRef = useRef(null);
  const reconnectTimeoutRef = useRef(null);
  const isConnectingRef = useRef(false);

  // –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –º–µ–º–æ–∏–∑–∏—Ä—É–µ–º —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
  const defaultMessage = useMemo(() =>
    `–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º "${product?.title || product?.neme || '—Ç–æ–≤–∞—Ä'}"`,
    [product?.title, product?.neme]
  );

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async (threadId) => {
    if (!threadId) return;

    try {
      const result = await apiService.getChatMessages(threadId, 0, 50);
      setMessages(result.data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }, []);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
  const connectWebSocket = useCallback((threadId) => {
    if (!threadId || !buyerId || isConnectingRef.current) return;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (wsRef.current) {
      wsRef.current.close();
      wsRef.current = null;
    }

    isConnectingRef.current = true;
    const wsUrl = getChatWebSocketUrl(threadId, buyerId, 'buyer');
    wsRef.current = new WebSocket(wsUrl);

    wsRef.current.onopen = () => {
      setIsConnected(true);
    };

    wsRef.current.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        
        if (data.type === 'message') {
          setMessages(prev => [...prev, {
            id: data.message_id || Date.now(),
            message: data.message,
            sender_id: data.sender_id,
            sender_type: data.sender_type,
            created_at: data.timestamp,
            thread_id: data.thread_id,
            buyer_id: data.sender_type === 'buyer' ? data.sender_id : buyerId,
            seller_id: data.sender_type === 'seller' ? data.sender_id : sellerId,
            is_read_by_buyer: data.sender_type === 'buyer',
            is_read_by_seller: data.sender_type === 'seller'
          }]);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    };

    wsRef.current.onclose = () => {
      isConnectingRef.current = false;
      setIsConnected(false);

      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—â–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω
      if (threadId && buyerId) {
        reconnectTimeoutRef.current = setTimeout(() => {
          if (threadId && buyerId) { // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            connectWebSocket(threadId);
          }
        }, 3000);
      }
    };

    wsRef.current.onerror = (error) => {
      console.error('–û—à–∏–±–∫–∞ WebSocket:', error);
      isConnectingRef.current = false;
      setIsConnected(false);
    };
  }, [buyerId, sellerId]);

  // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
  const loadChatData = useCallback(async () => {
    if (!sellerId || !buyerId) return;

    try {
      setLoading(true);

      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
      const result = await apiService.getBuyerChats(buyerId);
      const existingThread = result.data?.find(t => t.seller_id === sellerId);

      if (existingThread) {
        setThread(existingThread);
        setHasExistingChat(true);
        setNewMessage(''); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await loadMessages(existingThread.id);

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
        connectWebSocket(existingThread.id);
      } else if (!hasExistingChat && !newMessage) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
        setNewMessage(defaultMessage);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:', error);
    } finally {
      setLoading(false);
    }
  }, [sellerId, buyerId, loadMessages, connectWebSocket, hasExistingChat, newMessage, defaultMessage]);

  const createChatThread = async () => {
    try {
      const result = await apiService.startChatWithSeller(buyerId, sellerId);
      const newThread = result.data;

      setThread(newThread);
      setHasExistingChat(true);
      connectWebSocket(newThread.id);

      return newThread;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç');
      throw error;
    }
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    const messageText = newMessage.trim();
    setSending(true);

    try {
      let currentThread = thread;
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!currentThread) {
        currentThread = await createChatThread();
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const messageId = crypto.randomUUID();
      const messageData = {
        id: messageId,
        message: messageText,
        is_read_by_buyer: true,
        is_read_by_seller: false,
        thread_id: currentThread.id,
        buyer_id: buyerId,
        seller_id: sellerId
      };

      const result = await apiService.sendMessage(messageData);
      if (result) {
        setNewMessage('');
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {
          wsRef.current.send(JSON.stringify({
            type: 'message',
            message: messageText,
            message_id: messageId
          }));
        }
        
        if (!hasExistingChat) {
          showSuccess('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É');
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
      setNewMessage(messageText); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    } finally {
      setSending(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = useCallback(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, []);

  // –û—Å–Ω–æ–≤–Ω–æ–π useEffect –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞
  useEffect(() => {
    loadChatData();
  }, [loadChatData]);

  // useEffect –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    scrollToBottom();
  }, [messages, scrollToBottom]);

  // Cleanup useEffect
  useEffect(() => {
    return () => {
      // –û—á–∏—â–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      isConnectingRef.current = false;
    };
  }, []);

  return (
    <div style={{
      backgroundColor: 'white',
      borderRadius: '16px',
      boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
      border: '1px solid rgba(0,0,0,0.05)',
      overflow: 'hidden'
    }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div style={{
        padding: window.innerWidth >= 768 ? '32px' : '24px',
        borderBottom: '1px solid #e2e8f0',
        background: 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'
      }}>
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          flexWrap: 'wrap',
          gap: '16px'
        }}>
          <div style={{ flex: 1, minWidth: '200px' }}>
            <h2 style={{
              margin: '0 0 8px 0',
              fontSize: window.innerWidth >= 768 ? '28px' : '24px',
              fontWeight: '700',
              color: '#1f2937',
              display: 'flex',
              alignItems: 'center',
              gap: '12px'
            }}>
              üí¨ –ß–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º
            </h2>
            <p style={{
              margin: 0,
              color: '#64748b',
              fontSize: '16px',
              fontWeight: '500'
            }}>
              {hasExistingChat ? '–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' : '–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º'}
            </p>
          </div>
          {isConnected && (
            <div style={{
              display: 'flex',
              alignItems: 'center',
              gap: '10px',
              fontSize: '14px',
              color: '#059669',
              backgroundColor: '#dcfce7',
              padding: '8px 16px',
              borderRadius: '20px',
              fontWeight: '600'
            }}>
              <div style={{
                width: '10px',
                height: '10px',
                borderRadius: '50%',
                backgroundColor: '#059669',
                animation: 'pulse 2s infinite'
              }} />
              –ü–æ–¥–∫–ª—é—á–µ–Ω
            </div>
          )}
        </div>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div style={{
        height: hasExistingChat ? (window.innerWidth >= 768 ? '450px' : '350px') : (window.innerWidth >= 768 ? '250px' : '200px'),
        overflowY: 'auto',
        padding: window.innerWidth >= 768 ? '24px' : '16px',
        backgroundColor: '#fafafa'
      }}>
        {loading ? (
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'center',
            alignItems: 'center',
            height: '100%',
            color: '#64748b'
          }}>
            <div style={{
              width: '32px',
              height: '32px',
              border: '3px solid #e2e8f0',
              borderTop: '3px solid #2563eb',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite',
              marginBottom: '16px'
            }} />
            <span style={{ fontSize: '16px', fontWeight: '500' }}>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞...</span>
          </div>
        ) : messages.length === 0 ? (
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%',
            textAlign: 'center',
            color: '#64748b'
          }}>
            <div style={{
              fontSize: '64px',
              marginBottom: '20px',
              opacity: 0.7
            }}>üí¨</div>
            <h3 style={{
              margin: '0 0 12px 0',
              fontSize: '18px',
              fontWeight: '600',
              color: '#374151'
            }}>
              {hasExistingChat ? '–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç' : '–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º'}
            </h3>
            <p style={{
              margin: 0,
              fontSize: '14px',
              lineHeight: '1.5',
              maxWidth: '280px'
            }}>
              –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ, —É—Å–ª–æ–≤–∏—è—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ —Ü–µ–Ω–µ
            </p>
          </div>
        ) : (
          <>
            {messages.map((message) => {
              const isOwnMessage = message.buyer_id === buyerId;
              return (
                <div
                  key={message.id}
                  style={{
                    display: 'flex',
                    justifyContent: isOwnMessage ? 'flex-end' : 'flex-start',
                    marginBottom: '20px'
                  }}
                >
                  <div style={{
                    maxWidth: window.innerWidth >= 768 ? '75%' : '85%',
                    padding: '14px 18px',
                    borderRadius: isOwnMessage ? '20px 20px 4px 20px' : '20px 20px 20px 4px',
                    backgroundColor: isOwnMessage ? '#2563eb' : 'white',
                    color: isOwnMessage ? 'white' : '#374151',
                    fontSize: '16px',
                    lineHeight: '1.5',
                    boxShadow: isOwnMessage ? '0 4px 12px rgba(37, 99, 235, 0.3)' : '0 4px 12px rgba(0, 0, 0, 0.1)',
                    border: isOwnMessage ? 'none' : '1px solid #e2e8f0'
                  }}>
                    <div style={{ marginBottom: '6px' }}>{message.message}</div>
                    <div style={{
                      fontSize: '12px',
                      opacity: 0.8,
                      textAlign: 'right'
                    }}>
                      {new Date(message.created_at).toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                      })}
                    </div>
                  </div>
                </div>
              );
            })}
            <div ref={messagesEndRef} />
          </>
        )}
      </div>

      {/* –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è */}
      <div style={{
        padding: window.innerWidth >= 768 ? '24px' : '16px',
        borderTop: '1px solid #e2e8f0',
        background: 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)'
      }}>
        <form onSubmit={handleSendMessage}>
          <div style={{
            display: 'flex',
            gap: window.innerWidth >= 768 ? '16px' : '12px',
            alignItems: 'flex-end',
            flexDirection: window.innerWidth >= 640 ? 'row' : 'column'
          }}>
            <div style={{
              flex: 1,
              width: window.innerWidth >= 640 ? 'auto' : '100%'
            }}>
              <textarea
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                placeholder={hasExistingChat ? "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." : `–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–∏–º —Ç–æ–≤–∞—Ä–æ–º "${product?.title || product?.neme || '—Ç–æ–≤–∞—Ä'}"`}
                rows={window.innerWidth >= 768 ? 3 : 2}
                style={{
                  width: '100%',
                  padding: '16px 20px',
                  border: '2px solid #e2e8f0',
                  borderRadius: '16px',
                  fontSize: '16px',
                  outline: 'none',
                  transition: 'all 0.3s ease',
                  resize: 'none',
                  fontFamily: 'inherit',
                  backgroundColor: 'white',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.05)'
                }}
                onFocus={(e) => {
                  e.target.style.borderColor = '#2563eb';
                  e.target.style.boxShadow = '0 4px 16px rgba(37, 99, 235, 0.2)';
                }}
                onBlur={(e) => {
                  e.target.style.borderColor = '#e2e8f0';
                  e.target.style.boxShadow = '0 2px 8px rgba(0,0,0,0.05)';
                }}
                disabled={sending}
              />
            </div>
            <button
              type="submit"
              disabled={!newMessage.trim() || sending}
              style={{
                padding: window.innerWidth >= 768 ? '16px 24px' : '14px 20px',
                backgroundColor: '#2563eb',
                color: 'white',
                border: 'none',
                borderRadius: '16px',
                fontSize: '16px',
                fontWeight: '700',
                cursor: (!newMessage.trim() || sending) ? 'not-allowed' : 'pointer',
                opacity: (!newMessage.trim() || sending) ? 0.5 : 1,
                transition: 'all 0.3s ease',
                whiteSpace: 'nowrap',
                boxShadow: '0 4px 16px rgba(37, 99, 235, 0.3)',
                transform: 'translateY(0)',
                width: window.innerWidth >= 640 ? 'auto' : '100%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: '8px'
              }}
              onMouseEnter={(e) => {
                if (newMessage.trim() && !sending) {
                  e.target.style.backgroundColor = '#1d4ed8';
                  e.target.style.transform = 'translateY(-2px)';
                  e.target.style.boxShadow = '0 8px 24px rgba(37, 99, 235, 0.4)';
                }
              }}
              onMouseLeave={(e) => {
                if (newMessage.trim() && !sending) {
                  e.target.style.backgroundColor = '#2563eb';
                  e.target.style.transform = 'translateY(0)';
                  e.target.style.boxShadow = '0 4px 16px rgba(37, 99, 235, 0.3)';
                }
              }}
            >
              {sending ? (
                <>
                  <div style={{
                    width: '16px',
                    height: '16px',
                    border: '2px solid rgba(255,255,255,0.3)',
                    borderTop: '2px solid white',
                    borderRadius: '50%',
                    animation: 'spin 1s linear infinite'
                  }} />
                  <span>–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                </>
              ) : (
                <>
                  <span>üì§</span>
                  <span>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                </>
              )}
            </button>
          </div>
        </form>
      </div>

      {/* –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏ */}
      <style jsx>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        @keyframes pulse {
          0%, 100% { opacity: 1; }
          50% { opacity: 0.5; }
        }
      `}</style>
    </div>
  );
};

export default ProductChat;
