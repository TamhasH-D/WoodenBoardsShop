/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 * –ü–æ–º–æ–≥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API
 */

import { apiService } from '../services/api';

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
 */
export const testProductSearchAPI = async () => {
  console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
  
  const testResults = {
    basicSearch: false,
    sortingTest: false,
    filteringTest: false,
    paginationTest: false,
    errorHandling: false
  };

  try {
    // –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
    console.log('\nüìã –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫');
    const basicResult = await apiService.searchProducts({
      search_query: '–¥—Ä–µ–≤–µ—Å–∏–Ω–∞'
    }, 0, 10);
    
    if (basicResult && typeof basicResult.total === 'number') {
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${basicResult.total}`);
      testResults.basicSearch = true;
    } else {
      console.log('‚ùå –ë–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –¢–µ—Å—Ç 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    console.log('\nüìã –¢–µ—Å—Ç 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞');
    const sortTests = [
      { sort_by: 'created_at', sort_order: 'desc' },
      { sort_by: 'price', sort_order: 'asc' },
      { sort_by: 'volume', sort_order: 'desc' },
      { sort_by: 'title', sort_order: 'asc' }
    ];

    let sortingWorking = true;
    for (const sortTest of sortTests) {
      try {
        const sortResult = await apiService.searchProducts(sortTest, 0, 5);
        console.log(`‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ${sortTest.sort_by} ${sortTest.sort_order}: OK`);
      } catch (error) {
        console.log(`‚ùå –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ ${sortTest.sort_by} ${sortTest.sort_order}: –û–®–ò–ë–ö–ê`);
        sortingWorking = false;
      }
    }
    testResults.sortingTest = sortingWorking;

    // –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    console.log('\nüìã –¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è');
    const filterResult = await apiService.searchProducts({
      price_min: 100,
      price_max: 1000,
      volume_min: 0.5,
      delivery_possible: true
    }, 0, 10);
    
    if (filterResult && typeof filterResult.total === 'number') {
      console.log('‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: ${filterResult.total}`);
      testResults.filteringTest = true;
    } else {
      console.log('‚ùå –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –¢–µ—Å—Ç 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü–∞–≥–∏–Ω–∞—Ü–∏—è');
    const page1 = await apiService.searchProducts({}, 0, 5);
    const page2 = await apiService.searchProducts({}, 1, 5);
    
    if (page1 && page2 && page1.data && page2.data) {
      console.log('‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${page1.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${page2.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      testResults.paginationTest = true;
    } else {
      console.log('‚ùå –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    console.log('\nüìã –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      await apiService.searchProducts({
        sort_by: 'invalid_field',
        sort_order: 'invalid_order'
      }, 0, 5);
      console.log('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)');
    } catch (error) {
      console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      testResults.errorHandling = true;
    }

  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('=' * 40);
  Object.entries(testResults).forEach(([test, passed]) => {
    const status = passed ? '‚úÖ' : '‚ùå';
    const testName = test.replace(/([A-Z])/g, ' $1').toLowerCase();
    console.log(`${status} ${testName}: ${passed ? '–ü–†–û–®–ï–õ' : '–ù–ï –ü–†–û–®–ï–õ'}`);
  });

  const passedTests = Object.values(testResults).filter(Boolean).length;
  const totalTests = Object.keys(testResults).length;
  console.log(`\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);

  return testResults;
};

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API
 */
export const testAPIPerformance = async () => {
  console.log('\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...');
  
  const performanceTests = [
    { name: '–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫', filters: { search_query: '—Å–æ—Å–Ω–∞' } },
    { name: '–°–ª–æ–∂–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã', filters: { 
      search_query: '–¥—Ä–µ–≤–µ—Å–∏–Ω–∞',
      price_min: 100,
      price_max: 1000,
      volume_min: 0.5,
      delivery_possible: true
    }},
    { name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞', filters: { sort_by: 'price', sort_order: 'desc' } }
  ];

  for (const test of performanceTests) {
    const startTime = performance.now();
    
    try {
      await apiService.searchProducts(test.filters, 0, 20);
      const endTime = performance.now();
      const duration = (endTime - startTime).toFixed(2);
      
      console.log(`‚úÖ ${test.name}: ${duration}ms`);
    } catch (error) {
      console.log(`‚ùå ${test.name}: –û–®–ò–ë–ö–ê`);
    }
  }
};

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞ API
 */
export const validateAPIResponse = (response) => {
  const errors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  if (!response) {
    errors.push('–û—Ç–≤–µ—Ç API –ø—É—Å—Ç–æ–π');
    return errors;
  }

  if (!Array.isArray(response.data)) {
    errors.push('response.data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }

  if (!response.pagination || typeof response.pagination.total !== 'number') {
    errors.push('response.pagination.total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–æ–≤
  if (response.data && response.data.length > 0) {
    const product = response.data[0];
    const requiredFields = [
      'id', 'title', 'price', 'volume', 
      'seller_id', 'wood_type_id', 'created_at'
    ];

    requiredFields.forEach(field => {
      if (!(field in product)) {
        errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    if (typeof product.price !== 'number') {
      errors.push('price –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
    if (typeof product.volume !== 'number') {
      errors.push('volume –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
    }
  }

  return errors;
};

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API
 */
export const demonstrateAPIFixes = async () => {
  console.log('\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
  
  try {
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    console.log('\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:');
    const sortedByPrice = await apiService.searchProducts({
      sort_by: 'price',
      sort_order: 'asc'
    }, 0, 5);
    
    if (sortedByPrice.data && sortedByPrice.data.length > 1) {
      console.log('‚úÖ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ü–µ–Ω–µ (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é):');
      sortedByPrice.data.forEach((product, index) => {
        console.log(`  ${index + 1}. ${product.title}: ${product.price}‚ÇΩ`);
      });
    }

    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    console.log('\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:');
    const filtered = await apiService.searchProducts({
      price_min: 500,
      price_max: 2000,
      delivery_possible: true
    }, 0, 3);
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π (500-2000‚ÇΩ): ${filtered.total}`);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    console.log('\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:');
    const page1 = await apiService.searchProducts({}, 0, 3);
    const page2 = await apiService.searchProducts({}, 1, 3);
    
    console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: ${page1.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: ${page2.data.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${page1.total}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
  }
};

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
export const runAllTests = async () => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
  
  await testProductSearchAPI();
  await testAPIPerformance();
  await demonstrateAPIFixes();
  
  console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
  window.apiTestUtils = {
    testProductSearchAPI,
    testAPIPerformance,
    validateAPIResponse,
    demonstrateAPIFixes,
    runAllTests
  };
}
