import React, { createContext, useContext, useReducer, useCallback } from 'react';

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è buyer frontend
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –∞–ª–µ—Ä—Ç–∞–º–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 */

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState = {
  notifications: []
};

// –¢–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
const actionTypes = {
  ADD_NOTIFICATION: 'ADD_NOTIFICATION',
  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',
  CLEAR_ALL: 'CLEAR_ALL'
};

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export const notificationTypes = {
  SUCCESS: 'success',
  ERROR: 'error',
  WARNING: 'warning',
  INFO: 'info'
};

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID
let notificationId = 0;
const generateId = () => ++notificationId;

// –†–µ–¥—å—é—Å–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function notificationReducer(state, action) {
  switch (action.type) {
    case actionTypes.ADD_NOTIFICATION:
      return {
        ...state,
        notifications: [...state.notifications, action.payload]
      };
      
    case actionTypes.REMOVE_NOTIFICATION:
      return {
        ...state,
        notifications: state.notifications.filter(
          notification => notification.id !== action.payload
        )
      };
      
    case actionTypes.CLEAR_ALL:
      return {
        ...state,
        notifications: []
      };
      
    default:
      return state;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const NotificationContext = createContext();

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const NotificationProvider = ({ children }) => {
  const [state, dispatch] = useReducer(notificationReducer, initialState);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const addNotification = useCallback((notification) => {
    const id = generateId();
    const newNotification = {
      id,
      type: notificationTypes.INFO,
      duration: 5000,
      ...notification,
      timestamp: Date.now()
    };

    dispatch({
      type: actionTypes.ADD_NOTIFICATION,
      payload: newNotification
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    if (newNotification.duration > 0) {
      setTimeout(() => {
        removeNotification(id);
      }, newNotification.duration);
    }

    return id;
  }, []);

  // –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const removeNotification = useCallback((id) => {
    dispatch({
      type: actionTypes.REMOVE_NOTIFICATION,
      payload: id
    });
  }, []);

  // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const clearAll = useCallback(() => {
    dispatch({ type: actionTypes.CLEAR_ALL });
  }, []);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showSuccess = useCallback((message, options = {}) => {
    return addNotification({
      type: notificationTypes.SUCCESS,
      title: '–£—Å–ø–µ—à–Ω–æ',
      message,
      ...options
    });
  }, [addNotification]);

  const showError = useCallback((message, options = {}) => {
    return addNotification({
      type: notificationTypes.ERROR,
      title: '–û—à–∏–±–∫–∞',
      message,
      duration: 7000, // –û—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ
      ...options
    });
  }, [addNotification]);

  const showWarning = useCallback((message, options = {}) => {
    return addNotification({
      type: notificationTypes.WARNING,
      title: '–í–Ω–∏–º–∞–Ω–∏–µ',
      message,
      ...options
    });
  }, [addNotification]);

  const showInfo = useCallback((message, options = {}) => {
    return addNotification({
      type: notificationTypes.INFO,
      title: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
      message,
      ...options
    });
  }, [addNotification]);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
  const showCartSuccess = useCallback((productName) => {
    return showSuccess(`–¢–æ–≤–∞—Ä "${productName}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`, {
      icon: 'üõí'
    });
  }, [showSuccess]);

  const showOrderSuccess = useCallback((orderId) => {
    return showSuccess(`–ó–∞–∫–∞–∑ #${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω`, {
      icon: 'üì¶',
      duration: 8000
    });
  }, [showSuccess]);

  const showPaymentSuccess = useCallback(() => {
    return showSuccess('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', {
      icon: 'üí≥',
      duration: 6000
    });
  }, [showSuccess]);

  const showConnectionError = useCallback(() => {
    return showError('–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É', {
      icon: 'üåê',
      duration: 10000
    });
  }, [showError]);

  // –ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value = {
    notifications: state.notifications,
    addNotification,
    removeNotification,
    clearAll,
    showSuccess,
    showError,
    showWarning,
    showInfo,
    showCartSuccess,
    showOrderSuccess,
    showPaymentSuccess,
    showConnectionError
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useNotifications = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotifications must be used within a NotificationProvider');
  }
  return context;
};

export default NotificationContext;
