#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ created_at –≤ –º–æ–¥–µ–ª—è—Ö
"""

import asyncio
import json
import time
from datetime import datetime, timezone
import aiohttp

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TEST_API_URL = "http://localhost:8001"  # –¢–µ—Å—Ç–æ–≤—ã–π backend
ENDPOINTS = {
    "wood_type_price": "/api/v1/wood-type-prices",
    "wood_type": "/api/v1/wood-types",
    "seller": "/api/v1/sellers",
    "buyer": "/api/v1/buyers",
    "product": "/api/v1/products",
    "chat_thread": "/api/v1/chat-threads",
    "chat_message": "/api/v1/chat-messages"
}

def generate_uuid():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è UUID v4"""
    import uuid
    return str(uuid.uuid4())

async def test_datetime_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ created_at...")
    
    async with aiohttp.ClientSession() as session:
        results = []
        
        # –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
        print("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")
        wood_type_data = {
            "id": generate_uuid(),
            "neme": f"–¢–µ—Å—Ç–æ–≤–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞ {int(time.time())}",
            "description": "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        }
        
        start_time = datetime.now(timezone.utc)
        
        try:
            async with session.post(f"{TEST_API_URL}{ENDPOINTS['wood_type']}", 
                                  json=wood_type_data) as response:
                if response.status == 201:
                    data = await response.json()
                    wood_type_id = data["data"]["id"]
                    print(f"  ‚úÖ –¢–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å–æ–∑–¥–∞–Ω: {wood_type_id}")
                    
                    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º)
                    print("\nüìù –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É")
                    prices = []
                    
                    for i in range(3):
                        price_data = {
                            "id": generate_uuid(),
                            "price_per_m3": 1000.0 + i * 100,
                            "wood_type_id": wood_type_id
                        }
                        
                        creation_time = datetime.now(timezone.utc)
                        
                        async with session.post(f"{TEST_API_URL}{ENDPOINTS['wood_type_price']}", 
                                              json=price_data) as price_response:
                            if price_response.status == 201:
                                price_result = await price_response.json()
                                created_at_str = price_result["data"]["created_at"]
                                created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                                
                                prices.append({
                                    "id": price_result["data"]["id"],
                                    "price": price_result["data"]["price_per_m3"],
                                    "created_at": created_at,
                                    "creation_time": creation_time
                                })
                                
                                print(f"  ‚úÖ –¶–µ–Ω–∞ {i+1}: {price_result['data']['price_per_m3']} ‚ÇΩ/–º¬≥")
                                print(f"     –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
                                print(f"     –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:  {creation_time}")
                                
                                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–∏–∑–∫–æ –∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞
                                time_diff = abs((created_at - creation_time).total_seconds())
                                if time_diff < 5:  # –†–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
                                    print(f"     ‚úÖ –í—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ä–∞–∑–Ω–∏—Ü–∞: {time_diff:.2f}—Å)")
                                else:
                                    print(f"     ‚ùå –í—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ (—Ä–∞–∑–Ω–∏—Ü–∞: {time_diff:.2f}—Å)")
                                
                                results.append({
                                    "test": f"wood_type_price_{i+1}",
                                    "success": time_diff < 5,
                                    "time_diff": time_diff,
                                    "created_at": created_at_str
                                })
                            else:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã {i+1}: {price_response.status}")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ü–µ–Ω
                        await asyncio.sleep(1)
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print("\nüìä –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω:")
                    if len(prices) >= 2:
                        for i in range(1, len(prices)):
                            prev_time = prices[i-1]["created_at"]
                            curr_time = prices[i]["created_at"]
                            diff = (curr_time - prev_time).total_seconds()
                            print(f"  –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–µ–Ω–æ–π {i} –∏ {i+1}: {diff:.2f}—Å")
                            
                            if diff > 0.5:  # –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                                print(f"    ‚úÖ –í—Ä–µ–º—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                            else:
                                print(f"    ‚ö†Ô∏è –ú–∞–ª–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏")
                    
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã: {response.status}")
                    
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        print("\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞")
        seller_data = {
            "id": generate_uuid(),
            "keycloak_uuid": generate_uuid(),
            "is_online": True
        }
        
        seller_creation_time = datetime.now(timezone.utc)
        
        try:
            async with session.post(f"{TEST_API_URL}{ENDPOINTS['seller']}", 
                                  json=seller_data) as response:
                if response.status == 201:
                    data = await response.json()
                    created_at_str = data["data"]["created_at"]
                    created_at = datetime.fromisoformat(created_at_str.replace('Z', '+00:00'))
                    
                    time_diff = abs((created_at - seller_creation_time).total_seconds())
                    print(f"  ‚úÖ –ü—Ä–æ–¥–∞–≤–µ—Ü —Å–æ–∑–¥–∞–Ω: {data['data']['id']}")
                    print(f"     –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}")
                    print(f"     –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:  {seller_creation_time}")
                    print(f"     –†–∞–∑–Ω–∏—Ü–∞: {time_diff:.2f}—Å")
                    
                    results.append({
                        "test": "seller_creation",
                        "success": time_diff < 5,
                        "time_diff": time_diff,
                        "created_at": created_at_str
                    })
                else:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {response.status}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        successful_tests = sum(1 for r in results if r["success"])
        total_tests = len(results)
        
        print(f"–£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests}")
        
        if successful_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –í—Ä–µ–º—è created_at —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for result in results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"  {status} {result['test']}: {result['time_diff']:.2f}—Å")
        
        return results

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ created_at –≤ –º–æ–¥–µ–ª—è—Ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{TEST_API_URL}/health") as response:
                if response.status == 200:
                    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π API –¥–æ—Å—Ç—É–ø–µ–Ω: {TEST_API_URL}")
                else:
                    print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status}")
                    return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    results = await test_datetime_creation()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    with open("datetime_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ datetime_test_results.json")

if __name__ == "__main__":
    asyncio.run(main())
