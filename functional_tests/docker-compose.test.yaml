services:
  # –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  test-postgres:
    image: postgres:16-alpine
    container_name: test-postgres
    environment:
      POSTGRES_DB: test_diplom
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_diplom"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  # –¢–µ—Å—Ç–æ–≤—ã–π Redis
  test-redis:
    image: redis:7-alpine
    container_name: test-redis
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - test_network

  # –¢–µ—Å—Ç–æ–≤—ã–π backend
  test-backend:
    build:
      context: ../backend/backend
      dockerfile: Dockerfile
    container_name: test-backend
    environment:
      # Database settings (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏–∑ settings.py)
      BACKEND_PG_HOST: test-postgres
      BACKEND_PG_PORT: 5432
      BACKEND_PG_USER: test_user
      BACKEND_PG_PASSWORD: test_password
      BACKEND_PG_DATABASE: test_diplom
      # Redis settings
      BACKEND_REDIS_HOST: test-redis
      BACKEND_REDIS_PORT: 6379
      # Server settings
      BACKEND_PORT: 8000
      BACKEND_HOST: "0.0.0.0"
      BACKEND_LOG_LEVEL: "info"
      # CORS settings
      BACKEND_CORS_ALLOW_ORIGINS: "*"
      BACKEND_CORS_ALLOW_CREDENTIALS: "True"
      BACKEND_CORS_ALLOW_METHODS: "*"
      BACKEND_CORS_ALLOW_HEADERS: "*"
    ports:
      - "8001:8000"
    depends_on:
      test-postgres:
        condition: service_healthy
      test-redis:
        condition: service_healthy
    command: >
      bash -c "
        echo 'üîÑ Running test database migrations...' &&
        python -m alembic upgrade head &&
        echo '‚úÖ Test migrations completed successfully' &&
        echo 'üöÄ Starting test FastAPI application...' &&
        python -m backend
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - test_network

  # Selenium Grid Hub
  selenium-hub:
    image: selenium/hub:4.25.0
    container_name: selenium-hub
    ports:
      - "4444:4444"
    environment:
      GRID_MAX_SESSION: 16
      GRID_BROWSER_TIMEOUT: 300
      GRID_TIMEOUT: 300
      SE_EVENT_BUS_HOST: selenium-hub
      SE_EVENT_BUS_PUBLISH_PORT: 4442
      SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
      SE_SESSION_MAP_HOST: selenium-hub
      SE_SESSION_MAP_PORT: 5556
      SE_ENABLE_TRACING: false
      SE_ENABLE_OBSERVABILITY: false
      JAVA_OPTS: "-Dselenium.LOGGER.level=WARNING"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    networks:
      - test_network

  # Chrome Node
  selenium-chrome:
    image: selenium/node-chrome:4.25.0
    container_name: selenium-chrome
    depends_on:
      selenium-hub:
        condition: service_healthy
    environment:
      SE_EVENT_BUS_HOST: selenium-hub
      SE_EVENT_BUS_PUBLISH_PORT: 4442
      SE_EVENT_BUS_SUBSCRIBE_PORT: 4443
      SE_SESSION_MAP_HOST: selenium-hub
      SE_SESSION_MAP_PORT: 5556
      NODE_MAX_INSTANCES: 2
      NODE_MAX_SESSION: 2
      SE_NODE_MAX_SESSIONS: 2
      SE_NODE_OVERRIDE_MAX_SESSIONS: true
      SE_ENABLE_TRACING: false
      SE_ENABLE_OBSERVABILITY: false
      JAVA_OPTS: "-Dselenium.LOGGER.level=WARNING"
    volumes:
      - /dev/shm:/dev/shm
    shm_size: 2gb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/status"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - test_network

  # –¢–µ—Å—Ç–æ–≤—ã–π runner
  functional-tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: functional-tests
    environment:
      BACKEND_URL: http://test-backend:8000
      SELENIUM_HUB_URL: http://selenium-hub:4444
      FRONTEND_ADMIN_URL: http://admin-frontend
      FRONTEND_SELLER_URL: http://seller-frontend
      FRONTEND_BUYER_URL: http://buyer-frontend
      TEST_TYPE: ${TEST_TYPE:-all}
      PYTHONPATH: /app
      # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
      LOG_LEVEL: INFO
      PYTEST_CURRENT_TEST: ""
    volumes:
      - ./reports:/app/reports
      - ./screenshots:/app/screenshots
      - ./logs:/app/logs
    depends_on:
      test-backend:
        condition: service_healthy
      selenium-hub:
        condition: service_healthy
      selenium-chrome:
        condition: service_healthy
    networks:
      - test_network
      - diplom_default

  # Frontend —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  admin-frontend:
    build:
      context: ../frontend/admin
      dockerfile: Dockerfile
    container_name: test-admin-frontend
    ports:
      - "8080:80"
    environment:
      REACT_APP_API_URL: http://test-backend:8000
    networks:
      - test_network
      - diplom_default

  seller-frontend:
    build:
      context: ../frontend/seller
      dockerfile: Dockerfile
    container_name: test-seller-frontend
    ports:
      - "8081:80"
    environment:
      REACT_APP_API_URL: http://test-backend:8000
    networks:
      - test_network
      - diplom_default

  buyer-frontend:
    build:
      context: ../frontend/buyer
      dockerfile: Dockerfile
    container_name: test-buyer-frontend
    ports:
      - "8082:80"
    environment:
      REACT_APP_API_URL: http://test-backend:8000
    networks:
      - test_network
      - diplom_default

volumes:
  test_postgres_data:

networks:
  test_network:
    driver: bridge
  diplom_default:
    name: diplom_default
    external: true
