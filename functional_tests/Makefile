# Makefile –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

.PHONY: help build up down test test-api test-browser test-integration clean logs shell

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = docker-compose.test.yaml
PROJECT_NAME = diplom-functional-tests

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã - Diplom Project$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üèóÔ∏è  –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) build

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up -d

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=all docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîå –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-browser: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=browser docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=integration docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
	@echo "$(YELLOW)üíª –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest -v --html=reports/local_tests_report.html --self-contained-html

test-api-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üîå –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest api_tests/ -v --html=reports/api_tests_local_report.html --self-contained-html

test-browser-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest browser_tests/ -v --html=reports/browser_tests_local_report.html --self-contained-html

test-integration-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest integration_tests/ -v --html=reports/integration_tests_local_report.html --self-contained-html

clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç—á–µ—Ç—ã
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down -v --remove-orphans
	docker system prune -f
	@echo "$(YELLOW)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤...$(NC)"
	rm -rf reports/* screenshots/*
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs functional-tests

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs test-backend

logs-selenium: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Selenium Hub
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ Selenium Hub:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs selenium-hub

logs-all: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏
	@echo "$(YELLOW)üìã –í—Å–µ –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs

shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec functional-tests bash

shell-backend: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É backend
	@echo "$(YELLOW)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É backend...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec test-backend bash

db-shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(YELLOW)üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec test-postgres psql -U test_user -d test_diplom

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@python utils/wait_for_services.py || echo "$(RED)‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã$(NC)"

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

reports: ## –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
	@echo "$(YELLOW)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–æ–≤...$(NC)"
	@if [ -f "reports/all_tests_report.html" ]; then \
		echo "$(GREEN)–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞...$(NC)"; \
		python -c "import webbrowser; webbrowser.open('reports/all_tests_report.html')"; \
	elif [ -f "reports/api_tests_report.html" ]; then \
		echo "$(GREEN)–û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ API —Ç–µ—Å—Ç–æ–≤...$(NC)"; \
		python -c "import webbrowser; webbrowser.open('reports/api_tests_report.html')"; \
	else \
		echo "$(RED)‚ùå –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.$(NC)"; \
	fi

coverage: ## –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
	@echo "$(YELLOW)üìà –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...$(NC)"
	@if [ -f "reports/coverage/index.html" ]; then \
		python -c "import webbrowser; webbrowser.open('reports/coverage/index.html')"; \
	else \
		echo "$(RED)‚ùå –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º.$(NC)"; \
	fi

watch: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(YELLOW)üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs -f functional-tests

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
ci-test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
	@echo "$(YELLOW)ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ CI...$(NC)"
	TEST_TYPE=all docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit --exit-code-from functional-tests

ci-cleanup: ## –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ CI —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ CI –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down -v --remove-orphans || true
	docker system prune -f || true

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@$(MAKE) install
	mkdir -p reports screenshots
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"

dev-test: ## –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ API)
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	pytest api_tests/test_health_api.py -v

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug-selenium: ## –ó–∞–ø—É—Å–∫ Selenium –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ Selenium –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	docker run --rm -p 4444:4444 -p 7900:7900 --shm-size=2g selenium/standalone-chrome:4.15.0

debug-backend: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up test-backend test-postgres test-redis

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∞—Ö
	@echo "$(GREEN)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö$(NC)"
	@echo ""
	@echo "$(YELLOW)–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@find . -name "test_*.py" -type f | head -10
	@echo ""
	@echo "$(YELLOW)–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:$(NC)"
	@ls -la reports/ 2>/dev/null | head -5 || echo "–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
	@echo ""
	@echo "$(YELLOW)–†–∞–∑–º–µ—Ä Docker –æ–±—Ä–∞–∑–æ–≤:$(NC)"
	@docker images | grep -E "(functional-tests|selenium|postgres)" | head -5

version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	@echo "$(GREEN)üîñ –í–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤$(NC)"
	@echo "Docker: $$(docker --version)"
	@echo "Docker Compose: $$(docker-compose --version)"
	@echo "Python: $$(python --version 2>&1)"
	@echo "Pytest: $$(pytest --version 2>&1 | head -1)"
