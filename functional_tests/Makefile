# Makefile –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

.PHONY: help build rebuild up down test test-rebuild test-api test-api-rebuild test-browser test-integration test-uuid test-uuid-rebuild test-uuid-validation test-uuid-integration selenium-diagnostics selenium-status selenium-fix selenium-fix-docker selenium-fix-local selenium-restart clean logs shell

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
COMPOSE_FILE = docker-compose.test.yaml
PROJECT_NAME = diplom-functional-tests

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
	@echo "$(GREEN)–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã - Diplom Project$(NC)"
	@echo ""
	@echo "$(YELLOW)–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)

build: ## –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üèóÔ∏è  –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) build

rebuild: ## –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) build --no-cache

up: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(YELLOW)üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up -d

down: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
	@echo "$(YELLOW)üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=all docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-rebuild: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) rebuild
	TEST_TYPE=all docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --abort-on-container-exit
	@$(MAKE) down

test-api: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîå –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-browser: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=browser docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=integration docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
	@echo "$(YELLOW)üíª –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest -v --html=reports/local_tests_report.html --self-contained-html

test-api-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üîå –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest api_tests/ -v --html=reports/api_tests_local_report.html --self-contained-html

test-api-buyer: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è buyer
	@echo "$(YELLOW)üë§ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è buyer...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/buyer/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-wood-type: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è wood_type
	@echo "$(YELLOW)üå≥ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è wood_type...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/wood_type/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-crud: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ CRUD API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üìù –ó–∞–ø—É—Å–∫ CRUD API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -m crud api_tests/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-validation: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)‚úÖ –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -m validation api_tests/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-seller: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è seller
	@echo "$(YELLOW)üè™ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è seller...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/seller/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-product: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è product
	@echo "$(YELLOW)üì¶ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è product...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/product/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-wooden-board: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è wooden_board
	@echo "$(YELLOW)ü™µ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è wooden_board...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/wooden_board/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-image: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è image
	@echo "$(YELLOW)üñºÔ∏è  –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è image...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/image/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-chat: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã –¥–ª—è chat
	@echo "$(YELLOW)üí¨ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ –¥–ª—è chat...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/chat/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-get-by-id: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã GET by ID
	@echo "$(YELLOW)üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GET by ID...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/test_get_by_id.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-patch: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã PATCH –æ–ø–µ—Ä–∞—Ü–∏–π
	@echo "$(YELLOW)‚úèÔ∏è  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ PATCH –æ–ø–µ—Ä–∞—Ü–∏–π...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/test_patch_operations.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-delete: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã DELETE –æ–ø–µ—Ä–∞—Ü–∏–π
	@echo "$(YELLOW)üóëÔ∏è  –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ DELETE –æ–ø–µ—Ä–∞—Ü–∏–π...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/test_delete_operations.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-wood-type-price: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã wood-type-price API
	@echo "$(YELLOW)üí∞ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ wood-type-price API...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/wood_type_price/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-calculate-volume: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞
	@echo "$(YELLOW)üìê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/wooden_board/test_calculate_volume.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-comprehensive: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/test_comprehensive_suite.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-smoke: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã API
	@echo "$(YELLOW)üí® –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤ API...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -m smoke api_tests/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-stress: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç—ã API
	@echo "$(YELLOW)‚ö° –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–≤ API...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -m stress api_tests/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ API —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -m integration api_tests/" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-api-workflow: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ workflow
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ–≥–æ workflow...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v api_tests/test_integration_workflow.py" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-browser-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest browser_tests/ -v --html=reports/browser_tests_local_report.html --self-contained-html

test-integration-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest integration_tests/ -v --html=reports/integration_tests_local_report.html --self-contained-html

test-uuid: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ UUID —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üÜî –ó–∞–ø—É—Å–∫ UUID —Ç–µ—Å—Ç–æ–≤...$(NC)"
	TEST_TYPE=api PYTEST_ARGS="-v -k uuid" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit
	@$(MAKE) down

test-uuid-local: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å UUID —Ç–µ—Å—Ç—ã –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(YELLOW)üÜî –ó–∞–ø—É—Å–∫ UUID —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	pytest -v -k uuid --html=reports/uuid_tests_local_report.html --self-contained-html

test-uuid-validation: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UUID
	@echo "$(YELLOW)‚úÖ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ UUID...$(NC)"
	pytest api_tests/test_uuid_validation.py -v --html=reports/uuid_validation_report.html --self-contained-html

test-uuid-integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ UUID —Ç–µ—Å—Ç—ã
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö UUID —Ç–µ—Å—Ç–æ–≤...$(NC)"
	pytest integration_tests/test_uuid_integration.py -v --html=reports/uuid_integration_report.html --self-contained-html

test-uuid-rebuild: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å UUID —Ç–µ—Å—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ UUID —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) rebuild
	TEST_TYPE=api PYTEST_ARGS="-v -k uuid" docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --abort-on-container-exit
	@$(MAKE) down

test-api-rebuild: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å API —Ç–µ—Å—Ç—ã —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) rebuild
	TEST_TYPE=api docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --abort-on-container-exit
	@$(MAKE) down

clean: ## –û—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã –∏ –æ—Ç—á–µ—Ç—ã
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down -v --remove-orphans
	docker system prune -f
	@echo "$(YELLOW)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤, —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤...$(NC)"
	rm -rf reports/* screenshots/* logs/*
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

clean-logs: ## –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	rm -rf logs/*
	@echo "$(GREEN)‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

clean-old-logs: ## –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
	@echo "$(YELLOW)üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (>30 –¥–Ω–µ–π)...$(NC)"
	find logs/ -name "test_results_*.log" -mtime +30 -delete 2>/dev/null || true
	find logs/ -name "test_results_*.json" -mtime +30 -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs functional-tests

logs-test: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@if [ -d "logs" ] && [ "$$(ls -A logs/)" ]; then \
		LATEST_LOG=$$(ls -t logs/test_results_*.log 2>/dev/null | head -1); \
		if [ -n "$$LATEST_LOG" ]; then \
			echo "$(GREEN)–§–∞–π–ª: $$LATEST_LOG$(NC)"; \
			cat "$$LATEST_LOG"; \
		else \
			echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

logs-tail: ## –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º –ª–æ–≥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(YELLOW)üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞...$(NC)"
	@if [ -d "logs" ] && [ "$$(ls -A logs/)" ]; then \
		LATEST_LOG=$$(ls -t logs/test_results_*.log 2>/dev/null | head -1); \
		if [ -n "$$LATEST_LOG" ]; then \
			echo "$(GREEN)–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: $$LATEST_LOG$(NC)"; \
			tail -f "$$LATEST_LOG"; \
		else \
			echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

logs-list: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥–æ–≤
	@echo "$(YELLOW)üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥–æ–≤:$(NC)"
	@if [ -d "logs" ] && [ "$$(ls -A logs/)" ]; then \
		ls -la logs/; \
		echo ""; \
		echo "$(YELLOW)–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:$(NC)"; \
		echo "–í—Å–µ–≥–æ –ª–æ–≥–æ–≤: $$(ls logs/test_results_*.log 2>/dev/null | wc -l)"; \
		echo "JSON –æ—Ç—á–µ—Ç–æ–≤: $$(ls logs/test_results_*.json 2>/dev/null | wc -l)"; \
	else \
		echo "$(RED)‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
	fi

logs-stats: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:$(NC)"
	@if [ -d "logs" ] && [ "$$(ls -A logs/)" ]; then \
		LATEST_JSON=$$(ls -t logs/test_results_*.json 2>/dev/null | head -1); \
		if [ -n "$$LATEST_JSON" ]; then \
			echo "$(GREEN)JSON –æ—Ç—á–µ—Ç: $$LATEST_JSON$(NC)"; \
			python3 -c "import json; data=json.load(open('$$LATEST_JSON')); stats=data['statistics']; print(f'–í—Å–µ–≥–æ: {stats[\"total\"]}, –ü—Ä–æ–π–¥–µ–Ω–æ: {stats[\"passed\"]}, –£–ø–∞–ª–æ: {stats[\"failed\"]}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats[\"skipped\"]}')"; \
		else \
			LATEST_LOG=$$(ls -t logs/test_results_*.log 2>/dev/null | head -1); \
			if [ -n "$$LATEST_LOG" ]; then \
				echo "$(GREEN)–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–∞: $$LATEST_LOG$(NC)"; \
				grep "–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" -A 10 "$$LATEST_LOG" | tail -8; \
			else \
				echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
			fi; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

logs-backend: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs test-backend

logs-selenium: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Selenium Hub
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ Selenium Hub:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs selenium-hub

logs-selenium-chrome: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Chrome Node
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ Chrome Node:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs selenium-chrome

selenium-diagnostics: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É Selenium Grid
	@echo "$(YELLOW)üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Selenium Grid...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec functional-tests python utils/selenium_diagnostics.py

selenium-status: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Selenium —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å Selenium —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	@echo "Hub –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:"
	@docker ps --filter "name=selenium-hub" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo "Chrome Node –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:"
	@docker ps --filter "name=selenium-chrome" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

selenium-fix: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Selenium
	@echo "$(YELLOW)üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium –ø—Ä–æ–±–ª–µ–º...$(NC)"
	python utils/selenium_fix.py

selenium-fix-docker: ## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium –≤–Ω—É—Ç—Ä–∏ Docker
	@echo "$(YELLOW)üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium —á–µ—Ä–µ–∑ Docker...$(NC)"
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		-v $(PWD):/workspace -w /workspace \
		--network host \
		python:3.12-slim bash -c "\
		apt-get update && apt-get install -y docker.io curl && \
		pip install requests && \
		python utils/selenium_fix.py"

selenium-restart: ## –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) restart selenium-hub selenium-chrome

selenium-fix-local: ## –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
	@echo "$(YELLOW)üîß –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium –ø—Ä–æ–±–ª–µ–º...$(NC)"
	./selenium_fix_local.sh

logs-all: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏
	@echo "$(YELLOW)üìã –í—Å–µ –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs

shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec functional-tests bash

shell-backend: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É backend
	@echo "$(YELLOW)üêö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É backend...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec test-backend bash

db-shell: ## –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	@echo "$(YELLOW)üóÑÔ∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) exec test-postgres psql -U test_user -d test_diplom

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) ps

health: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(YELLOW)üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@python utils/wait_for_services.py || echo "$(RED)‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã$(NC)"

install: ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
	@echo "$(YELLOW)üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...$(NC)"
	pip install -r requirements.txt
	@echo "$(GREEN)‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã$(NC)"

reports: ## –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
	@echo "$(YELLOW)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–æ–≤...$(NC)"
	@if [ -f "reports/all_tests_report.html" ]; then \
		echo "$(GREEN)–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞...$(NC)"; \
		python -c "import webbrowser; webbrowser.open('reports/all_tests_report.html')"; \
	elif [ -f "reports/api_tests_report.html" ]; then \
		echo "$(GREEN)–û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ API —Ç–µ—Å—Ç–æ–≤...$(NC)"; \
		python -c "import webbrowser; webbrowser.open('reports/api_tests_report.html')"; \
	else \
		echo "$(RED)‚ùå –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å–Ω–∞—á–∞–ª–∞.$(NC)"; \
	fi

coverage: ## –û—Ç–∫—Ä—ã—Ç—å –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
	@echo "$(YELLOW)üìà –û—Ç–∫—Ä—ã—Ç–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...$(NC)"
	@if [ -f "reports/coverage/index.html" ]; then \
		python -c "import webbrowser; webbrowser.open('reports/coverage/index.html')"; \
	else \
		echo "$(RED)‚ùå –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º.$(NC)"; \
	fi

watch: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(YELLOW)üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) logs -f functional-tests

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è CI/CD
ci-test: ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ CI –æ–∫—Ä—É–∂–µ–Ω–∏–∏
	@echo "$(YELLOW)ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ CI...$(NC)"
	TEST_TYPE=all docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up --build --abort-on-container-exit --exit-code-from functional-tests

ci-cleanup: ## –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ CI —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ CI –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) down -v --remove-orphans || true
	docker system prune -f || true

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
dev-setup: ## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	@$(MAKE) install
	mkdir -p reports screenshots
	@echo "$(GREEN)‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏$(NC)"

dev-test: ## –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ API)
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	pytest api_tests/test_health_api.py -v

dev-test-uuid: ## –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç UUID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç UUID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...$(NC)"
	pytest api_tests/test_buyer_api.py::TestBuyerAPI::test_create_buyer_success -v

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
debug-selenium: ## –ó–∞–ø—É—Å–∫ Selenium –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ Selenium –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	docker run --rm -p 4444:4444 -p 7900:7900 --shm-size=2g selenium/standalone-chrome:4.15.0

debug-backend: ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ backend...$(NC)"
	docker-compose -f $(COMPOSE_FILE) -p $(PROJECT_NAME) up test-backend test-postgres test-redis

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
info: ## –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∞—Ö
	@echo "$(GREEN)üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö$(NC)"
	@echo ""
	@echo "$(YELLOW)–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@find . -name "test_*.py" -type f | head -10
	@echo ""
	@echo "$(YELLOW)–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:$(NC)"
	@ls -la reports/ 2>/dev/null | head -5 || echo "–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
	@echo ""
	@echo "$(YELLOW)–†–∞–∑–º–µ—Ä Docker –æ–±—Ä–∞–∑–æ–≤:$(NC)"
	@docker images | grep -E "(functional-tests|selenium|postgres)" | head -5

version: ## –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	@echo "$(GREEN)üîñ –í–µ—Ä—Å–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤$(NC)"
	@echo "Docker: $$(docker --version)"
	@echo "Docker Compose: $$(docker-compose --version)"
	@echo "Python: $$(python --version 2>&1)"
	@echo "Pytest: $$(pytest --version 2>&1 | head -1)"
