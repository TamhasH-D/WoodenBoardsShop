#!/usr/bin/env python3
"""–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""

import asyncio
import time
from utils.test_logger import TestLogger, LogCapture, get_test_logger


def example_manual_logging():
    """–ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üîß –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
    logger = TestLogger("example")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ —Å–µ–∫—Ü–∏–∏
    logger.log_section_start("MANUAL LOGGING EXAMPLES")
    
    # –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    logger.log_test_start("example_successful_test")
    time.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    logger.log_test_result("example_successful_test", "PASSED", 0.5)
    
    # –ü—Ä–∏–º–µ—Ä —É–ø–∞–≤—à–µ–≥–æ —Ç–µ—Å—Ç–∞
    logger.log_test_start("example_failed_test")
    time.sleep(0.3)
    logger.log_test_result(
        "example_failed_test", 
        "FAILED", 
        0.3, 
        "AssertionError: –û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ 42, –ø–æ–ª—É—á–µ–Ω–æ 24"
    )
    
    # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    logger.log_test_result(
        "example_skipped_test", 
        "SKIPPED", 
        0.0, 
        "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    )
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
    section_stats = {"passed": 1, "failed": 1, "skipped": 1}
    logger.log_section_end("MANUAL LOGGING EXAMPLES", section_stats)
    
    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    logger.finalize_log()
    
    print(f"‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {logger.log_file}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {logger.get_stats()}")


def example_context_manager():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
    print("\nüéØ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LogCapture")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logger = get_test_logger()
    logger.log_section_start("CONTEXT MANAGER EXAMPLES")
    
    # –£—Å–ø–µ—à–Ω—ã–π —Ç–µ—Å—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    with LogCapture("context_successful_test"):
        print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        time.sleep(0.2)
        # –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ (–±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π)
    
    # –£–ø–∞–≤—à–∏–π —Ç–µ—Å—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    try:
        with LogCapture("context_failed_test"):
            print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–ø–∞–≤—à–µ–≥–æ —Ç–µ—Å—Ç–∞...")
            time.sleep(0.1)
            raise ValueError("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    except ValueError:
        pass  # –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ LogCapture
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
    section_stats = {"passed": 1, "failed": 1, "skipped": 0}
    logger.log_section_end("CONTEXT MANAGER EXAMPLES", section_stats)
    
    print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


async def example_async_logging():
    """–ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("\n‚ö° –ü—Ä–∏–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    logger = get_test_logger()
    logger.log_section_start("ASYNC LOGGING EXAMPLES")
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    async_tests = [
        ("async_api_test", 0.3, True),
        ("async_database_test", 0.5, True),
        ("async_integration_test", 0.8, False),
        ("async_performance_test", 1.2, True),
    ]
    
    for test_name, duration, should_pass in async_tests:
        logger.log_test_start(test_name)
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        await asyncio.sleep(duration)
        
        if should_pass:
            logger.log_test_result(test_name, "PASSED", duration)
        else:
            logger.log_test_result(
                test_name, 
                "FAILED", 
                duration, 
                "TimeoutError: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞"
            )
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
    section_stats = {"passed": 3, "failed": 1, "skipped": 0}
    logger.log_section_end("ASYNC LOGGING EXAMPLES", section_stats)
    
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫."""
    print("\nüö® –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    logger = get_test_logger()
    logger.log_section_start("ERROR HANDLING EXAMPLES")
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
    error_examples = [
        ("assertion_error_test", AssertionError("–û–∂–∏–¥–∞–ª–æ—Å—å True, –ø–æ–ª—É—á–µ–Ω–æ False")),
        ("value_error_test", ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: -1")),
        ("type_error_test", TypeError("–û–∂–∏–¥–∞–ª—Å—è str, –ø–æ–ª—É—á–µ–Ω int")),
        ("connection_error_test", ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")),
        ("timeout_error_test", TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (30s)")),
    ]
    
    for test_name, error in error_examples:
        logger.log_test_start(test_name)
        
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
            time.sleep(0.1)
            raise error
        except Exception as e:
            logger.log_test_result(test_name, "FAILED", 0.1, str(e))
    
    # –ü—Ä–∏–º–µ—Ä –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    long_error = "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: " + "–ê" * 300
    logger.log_test_start("long_error_test")
    logger.log_test_result("long_error_test", "FAILED", 0.05, long_error)
    
    # –ü—Ä–∏–º–µ—Ä —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
    cyrillic_error = "–û—à–∏–±–∫–∞ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª–µ '–Ω–∞–∑–≤–∞–Ω–∏–µ'"
    logger.log_test_start("cyrillic_error_test")
    logger.log_test_result("cyrillic_error_test", "FAILED", 0.02, cyrillic_error)
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
    section_stats = {"passed": 0, "failed": 7, "skipped": 0}
    logger.log_section_end("ERROR HANDLING EXAMPLES", section_stats)
    
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def example_performance_logging():
    """–ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("\n‚è±Ô∏è –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    logger = get_test_logger()
    logger.log_section_start("PERFORMANCE EXAMPLES")
    
    # –¢–µ—Å—Ç—ã —Å —Ä–∞–∑–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    performance_tests = [
        ("fast_test", 0.01),
        ("medium_test", 0.5),
        ("slow_test", 2.0),
        ("very_slow_test", 5.0),
    ]
    
    for test_name, target_duration in performance_tests:
        logger.log_test_start(test_name)
        
        start_time = time.time()
        time.sleep(target_duration)
        actual_duration = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if actual_duration <= target_duration * 1.1:  # 10% –¥–æ–ø—É—Å–∫
            logger.log_test_result(test_name, "PASSED", actual_duration)
        else:
            logger.log_test_result(
                test_name, 
                "FAILED", 
                actual_duration, 
                f"–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ: {actual_duration:.3f}s > {target_duration}s"
            )
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
    section_stats = {"passed": 4, "failed": 0, "skipped": 0}
    logger.log_section_end("PERFORMANCE EXAMPLES", section_stats)
    
    print(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("=" * 60)
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    example_manual_logging()
    example_context_manager()
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    asyncio.run(example_async_logging())
    
    # –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    example_error_handling()
    example_performance_logging()
    
    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    from utils.test_logger import finalize_test_logger
    finalize_test_logger()
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs/:")
    print("   - test_results_*.log - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏")
    print("   - test_results_*.json - JSON –æ—Ç—á–µ—Ç—ã")
    print("\nüîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python utils/log_analyzer.py --latest")
    print("   make logs-stats")


if __name__ == "__main__":
    main()
