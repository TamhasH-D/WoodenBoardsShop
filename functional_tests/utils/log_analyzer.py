#!/usr/bin/env python3
"""–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""

import os
import json
import glob
import argparse
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import re


class LogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."""
    
    def __init__(self, logs_dir: str = "logs"):
        self.logs_dir = Path(logs_dir)
        if not self.logs_dir.exists():
            raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {logs_dir}")
    
    def get_latest_log(self) -> Optional[Path]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞."""
        log_files = list(self.logs_dir.glob("test_results_*.log"))
        if not log_files:
            return None
        return max(log_files, key=lambda f: f.stat().st_mtime)
    
    def get_latest_json(self) -> Optional[Path]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON –æ—Ç—á–µ—Ç–∞."""
        json_files = list(self.logs_dir.glob("test_results_*.json"))
        if not json_files:
            return None
        return max(json_files, key=lambda f: f.stat().st_mtime)
    
    def parse_log_file(self, log_file: Path) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥ —Ñ–∞–π–ª–∞."""
        if not log_file.exists():
            raise FileNotFoundError(f"–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
        
        results = {
            "file_path": str(log_file),
            "file_size": log_file.stat().st_size,
            "modified_time": datetime.fromtimestamp(log_file.stat().st_mtime),
            "tests": [],
            "statistics": {"passed": 0, "failed": 0, "skipped": 0, "total": 0},
            "sections": [],
            "errors": [],
            "duration": None,
            "test_type": "unknown"
        }
        
        with open(log_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
        type_match = re.search(r'–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: (\w+)', content)
        if type_match:
            results["test_type"] = type_match.group(1).lower()
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫ —Ç–µ—Å—Ç–æ–≤
        test_pattern = r'\[([^\]]+)\] ([^|]+) \| (\w+) \| ([^|]+) \| (.+)'
        for match in re.finditer(test_pattern, content):
            timestamp_str, test_name, status, duration_str, error_msg = match.groups()
            
            try:
                timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                timestamp = None
            
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            duration = 0.0
            if duration_str.strip() != "-":
                duration_match = re.search(r'([\d.]+)s', duration_str)
                if duration_match:
                    duration = float(duration_match.group(1))
            
            test_info = {
                "timestamp": timestamp,
                "name": test_name.strip(),
                "status": status,
                "duration": duration,
                "error": error_msg.strip() if error_msg.strip() != "-" else None
            }
            
            results["tests"].append(test_info)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if status in results["statistics"]:
                results["statistics"][status.lower()] += 1
            results["statistics"]["total"] += 1
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        section_pattern = r'\[([^\]]+)\] ===== ([^=]+) ====='
        for match in re.finditer(section_pattern, content):
            timestamp_str, section_name = match.groups()
            try:
                timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                timestamp = None
            
            results["sections"].append({
                "timestamp": timestamp,
                "name": section_name.strip()
            })
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        duration_match = re.search(r'–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: (.+)', content)
        if duration_match:
            results["duration"] = duration_match.group(1).strip()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        failed_tests = [t for t in results["tests"] if t["status"] == "FAILED" and t["error"]]
        results["errors"] = failed_tests
        
        return results
    
    def load_json_report(self, json_file: Path) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ JSON –æ—Ç—á–µ—Ç–∞."""
        if not json_file.exists():
            raise FileNotFoundError(f"JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_file}")
        
        with open(json_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def get_summary_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥."""
        cutoff_date = datetime.now() - timedelta(days=days)
        
        summary = {
            "period_days": days,
            "total_runs": 0,
            "total_tests": 0,
            "total_passed": 0,
            "total_failed": 0,
            "total_skipped": 0,
            "test_types": {},
            "daily_stats": {},
            "most_failed_tests": {},
            "average_duration": 0.0
        }
        
        log_files = list(self.logs_dir.glob("test_results_*.log"))
        durations = []
        
        for log_file in log_files:
            file_time = datetime.fromtimestamp(log_file.stat().st_mtime)
            if file_time < cutoff_date:
                continue
            
            try:
                log_data = self.parse_log_file(log_file)
                summary["total_runs"] += 1
                
                stats = log_data["statistics"]
                summary["total_tests"] += stats["total"]
                summary["total_passed"] += stats["passed"]
                summary["total_failed"] += stats["failed"]
                summary["total_skipped"] += stats["skipped"]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–µ—Å—Ç–æ–≤
                test_type = log_data["test_type"]
                if test_type not in summary["test_types"]:
                    summary["test_types"][test_type] = {"runs": 0, "tests": 0, "passed": 0, "failed": 0}
                
                summary["test_types"][test_type]["runs"] += 1
                summary["test_types"][test_type]["tests"] += stats["total"]
                summary["test_types"][test_type]["passed"] += stats["passed"]
                summary["test_types"][test_type]["failed"] += stats["failed"]
                
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                date_key = file_time.strftime("%Y-%m-%d")
                if date_key not in summary["daily_stats"]:
                    summary["daily_stats"][date_key] = {"runs": 0, "tests": 0, "passed": 0, "failed": 0}
                
                summary["daily_stats"][date_key]["runs"] += 1
                summary["daily_stats"][date_key]["tests"] += stats["total"]
                summary["daily_stats"][date_key]["passed"] += stats["passed"]
                summary["daily_stats"][date_key]["failed"] += stats["failed"]
                
                # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–∞—Ö
                for test in log_data["errors"]:
                    test_name = test["name"]
                    if test_name not in summary["most_failed_tests"]:
                        summary["most_failed_tests"][test_name] = 0
                    summary["most_failed_tests"][test_name] += 1
                
                # –°–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if log_data.get("duration"):
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    duration_str = log_data["duration"]
                    if "—Å–µ–∫—É–Ω–¥" in duration_str:
                        try:
                            duration_val = float(duration_str.split()[0])
                            durations.append(duration_val)
                        except (ValueError, IndexError):
                            pass
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {log_file}: {e}")
                continue
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if durations:
            summary["average_duration"] = sum(durations) / len(durations)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–∞–¥–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
        summary["most_failed_tests"] = dict(
            sorted(summary["most_failed_tests"].items(), key=lambda x: x[1], reverse=True)
        )
        
        return summary
    
    def print_latest_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞."""
        json_file = self.get_latest_json()
        if json_file:
            data = self.load_json_report(json_file)
            self._print_json_stats(data)
        else:
            log_file = self.get_latest_log()
            if log_file:
                data = self.parse_log_file(log_file)
                self._print_log_stats(data)
            else:
                print("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def _print_json_stats(self, data: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ JSON –æ—Ç—á–µ—Ç–∞."""
        session = data["test_session"]
        stats = data["statistics"]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"{'='*50}")
        print(f"–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {session['test_type'].upper()}")
        print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {session['start_time']}")
        print(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {session['end_time']}")
        print(f"–õ–æ–≥ —Ñ–∞–π–ª: {session['log_file']}")
        print()
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['passed']}")
        print(f"  ‚ùå –£–ø–∞–ª–æ: {stats['failed']}")
        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        
        if stats['total'] > 0:
            success_rate = (stats['passed'] / stats['total']) * 100
            print(f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
        failed_tests = [t for t in data["test_results"] if t["status"] == "FAILED"]
        if failed_tests:
            print(f"\n‚ùå –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã ({len(failed_tests)}):")
            for test in failed_tests[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {test['name']}")
                if test.get('error'):
                    error_short = test['error'][:100] + "..." if len(test['error']) > 100 else test['error']
                    print(f"    {error_short}")
    
    def _print_log_stats(self, data: Dict[str, Any]):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞."""
        stats = data["statistics"]
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"{'='*50}")
        print(f"–¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {data['test_type'].upper()}")
        print(f"–§–∞–π–ª: {data['file_path']}")
        print(f"–†–∞–∑–º–µ—Ä: {data['file_size']} –±–∞–π—Ç")
        print(f"–ò–∑–º–µ–Ω–µ–Ω: {data['modified_time']}")
        print()
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {stats['total']}")
        print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {stats['passed']}")
        print(f"  ‚ùå –£–ø–∞–ª–æ: {stats['failed']}")
        print(f"  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats['skipped']}")
        
        if stats['total'] > 0:
            success_rate = (stats['passed'] / stats['total']) * 100
            print(f"  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if data['duration']:
            print(f"  ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
        if data['errors']:
            print(f"\n‚ùå –£–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã ({len(data['errors'])}):")
            for test in data['errors'][:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                print(f"  ‚Ä¢ {test['name']}")
                if test.get('error'):
                    error_short = test['error'][:100] + "..." if len(test['error']) > 100 else test['error']
                    print(f"    {error_short}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = argparse.ArgumentParser(description="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ª–æ–≥–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--logs-dir", default="logs", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏")
    parser.add_argument("--latest", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--summary", type=int, metavar="DAYS", help="–°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ N –¥–Ω–µ–π")
    parser.add_argument("--list", action="store_true", help="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ–≥–æ–≤")
    
    args = parser.parse_args()
    
    try:
        analyzer = LogAnalyzer(args.logs_dir)
        
        if args.latest:
            analyzer.print_latest_stats()
        elif args.summary:
            summary = analyzer.get_summary_stats(args.summary)
            print(f"üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {args.summary} –¥–Ω–µ–π")
            print(f"{'='*50}")
            print(f"–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: {summary['total_runs']}")
            print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
            print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {summary['total_passed']}")
            print(f"–£–ø–∞–ª–æ: {summary['total_failed']}")
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['total_skipped']}")
            
            if summary['total_tests'] > 0:
                success_rate = (summary['total_passed'] / summary['total_tests']) * 100
                print(f"–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            
            if summary['most_failed_tests']:
                print(f"\n‚ùå –ù–∞–∏–±–æ–ª–µ–µ –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã:")
                for test_name, count in list(summary['most_failed_tests'].items())[:5]:
                    print(f"  ‚Ä¢ {test_name}: {count} —Ä–∞–∑")
        elif args.list:
            log_files = list(analyzer.logs_dir.glob("test_results_*"))
            if log_files:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(log_files)} —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤:")
                for log_file in sorted(log_files, key=lambda f: f.stat().st_mtime, reverse=True):
                    size = log_file.stat().st_size
                    mtime = datetime.fromtimestamp(log_file.stat().st_mtime)
                    print(f"  {log_file.name} ({size} –±–∞–π—Ç, {mtime.strftime('%Y-%m-%d %H:%M:%S')})")
            else:
                print("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            analyzer.print_latest_stats()
    
    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()
