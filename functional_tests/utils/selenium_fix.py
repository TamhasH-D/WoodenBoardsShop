#!/usr/bin/env python3
"""–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å Selenium Grid."""

import os
import subprocess
import time
import requests
import sys
from typing import List, Dict, Any


class SeleniumFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º Selenium."""
    
    def __init__(self):
        self.compose_file = "docker-compose.test.yaml"
        self.project_name = "diplom-functional-tests"
        self.selenium_hub_url = "http://selenium-hub:4444"
    
    def run_command(self, command: List[str], capture_output: bool = True) -> subprocess.CompletedProcess:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        print(f"üîß –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(command)}")
        
        try:
            result = subprocess.run(
                command,
                capture_output=capture_output,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç timeout
            )
            
            if result.returncode == 0:
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                if capture_output and result.stdout:
                    print(f"üì§ –í—ã–≤–æ–¥: {result.stdout.strip()}")
            else:
                print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {result.returncode}")
                if capture_output and result.stderr:
                    print(f"üì§ –û—à–∏–±–∫–∞: {result.stderr.strip()}")
            
            return result
        except subprocess.TimeoutExpired:
            print(f"‚è∞ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ timeout (5 –º–∏–Ω—É—Ç)")
            raise
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            raise
    
    def stop_selenium_services(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        commands = [
            ["docker-compose", "-f", self.compose_file, "-p", self.project_name, "stop", "selenium-chrome"],
            ["docker-compose", "-f", self.compose_file, "-p", self.project_name, "stop", "selenium-hub"],
        ]
        
        for command in commands:
            try:
                result = self.run_command(command)
                if result.returncode != 0:
                    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        return True
    
    def remove_selenium_containers(self) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ Selenium –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."""
        print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ Selenium –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        
        commands = [
            ["docker", "rm", "-f", "selenium-chrome"],
            ["docker", "rm", "-f", "selenium-hub"],
        ]
        
        for command in commands:
            try:
                result = self.run_command(command)
                if result.returncode != 0:
                    print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        
        return True
    
    def pull_selenium_images(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Selenium –æ–±—Ä–∞–∑–æ–≤."""
        print("üì• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Selenium –æ–±—Ä–∞–∑–æ–≤...")
        
        images = [
            "selenium/hub:4.25.0",
            "selenium/node-chrome:4.25.0"
        ]
        
        for image in images:
            try:
                result = self.run_command(["docker", "pull", image], capture_output=False)
                if result.returncode != 0:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–∑ {image}")
                    return False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–∞ {image}: {e}")
                return False
        
        return True
    
    def rebuild_selenium_services(self) -> bool:
        """–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üîÑ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            result = self.run_command([
                "docker-compose", "-f", self.compose_file, "-p", self.project_name,
                "build", "--no-cache", "selenium-hub", "selenium-chrome"
            ], capture_output=False)
            
            if result.returncode != 0:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å Selenium —Å–µ—Ä–≤–∏—Å—ã")
                return False
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–µ: {e}")
            return False
    
    def start_selenium_services(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üöÄ –ó–∞–ø—É—Å–∫ Selenium —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º Hub
            result = self.run_command([
                "docker-compose", "-f", self.compose_file, "-p", self.project_name,
                "up", "-d", "selenium-hub"
            ])
            
            if result.returncode != 0:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Selenium Hub")
                return False
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Hub
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium Hub...")
            time.sleep(30)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Chrome Node
            result = self.run_command([
                "docker-compose", "-f", self.compose_file, "-p", self.project_name,
                "up", "-d", "selenium-chrome"
            ])
            
            if result.returncode != 0:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Chrome Node")
                return False
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Node
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Chrome Node...")
            time.sleep(20)
            
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def verify_selenium_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Selenium –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Selenium Grid...")
        
        max_attempts = 10
        for attempt in range(1, max_attempts + 1):
            print(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Hub
                response = requests.get(f"{self.selenium_hub_url}/wd/hub/status", timeout=10)
                if response.status_code == 200:
                    data = response.json()
                    if data.get("value", {}).get("ready", False):
                        print("‚úÖ Selenium Hub –≥–æ—Ç–æ–≤!")
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Grid API
                        try:
                            grid_response = requests.get(f"{self.selenium_hub_url}/grid/api/hub", timeout=5)
                            if grid_response.status_code == 200:
                                print("‚úÖ Selenium Grid API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                                return True
                        except Exception:
                            pass
                
                print(f"‚è≥ Hub –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤, –∂–¥–µ–º...")
                time.sleep(10)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
                time.sleep(10)
        
        print(f"‚ùå Selenium Grid –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False
    
    def fix_selenium_issues(self) -> bool:
        """–ü–æ–ª–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Selenium."""
        print("üîß –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Selenium –ø—Ä–æ–±–ª–µ–º...")
        
        steps = [
            ("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", self.stop_selenium_services),
            ("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", self.remove_selenium_containers),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤", self.pull_selenium_images),
            ("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤", self.start_selenium_services),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", self.verify_selenium_health),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüìã –®–∞–≥: {step_name}")
            try:
                if not step_func():
                    print(f"‚ùå –®–∞–≥ '{step_name}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ")
                    return False
                print(f"‚úÖ –®–∞–≥ '{step_name}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ '{step_name}': {e}")
                return False
        
        print(f"\nüéâ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã Selenium —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        return True
    
    def show_selenium_logs(self) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ Selenium –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        print("\nüìã –õ–æ–≥–∏ Selenium Hub:")
        try:
            self.run_command([
                "docker-compose", "-f", self.compose_file, "-p", self.project_name,
                "logs", "--tail=50", "selenium-hub"
            ], capture_output=False)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Hub: {e}")
        
        print("\nüìã –õ–æ–≥–∏ Chrome Node:")
        try:
            self.run_command([
                "docker-compose", "-f", self.compose_file, "-p", self.project_name,
                "logs", "--tail=50", "selenium-chrome"
            ], capture_output=False)
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ Chrome Node: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    fixer = SeleniumFixer()
    
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º Selenium Grid")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    fixer.show_selenium_logs()
    
    print("\n" + "=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if fixer.fix_selenium_issues():
        print(f"\nüéâ Selenium Grid —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        sys.exit(0)
    else:
        print(f"\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã Selenium Grid!")
        print(f"üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        print(f"  - make logs-selenium")
        print(f"  - make logs-selenium-chrome")
        print(f"  - make selenium-diagnostics")
        sys.exit(1)


if __name__ == "__main__":
    main()
