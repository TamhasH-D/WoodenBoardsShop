#!/usr/bin/env python3
"""–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Selenium Hub –∏ Chrome Node."""

import os
import requests
import json
import sys
from typing import Dict, Any, Optional


class SeleniumDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Selenium Grid."""
    
    def __init__(self):
        self.selenium_hub_url = os.getenv("SELENIUM_HUB_URL", "http://selenium-hub:4444")
        self.chrome_node_url = "http://selenium-chrome:5555"
    
    def check_hub_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Selenium Hub."""
        print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Selenium Hub...")
        
        results = {
            "hub_accessible": False,
            "hub_ready": False,
            "grid_api_accessible": False,
            "sessions_info": None,
            "error_details": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π status endpoint
        try:
            response = requests.get(f"{self.selenium_hub_url}/wd/hub/status", timeout=10)
            results["hub_accessible"] = True
            
            if response.status_code == 200:
                data = response.json()
                results["hub_ready"] = data.get("value", {}).get("ready", False)
                print(f"‚úÖ Hub –¥–æ—Å—Ç—É–ø–µ–Ω. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {results['hub_ready']}")
                print(f"üìä Hub —Å—Ç–∞—Ç—É—Å: {json.dumps(data, indent=2)}")
            else:
                results["error_details"].append(f"Hub status code: {response.status_code}")
                print(f"‚ùå Hub –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            results["error_details"].append(f"Hub connection error: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Hub: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Grid API
        try:
            response = requests.get(f"{self.selenium_hub_url}/grid/api/hub", timeout=10)
            if response.status_code == 200:
                results["grid_api_accessible"] = True
                print("‚úÖ Grid API –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                results["error_details"].append(f"Grid API status code: {response.status_code}")
                print(f"‚ùå Grid API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except Exception as e:
            results["error_details"].append(f"Grid API error: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ Grid API: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö
        try:
            response = requests.get(f"{self.selenium_hub_url}/grid/api/hub/status", timeout=10)
            if response.status_code == 200:
                data = response.json()
                results["sessions_info"] = data
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö: {json.dumps(data, indent=2)}")
        except Exception as e:
            results["error_details"].append(f"Sessions info error: {str(e)}")
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö: {e}")
        
        return results
    
    def check_chrome_node_status(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Chrome Node."""
        print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Chrome Node...")
        
        results = {
            "node_accessible": False,
            "node_ready": False,
            "node_info": None,
            "error_details": []
        }
        
        try:
            response = requests.get(f"{self.chrome_node_url}/status", timeout=10)
            results["node_accessible"] = True
            
            if response.status_code == 200:
                data = response.json()
                results["node_ready"] = data.get("value", {}).get("ready", False)
                results["node_info"] = data
                print(f"‚úÖ Chrome Node –¥–æ—Å—Ç—É–ø–µ–Ω. –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {results['node_ready']}")
                print(f"üìä Node —Å—Ç–∞—Ç—É—Å: {json.dumps(data, indent=2)}")
            else:
                results["error_details"].append(f"Node status code: {response.status_code}")
                print(f"‚ùå Chrome Node –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                
        except Exception as e:
            results["error_details"].append(f"Node connection error: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome Node: {e}")
        
        return results
    
    def check_network_connectivity(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏."""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")
        
        results = {
            "hub_ping": False,
            "node_ping": False,
            "dns_resolution": False,
            "error_details": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        try:
            import socket
            socket.gethostbyname("selenium-hub")
            results["dns_resolution"] = True
            print("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            results["error_details"].append(f"DNS resolution error: {str(e)}")
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤
        try:
            import socket
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            result = sock.connect_ex(("selenium-hub", 4444))
            sock.close()
            
            if result == 0:
                results["hub_ping"] = True
                print("‚úÖ –ü–æ—Ä—Ç 4444 Hub –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                results["error_details"].append(f"Hub port 4444 not accessible: {result}")
                print(f"‚ùå –ü–æ—Ä—Ç 4444 Hub –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result}")
        except Exception as e:
            results["error_details"].append(f"Hub port check error: {str(e)}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ Hub: {e}")
        
        return results
    
    def run_full_diagnostics(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Selenium Grid...")
        
        results = {
            "hub_status": self.check_hub_status(),
            "chrome_node_status": self.check_chrome_node_status(),
            "network_connectivity": self.check_network_connectivity(),
            "overall_health": False
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        hub_ok = results["hub_status"]["hub_ready"]
        node_ok = results["chrome_node_status"]["node_ready"]
        network_ok = results["network_connectivity"]["dns_resolution"]
        
        results["overall_health"] = hub_ok and node_ok and network_ok
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
        print(f"  Hub –≥–æ—Ç–æ–≤: {'‚úÖ' if hub_ok else '‚ùå'}")
        print(f"  Chrome Node –≥–æ—Ç–æ–≤: {'‚úÖ' if node_ok else '‚ùå'}")
        print(f"  –°–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {'‚úÖ' if network_ok else '‚ùå'}")
        print(f"  –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –ó–î–û–†–û–í' if results['overall_health'] else '‚ùå –ü–†–û–ë–õ–ï–ú–´'}")
        
        if not results["overall_health"]:
            print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
            
            if not hub_ok:
                print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Selenium Hub: make logs-selenium")
                print("  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Hub –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω: docker ps")
                print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health check Hub –≤ docker-compose")
            
            if not node_ok:
                print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Chrome Node: docker logs selenium-chrome")
                print("  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Node –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Hub")
                print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Node")
            
            if not network_ok:
                print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Docker —Å–µ—Ç–∏: docker network ls")
                print("  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏")
                print("  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: make down && make up")
        
        return results
    
    def suggest_fixes(self, diagnostics: Dict[str, Any]) -> None:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º."""
        print(f"\nüõ†Ô∏è –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        hub_errors = diagnostics["hub_status"]["error_details"]
        node_errors = diagnostics["chrome_node_status"]["error_details"]
        network_errors = diagnostics["network_connectivity"]["error_details"]
        
        if hub_errors:
            print(f"üîß –ü—Ä–æ–±–ª–µ–º—ã —Å Hub:")
            for error in hub_errors:
                print(f"  - {error}")
            print(f"  –†–µ—à–µ–Ω–∏—è:")
            print(f"    ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å timeout –≤ health check")
            print(f"    ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é Selenium –æ–±—Ä–∞–∑–∞")
            print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if node_errors:
            print(f"üîß –ü—Ä–æ–±–ª–µ–º—ã —Å Chrome Node:")
            for error in node_errors:
                print(f"  - {error}")
            print(f"  –†–µ—à–µ–Ω–∏—è:")
            print(f"    ‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å shm_size –¥–ª—è Chrome")
            print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Hub")
            print(f"    ‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π")
        
        if network_errors:
            print(f"üîß –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é:")
            for error in network_errors:
                print(f"  - {error}")
            print(f"  –†–µ—à–µ–Ω–∏—è:")
            print(f"    ‚Ä¢ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å Docker —Å–µ—Ç–∏")
            print(f"    ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å docker-compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            print(f"    ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Docker daemon")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    diagnostics = SeleniumDiagnostics()
    results = diagnostics.run_full_diagnostics()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    try:
        with open("/app/logs/selenium_diagnostics.json", "w") as f:
            json.dump(results, f, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ /app/logs/selenium_diagnostics.json")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {e}")
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    diagnostics.suggest_fixes(results)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if results["overall_health"]:
        print(f"\nüéâ Selenium Grid —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        sys.exit(0)
    else:
        print(f"\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å Selenium Grid!")
        sys.exit(1)


if __name__ == "__main__":
    main()
