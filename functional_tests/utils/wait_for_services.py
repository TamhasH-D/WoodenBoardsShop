#!/usr/bin/env python3
"""–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""

import os
import time
import requests
import sys
from typing import List, Dict
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type


class ServiceWaiter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self):
        self.backend_url = os.getenv("BACKEND_URL", "http://localhost:8001")
        self.selenium_hub_url = os.getenv("SELENIUM_HUB_URL", "http://localhost:4444")
        self.frontend_urls = {
            "admin": os.getenv("FRONTEND_ADMIN_URL", "http://localhost:8080"),
            "seller": os.getenv("FRONTEND_SELLER_URL", "http://localhost:8081"),
            "buyer": os.getenv("FRONTEND_BUYER_URL", "http://localhost:8082"),
        }
    
    @retry(
        stop=stop_after_attempt(30),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_backend(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend —Å–µ—Ä–≤–∏—Å–∞."""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend: {self.backend_url}")
        
        try:
            response = requests.get(f"{self.backend_url}/api/v1/health/", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Backend —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤!")
                return True
            else:
                print(f"‚ùå Backend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                raise requests.exceptions.RequestException(f"Backend not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(20),
        wait=wait_fixed(3),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_selenium_hub(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium Hub."""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium Hub: {self.selenium_hub_url}")
        
        try:
            response = requests.get(f"{self.selenium_hub_url}/status", timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data.get("value", {}).get("ready", False):
                    print("‚úÖ Selenium Hub –≥–æ—Ç–æ–≤!")
                    return True
                else:
                    print("‚ùå Selenium Hub –Ω–µ –≥–æ—Ç–æ–≤")
                    raise requests.exceptions.RequestException("Selenium Hub not ready")
            else:
                print(f"‚ùå Selenium Hub –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                raise requests.exceptions.RequestException(f"Selenium Hub not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Selenium Hub: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(15),
        wait=wait_fixed(3),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_frontend(self, name: str, url: str) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend —Å–µ—Ä–≤–∏—Å–∞."""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ {name} frontend: {url}")
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {name} frontend –≥–æ—Ç–æ–≤!")
                return True
            else:
                print(f"‚ùå {name} frontend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                raise requests.exceptions.RequestException(f"{name} frontend not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {name} frontend: {e}")
            raise
    
    def wait_for_all_services(self, include_frontends: bool = True) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –û–∂–∏–¥–∞–µ–º backend
            self.wait_for_backend()
            
            # –û–∂–∏–¥–∞–µ–º Selenium Hub
            self.wait_for_selenium_hub()
            
            # –û–∂–∏–¥–∞–µ–º frontend —Å–µ—Ä–≤–∏—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if include_frontends:
                for name, url in self.frontend_urls.items():
                    try:
                        self.wait_for_frontend(name, url)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {name} frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            print("üéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
            return True
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def check_service_health(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        health_status = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
        try:
            response = requests.get(f"{self.backend_url}/api/v1/health/", timeout=5)
            health_status["backend"] = response.status_code == 200
        except Exception:
            health_status["backend"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Selenium Hub
        try:
            response = requests.get(f"{self.selenium_hub_url}/status", timeout=5)
            health_status["selenium_hub"] = response.status_code == 200
        except Exception:
            health_status["selenium_hub"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend —Å–µ—Ä–≤–∏—Å—ã
        for name, url in self.frontend_urls.items():
            try:
                response = requests.get(url, timeout=5)
                health_status[f"frontend_{name}"] = response.status_code == 200
            except Exception:
                health_status[f"frontend_{name}"] = False
        
        return health_status


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    waiter = ServiceWaiter()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å frontend —Å–µ—Ä–≤–∏—Å—ã
    test_type = os.getenv("TEST_TYPE", "all")
    include_frontends = test_type in ["browser", "integration", "all"]
    
    print(f"üéØ –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {test_type}")
    print(f"üåê –í–∫–ª—é—á–∏—Ç—å frontend —Å–µ—Ä–≤–∏—Å—ã: {include_frontends}")
    
    # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if waiter.wait_for_all_services(include_frontends=include_frontends):
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        health_status = waiter.check_service_health()
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        for service, status in health_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {service}: {'–≥–æ—Ç–æ–≤' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        sys.exit(0)
    else:
        print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤!")
        sys.exit(1)


if __name__ == "__main__":
    main()
