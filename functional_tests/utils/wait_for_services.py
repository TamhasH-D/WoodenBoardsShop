#!/usr/bin/env python3
"""–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""

import os
import time
import requests
import sys
from typing import List, Dict
from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type


class ServiceWaiter:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self):
        # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ URL –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        self.backend_url = os.getenv("BACKEND_URL", "http://localhost:8001").rstrip('/')
        self.selenium_hub_url = os.getenv("SELENIUM_HUB_URL", "http://localhost:4444").rstrip('/')
        self.frontend_urls = {
            "admin": os.getenv("FRONTEND_ADMIN_URL", "http://localhost:8080").rstrip('/'),
            "seller": os.getenv("FRONTEND_SELLER_URL", "http://localhost:8081").rstrip('/'),
            "buyer": os.getenv("FRONTEND_BUYER_URL", "http://localhost:8082").rstrip('/'),
        }
    
    @retry(
        stop=stop_after_attempt(30),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_backend(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend —Å–µ—Ä–≤–∏—Å–∞."""
        health_url = f"{self.backend_url}/api/v1/health/"
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend: {health_url}")

        try:
            response = requests.get(health_url, timeout=10, allow_redirects=True)
            print(f"üìä Backend –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}, URL: {response.url}")

            if response.status_code == 200:
                print("‚úÖ Backend —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤!")
                return True
            elif response.status_code == 307:
                print(f"‚ö†Ô∏è Backend –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å (307). –§–∏–Ω–∞–ª—å–Ω—ã–π URL: {response.url}")
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 307, –Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—Ö–æ–º
                if response.history and response.history[0].status_code == 307:
                    print("‚úÖ Backend —Å–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è)!")
                    return True
                else:
                    raise requests.exceptions.RequestException(f"Backend redirect failed: {response.status_code}")
            else:
                print(f"‚ùå Backend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ endpoints
                try:
                    alt_url = f"{self.backend_url}/api/v1/health"  # –±–µ–∑ —Å–ª–µ—à–∞
                    alt_response = requests.get(alt_url, timeout=5, allow_redirects=True)
                    print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint (–±–µ–∑ —Å–ª–µ—à–∞): {alt_response.status_code}")
                    if alt_response.status_code == 200:
                        print("‚úÖ Backend –≥–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint!")
                        return True
                except Exception as alt_e:
                    print(f"üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {alt_e}")

                raise requests.exceptions.RequestException(f"Backend not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ backend: {e}")
            raise
    
    @retry(
        stop=stop_after_attempt(30),
        wait=wait_fixed(5),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_selenium_hub(self) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium Hub."""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Selenium Hub: {self.selenium_hub_url}")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è Selenium 4.x
            response = requests.get(f"{self.selenium_hub_url}/status", timeout=15)
            if response.status_code == 200:
                data = response.json()
                print(f"üìä Selenium Hub –æ—Ç–≤–µ—Ç: {data}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å Hub
                if data.get("value", {}).get("ready", False):
                    print("‚úÖ Selenium Hub –≥–æ—Ç–æ–≤!")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–∑–ª–æ–≤
                    nodes = data.get("value", {}).get("nodes", [])
                    if nodes:
                        active_nodes = [node for node in nodes if node.get("availability") == "UP"]
                        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–∑–ª–æ–≤: {len(active_nodes)}/{len(nodes)}")

                        if active_nodes:
                            total_slots = sum(len(node.get("slots", [])) for node in active_nodes)
                            print(f"üéØ –î–æ—Å—Ç—É–ø–Ω–æ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {total_slots}")
                        else:
                            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–∑–ª–æ–≤, –Ω–æ Hub –≥–æ—Ç–æ–≤")
                    else:
                        print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É–∑–ª–æ–≤, –Ω–æ Hub –≥–æ—Ç–æ–≤")

                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Grid API
                    try:
                        grid_response = requests.get(f"{self.selenium_hub_url}/grid/api/hub", timeout=10)
                        if grid_response.status_code == 200:
                            print("‚úÖ Selenium Grid API –¥–æ—Å—Ç—É–ø–µ–Ω!")
                        else:
                            print(f"‚ö†Ô∏è Selenium Grid API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {grid_response.status_code}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å Grid API: {e}")

                    return True
                else:
                    print(f"‚ùå Selenium Hub –Ω–µ –≥–æ—Ç–æ–≤. –°—Ç–∞—Ç—É—Å: {data}")
                    raise requests.exceptions.RequestException("Selenium Hub not ready")
            else:
                print(f"‚ùå Selenium Hub –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                raise requests.exceptions.RequestException(f"Selenium Hub not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Selenium Hub: {e}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            try:
                # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—ã–π endpoint –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                alt_response = requests.get(f"{self.selenium_hub_url}/wd/hub/status", timeout=5)
                print(f"üîç –°—Ç–∞—Ä—ã–π endpoint /wd/hub/status: {alt_response.status_code}")
            except Exception as alt_e:
                print(f"üîç –°—Ç–∞—Ä—ã–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {alt_e}")
            raise
    
    @retry(
        stop=stop_after_attempt(15),
        wait=wait_fixed(3),
        retry=retry_if_exception_type((requests.exceptions.RequestException, ConnectionError))
    )
    def wait_for_frontend(self, name: str, url: str) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ frontend —Å–µ—Ä–≤–∏—Å–∞."""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ {name} frontend: {url}")
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                print(f"‚úÖ {name} frontend –≥–æ—Ç–æ–≤!")
                return True
            else:
                print(f"‚ùå {name} frontend –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: {response.status_code}")
                raise requests.exceptions.RequestException(f"{name} frontend not ready: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {name} frontend: {e}")
            raise
    
    def wait_for_all_services(self, include_frontends: bool = True) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –û–∂–∏–¥–∞–µ–º backend
            self.wait_for_backend()
            
            # –û–∂–∏–¥–∞–µ–º Selenium Hub
            self.wait_for_selenium_hub()
            
            # –û–∂–∏–¥–∞–µ–º frontend —Å–µ—Ä–≤–∏—Å—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            if include_frontends:
                for name, url in self.frontend_urls.items():
                    try:
                        self.wait_for_frontend(name, url)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {name} frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            
            print("üéâ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã!")
            return True
            
        except Exception as e:
            print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def check_service_health(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        health_status = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
        try:
            response = requests.get(f"{self.backend_url}/api/v1/health/", timeout=5)
            health_status["backend"] = response.status_code == 200
        except Exception:
            health_status["backend"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Selenium Hub
        try:
            response = requests.get(f"{self.selenium_hub_url}/status", timeout=5)
            if response.status_code == 200:
                data = response.json()
                health_status["selenium_hub"] = data.get("value", {}).get("ready", False)
            else:
                health_status["selenium_hub"] = False
        except Exception:
            health_status["selenium_hub"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend —Å–µ—Ä–≤–∏—Å—ã
        for name, url in self.frontend_urls.items():
            try:
                response = requests.get(url, timeout=5)
                health_status[f"frontend_{name}"] = response.status_code == 200
            except Exception:
                health_status[f"frontend_{name}"] = False
        
        return health_status


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    waiter = ServiceWaiter()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∂–¥–∞—Ç—å frontend —Å–µ—Ä–≤–∏—Å—ã
    test_type = os.getenv("TEST_TYPE", "all")
    include_frontends = test_type in ["browser", "integration", "all"]
    
    print(f"üéØ –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {test_type}")
    print(f"üåê –í–∫–ª—é—á–∏—Ç—å frontend —Å–µ—Ä–≤–∏—Å—ã: {include_frontends}")
    
    # –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if waiter.wait_for_all_services(include_frontends=include_frontends):
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        health_status = waiter.check_service_health()
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        for service, status in health_status.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"  {status_icon} {service}: {'–≥–æ—Ç–æ–≤' if status else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        sys.exit(0)
    else:
        print("üí• –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤!")
        sys.exit(1)


if __name__ == "__main__":
    main()
