"""
–¢–µ—Å—Ç—ã POST /api/v1/wood-types/ endpoint.
–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ backend/backend/tests/endpoint_tests/wood_type/test_post_wood_type.py
"""

import pytest
import httpx

from api_tests.api_client import (
    assert_response_success,
    generate_test_data,
    validate_entity_fields,
)

URI = "/api/v1/wood-types/"


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.crud
@pytest.mark.fast
async def test_post_wood_type_success(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã: 201."""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    input_json = generate_test_data("wood_type")
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    response = await api_client.post(URI, json=input_json)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    response_data = assert_response_success(response, 201)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
    validate_entity_fields(response_data, "wood_type")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    assert response_data["neme"] == input_json["neme"]
    assert response_data["description"] == input_json["description"]


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_invalid_data(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: 422."""
    # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
    invalid_data = {
        "id": "invalid-uuid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π UUID
        "neme": 123,  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
        "description": None,  # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å null
    }
    
    response = await api_client.post(URI, json=invalid_data)
    
    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert response.status_code in [400, 422], (
        f"Expected validation error (400 or 422), got {response.status_code}. "
        f"Response: {response.text}"
    )


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_missing_fields(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: 422."""
    # –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    incomplete_data = {
        "id": "550e8400-e29b-41d4-a716-446655440000"
        # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç neme –∏ description
    }
    
    response = await api_client.post(URI, json=incomplete_data)
    
    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    assert response.status_code in [400, 422], (
        f"Expected validation error (400 or 422), got {response.status_code}. "
        f"Response: {response.text}"
    )


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_empty_strings(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏."""
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    input_json = generate_test_data("wood_type")
    input_json.update({
        "neme": "",
        "description": "",
    })
    
    response = await api_client.post(URI, json=input_json)
    
    # API –º–æ–∂–µ—Ç –ª–∏–±–æ –ø—Ä–∏–Ω—è—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ (201), –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å (400/422)
    assert response.status_code in [201, 400, 422], (
        f"Expected success (201) or validation error (400/422), got {response.status_code}. "
        f"Response: {response.text}"
    )
    
    if response.status_code == 201:
        response_data = assert_response_success(response, 201)
        validate_entity_fields(response_data, "wood_type")


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_long_strings(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏."""
    # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    input_json = generate_test_data("wood_type")
    input_json.update({
        "neme": "–ê" * 1000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        "description": "–ë" * 5000,  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    })
    
    response = await api_client.post(URI, json=input_json)
    
    # API –º–æ–∂–µ—Ç –ª–∏–±–æ –ø—Ä–∏–Ω—è—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (201), –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å (400/422)
    assert response.status_code in [201, 400, 422], (
        f"Expected success (201) or validation error (400/422), got {response.status_code}. "
        f"Response: {response.text}"
    )
    
    if response.status_code == 201:
        response_data = assert_response_success(response, 201)
        validate_entity_fields(response_data, "wood_type")


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_duplicate_id(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å –¥—É–±–ª–∏—Ä—É—é—â–∏–º—Å—è ID: 409."""
    # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
    input_json = generate_test_data("wood_type")
    
    response1 = await api_client.post(URI, json=input_json)
    assert_response_success(response1, 201)
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å —Ç–µ–º –∂–µ ID
    response2 = await api_client.post(URI, json=input_json)
    
    # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
    assert response2.status_code in [409, 400], (
        f"Expected conflict error (409 or 400), got {response2.status_code}. "
        f"Response: {response2.text}"
    )


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_special_characters(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
    # –¢–µ—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
    input_json = generate_test_data("wood_type")
    input_json.update({
        "neme": "–î—É–± & –°–æ—Å–Ω–∞ (–ø—Ä–µ–º–∏—É–º) - 100%",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å —Å–∏–º–≤–æ–ª–∞–º–∏: @#$%^&*()_+-=[]{}|;':\",./<>?",
    })
    
    response = await api_client.post(URI, json=input_json)
    
    # API –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    response_data = assert_response_success(response, 201)
    validate_entity_fields(response_data, "wood_type")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    assert response_data["neme"] == input_json["neme"]
    assert response_data["description"] == input_json["description"]


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_unicode_characters(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏."""
    # –¢–µ—Å—Ç —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏
    input_json = generate_test_data("wood_type")
    input_json.update({
        "neme": "–î—É–± üå≥ –ü—Ä–µ–º–∏—É–º",
        "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üå≤ü™µ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ √±√°√©√≠√≥√∫",
    })
    
    response = await api_client.post(URI, json=input_json)
    
    # API –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å Unicode
    response_data = assert_response_success(response, 201)
    validate_entity_fields(response_data, "wood_type")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Unicode —Å–∏–º–≤–æ–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    assert response_data["neme"] == input_json["neme"]
    assert response_data["description"] == input_json["description"]


@pytest.mark.anyio
@pytest.mark.api
@pytest.mark.post
@pytest.mark.validation
@pytest.mark.fast
async def test_post_wood_type_whitespace_handling(api_client: httpx.AsyncClient) -> None:
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –ø–æ–ª—è—Ö."""
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    input_json = generate_test_data("wood_type")
    input_json.update({
        "neme": "  –î—É–± —Å –ø—Ä–æ–±–µ–ª–∞–º–∏  ",
        "description": "\t\n–û–ø–∏—Å–∞–Ω–∏–µ —Å —Ç–∞–±–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏\t\n",
    })
    
    response = await api_client.post(URI, json=input_json)
    
    # API –º–æ–∂–µ—Ç –ª–∏–±–æ –ø—Ä–∏–Ω—è—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –ª–∏–±–æ –æ–±—Ä–µ–∑–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã
    response_data = assert_response_success(response, 201)
    validate_entity_fields(response_data, "wood_type")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, —Å –æ–±—Ä–µ–∑–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    assert len(response_data["neme"]) > 0
    assert len(response_data["description"]) > 0
