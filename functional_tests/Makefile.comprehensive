# Комплексный Makefile для функциональных тестов WoodenBoardsShop
# Поддерживает все типы тестов: API, браузерные, интеграционные, производительности

.PHONY: help test test-all test-api test-browser test-integration test-performance test-security
.PHONY: test-crud test-validation test-pagination test-yolo test-database test-error-handling
.PHONY: test-buyer test-seller test-admin test-fast test-slow
.PHONY: test-up test-down test-restart test-status test-logs test-clean test-rebuild
.PHONY: test-reports test-coverage test-parallel test-sequential
.PHONY: setup-env check-deps install-deps

# Переменные
DOCKER_COMPOSE_FILE = docker-compose.test.yaml
PROJECT_NAME = diplom-comprehensive-tests
PYTEST_ARGS = -v --tb=short --strict-markers
REPORTS_DIR = reports
LOGS_DIR = logs
SCREENSHOTS_DIR = screenshots

# Цвета для вывода
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Помощь
help:
	@echo "$(BLUE)Комплексная система функциональных тестов WoodenBoardsShop$(NC)"
	@echo ""
	@echo "$(GREEN)Основные команды:$(NC)"
	@echo "  test              - Запуск всех быстрых тестов"
	@echo "  test-all          - Запуск всех тестов (включая медленные)"
	@echo "  test-api          - Только API тесты"
	@echo "  test-browser      - Только браузерные тесты"
	@echo "  test-integration  - Только интеграционные тесты"
	@echo "  test-performance  - Только тесты производительности"
	@echo "  test-security     - Только тесты безопасности"
	@echo ""
	@echo "$(GREEN)Тесты по функциональности:$(NC)"
	@echo "  test-crud         - CRUD операции"
	@echo "  test-validation   - Валидация данных"
	@echo "  test-pagination   - Пагинация"
	@echo "  test-yolo         - YOLO интеграция"
	@echo "  test-database     - База данных"
	@echo "  test-error-handling - Обработка ошибок"
	@echo ""
	@echo "$(GREEN)Тесты по frontend:$(NC)"
	@echo "  test-buyer        - Buyer frontend"
	@echo "  test-seller       - Seller frontend"
	@echo "  test-admin        - Admin frontend"
	@echo ""
	@echo "$(GREEN)Тесты по скорости:$(NC)"
	@echo "  test-fast         - Быстрые тесты (< 30 сек)"
	@echo "  test-slow         - Медленные тесты (> 30 сек)"
	@echo ""
	@echo "$(GREEN)Управление окружением:$(NC)"
	@echo "  test-up           - Запуск тестового окружения"
	@echo "  test-down         - Остановка тестового окружения"
	@echo "  test-restart      - Перезапуск окружения"
	@echo "  test-status       - Статус контейнеров"
	@echo "  test-logs         - Просмотр логов"
	@echo "  test-clean        - Очистка данных и контейнеров"
	@echo "  test-rebuild      - Пересборка контейнеров"
	@echo ""
	@echo "$(GREEN)Отчеты и анализ:$(NC)"
	@echo "  test-reports      - Генерация отчетов"
	@echo "  test-coverage     - Анализ покрытия"
	@echo "  test-parallel     - Параллельные тесты"
	@echo "  test-sequential   - Последовательные тесты"
	@echo ""
	@echo "$(GREEN)Настройка:$(NC)"
	@echo "  setup-env         - Настройка окружения"
	@echo "  check-deps        - Проверка зависимостей"
	@echo "  install-deps      - Установка зависимостей"

# Проверка зависимостей
check-deps:
	@echo "$(BLUE)Проверка зависимостей...$(NC)"
	@command -v docker >/dev/null 2>&1 || { echo "$(RED)Docker не установлен$(NC)"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "$(RED)Docker Compose не установлен$(NC)"; exit 1; }
	@echo "$(GREEN)Все зависимости установлены$(NC)"

# Настройка окружения
setup-env: check-deps
	@echo "$(BLUE)Настройка тестового окружения...$(NC)"
	@mkdir -p $(REPORTS_DIR) $(LOGS_DIR) $(SCREENSHOTS_DIR)
	@echo "$(GREEN)Окружение настроено$(NC)"

# Управление контейнерами
test-up: setup-env
	@echo "$(BLUE)Запуск тестового окружения...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) up -d
	@echo "$(YELLOW)Ожидание готовности сервисов...$(NC)"
	@sleep 10
	@echo "$(GREEN)Тестовое окружение запущено$(NC)"

test-down:
	@echo "$(BLUE)Остановка тестового окружения...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) down
	@echo "$(GREEN)Тестовое окружение остановлено$(NC)"

test-restart: test-down test-up

test-status:
	@echo "$(BLUE)Статус тестового окружения:$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) ps

test-logs:
	@echo "$(BLUE)Логи тестового окружения:$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) logs --tail=50

test-clean: test-down
	@echo "$(BLUE)Очистка тестовых данных...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) down -v --remove-orphans
	@docker system prune -f
	@rm -rf $(REPORTS_DIR)/* $(LOGS_DIR)/* $(SCREENSHOTS_DIR)/*
	@echo "$(GREEN)Очистка завершена$(NC)"

test-rebuild: test-down
	@echo "$(BLUE)Пересборка контейнеров...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) build --no-cache
	@echo "$(GREEN)Пересборка завершена$(NC)"

# Основные тесты
test: test-up
	@echo "$(BLUE)Запуск быстрых тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "fast and not slow" \
		--html=$(REPORTS_DIR)/fast_tests_report.html --self-contained-html \
		--junitxml=$(REPORTS_DIR)/fast_tests_junit.xml

test-all: test-up
	@echo "$(BLUE)Запуск всех тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) \
		--html=$(REPORTS_DIR)/all_tests_report.html --self-contained-html \
		--junitxml=$(REPORTS_DIR)/all_tests_junit.xml

# Тесты по типам
test-api: test-up
	@echo "$(BLUE)Запуск API тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "api" api_tests/ \
		--html=$(REPORTS_DIR)/api_tests_report.html --self-contained-html

test-browser: test-up
	@echo "$(BLUE)Запуск браузерных тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "browser" browser_tests/ \
		--html=$(REPORTS_DIR)/browser_tests_report.html --self-contained-html

test-integration: test-up
	@echo "$(BLUE)Запуск интеграционных тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "integration" integration_tests/ \
		--html=$(REPORTS_DIR)/integration_tests_report.html --self-contained-html

test-performance: test-up
	@echo "$(BLUE)Запуск тестов производительности...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "performance" \
		--html=$(REPORTS_DIR)/performance_tests_report.html --self-contained-html

test-security: test-up
	@echo "$(BLUE)Запуск тестов безопасности...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "security" \
		--html=$(REPORTS_DIR)/security_tests_report.html --self-contained-html

# Тесты по функциональности
test-crud: test-up
	@echo "$(BLUE)Запуск CRUD тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "crud" \
		--html=$(REPORTS_DIR)/crud_tests_report.html --self-contained-html

test-validation: test-up
	@echo "$(BLUE)Запуск тестов валидации...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "validation" \
		--html=$(REPORTS_DIR)/validation_tests_report.html --self-contained-html

test-pagination: test-up
	@echo "$(BLUE)Запуск тестов пагинации...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "pagination" \
		--html=$(REPORTS_DIR)/pagination_tests_report.html --self-contained-html

test-yolo: test-up
	@echo "$(BLUE)Запуск YOLO тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "yolo" \
		--html=$(REPORTS_DIR)/yolo_tests_report.html --self-contained-html

test-database: test-up
	@echo "$(BLUE)Запуск тестов базы данных...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "database" \
		--html=$(REPORTS_DIR)/database_tests_report.html --self-contained-html

test-error-handling: test-up
	@echo "$(BLUE)Запуск тестов обработки ошибок...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "error_handling" \
		--html=$(REPORTS_DIR)/error_handling_tests_report.html --self-contained-html

# Тесты по frontend
test-buyer: test-up
	@echo "$(BLUE)Запуск тестов buyer frontend...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "buyer" \
		--html=$(REPORTS_DIR)/buyer_tests_report.html --self-contained-html

test-seller: test-up
	@echo "$(BLUE)Запуск тестов seller frontend...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "seller" \
		--html=$(REPORTS_DIR)/seller_tests_report.html --self-contained-html

test-admin: test-up
	@echo "$(BLUE)Запуск тестов admin frontend...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "admin" \
		--html=$(REPORTS_DIR)/admin_tests_report.html --self-contained-html

# Тесты по скорости
test-fast: test-up
	@echo "$(BLUE)Запуск быстрых тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "fast" \
		--html=$(REPORTS_DIR)/fast_tests_report.html --self-contained-html

test-slow: test-up
	@echo "$(BLUE)Запуск медленных тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "slow" \
		--html=$(REPORTS_DIR)/slow_tests_report.html --self-contained-html

# Параллельные и последовательные тесты
test-parallel: test-up
	@echo "$(BLUE)Запуск параллельных тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -n auto \
		--html=$(REPORTS_DIR)/parallel_tests_report.html --self-contained-html

test-sequential: test-up
	@echo "$(BLUE)Запуск последовательных тестов...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) \
		--html=$(REPORTS_DIR)/sequential_tests_report.html --self-contained-html

# Отчеты и анализ
test-reports:
	@echo "$(BLUE)Генерация сводного отчета...$(NC)"
	@echo "$(GREEN)Отчеты доступны в директории $(REPORTS_DIR)/$(NC)"
	@ls -la $(REPORTS_DIR)/

test-coverage: test-up
	@echo "$(BLUE)Анализ покрытия тестами...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) --cov=. --cov-report=html:$(REPORTS_DIR)/coverage_html \
		--cov-report=xml:$(REPORTS_DIR)/coverage.xml

# Установка зависимостей (если нужно)
install-deps:
	@echo "$(BLUE)Установка зависимостей...$(NC)"
	@pip install -r requirements.txt
	@echo "$(GREEN)Зависимости установлены$(NC)"

# Специальные команды для CI/CD
ci-test: setup-env test-up
	@echo "$(BLUE)Запуск тестов для CI/CD...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -m "not slow" \
		--html=$(REPORTS_DIR)/ci_tests_report.html --self-contained-html \
		--junitxml=$(REPORTS_DIR)/ci_tests_junit.xml || \
		(echo "$(RED)Тесты упали$(NC)" && exit 1)
	@echo "$(GREEN)CI/CD тесты прошли успешно$(NC)"

# Отладочные команды
debug-shell: test-up
	@echo "$(BLUE)Запуск отладочной оболочки...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests bash

debug-test: test-up
	@echo "$(BLUE)Запуск одного теста для отладки...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) -s -vv $(TEST_NAME)

# Мониторинг
monitor-health: test-up
	@echo "$(BLUE)Мониторинг здоровья системы...$(NC)"
	@docker-compose -f $(DOCKER_COMPOSE_FILE) -p $(PROJECT_NAME) run --rm functional-tests \
		python -m pytest $(PYTEST_ARGS) test_simple_health.py -v

# Информация о системе
info:
	@echo "$(BLUE)Информация о системе тестирования:$(NC)"
	@echo "Docker версия: $$(docker --version)"
	@echo "Docker Compose версия: $$(docker-compose --version)"
	@echo "Проект: $(PROJECT_NAME)"
	@echo "Файл конфигурации: $(DOCKER_COMPOSE_FILE)"
	@echo "Директория отчетов: $(REPORTS_DIR)"
	@echo "Директория логов: $(LOGS_DIR)"
	@echo "Директория скриншотов: $(SCREENSHOTS_DIR)"
