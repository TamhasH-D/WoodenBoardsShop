# GitLab CI/CD Pipeline with Build and Deploy stages
# Simple pipeline that builds, tests, and deploys services

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

# ============================================================================
# BUILD STAGE - Build all Docker containers
# ============================================================================

build_all_services:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - apk add --no-cache docker-compose
    - docker --version
    - docker-compose --version
    - cp ci/config/.env.ci .env
  script:
    - echo "🏗️ Building all services..."

    # Build backend services
    - echo "📦 Building backend services..."
    - cd backend/backend
    - docker-compose build --parallel
    - echo "✅ Backend services built successfully"

    # Build frontend services (if they exist)
    - echo "📦 Building frontend services..."
    - cd ../../
    - |
      if [ -f "docker-compose.yaml" ]; then
        echo "Building all services from root docker-compose..."
        docker-compose build --parallel || echo "⚠️ Some frontend services failed to build (non-blocking)"
      else
        echo "No root docker-compose found, skipping frontend build"
      fi

    # Verify images were built
    - echo "🔍 Verifying built images..."
    - docker images | grep -E "(backend|frontend|admin|seller|buyer)" || echo "⚠️ Some images not found"

    - echo "✅ All services built successfully!"

  artifacts:
    paths:
      - .env
    expire_in: 1 hour
  only:
    - main
    - dev
    - merge_requests
  timeout: 20m

# ============================================================================
# TEST STAGE - Test services startup
# ============================================================================

test_backend:
  stage: test
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build_all_services
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "🚀 Запуск backend сервисов..."
    
    # Копируем CI конфигурацию
    - cp ci/config/.env.ci .env
    
    # Запускаем только backend сервисы для проверки
    - echo "📦 Запуск backend сервисов..."
    - cd backend/backend
    - docker-compose up -d --build
    
    # Ждем запуска
    - echo "⏳ Ожидание запуска сервисов (60 секунд)..."
    - sleep 60
    
    # Проверяем статус контейнеров
    - echo "🔍 Проверка статуса контейнеров..."
    - docker-compose ps
    
    # Проверяем логи API
    - echo "📋 Логи API:"
    - docker-compose logs api
    
    # Проверяем, что API отвечает
    - echo "🌐 Проверка API..."
    - docker-compose exec -T api python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/docs', timeout=10); print('✅ API работает!')" || (echo "❌ API не работает!" && exit 1)
    
    - echo "✅ Backend сервисы запустились успешно!"
    
  after_script:
    - echo "🧹 Test cleanup..."
    - cd backend/backend || true
    - docker-compose down || true
    - echo "🧹 Cleaning up temporary build artifacts only..."
    - |
      # Clean only temporary containers and build cache, preserve base images
      docker container prune -f || true
      docker builder prune -f || true
      # Remove only untagged images (build artifacts), keep tagged base images
      docker image prune -f || true
      echo "✅ Cleaned temporary artifacts, preserved base images"
    
  only:
    - main
    - dev
    - merge_requests
    
  timeout: 15m

# ============================================================================
# DEPLOY STAGE - Deploy to environments
# ============================================================================

deploy_staging:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build_all_services
    - test_backend
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "🚀 Deploying to STAGING environment..."

    # Copy CI configuration
    - cp ci/config/.env.ci .env

    # Deploy backend services
    - echo "📦 Deploying backend services to staging..."
    - cd backend/backend
    - docker-compose up -d --force-recreate

    # Wait for services to start
    - echo "⏳ Waiting for staging services to start..."
    - sleep 30

    # Health check
    - echo "🩺 Running staging health checks..."
    - docker-compose ps
    - docker-compose logs api --tail 20

    # Verify deployment
    - echo "✅ Verifying staging deployment..."
    - |
      if docker-compose exec -T api python -c "
        import urllib.request
        try:
          with urllib.request.urlopen('http://localhost:8000/docs', timeout=10) as r:
            print('✅ Staging API is healthy, status:', r.status)
        except Exception as e:
          print('❌ Staging API health check failed:', e)
          exit(1)
      "; then
        echo "✅ Staging deployment successful!"
      else
        echo "❌ Staging deployment failed!"
        echo "🔄 Rolling back..."
        docker-compose down
        exit 1
      fi

    - echo "🎉 Staging deployment completed successfully!"

  after_script:
    - echo "🧹 Staging cleanup (keeping services running)..."
    # Note: We don't stop services in staging, they should keep running
    - echo "🧹 Cleaning up temporary build artifacts only..."
    - |
      # Clean only temporary containers and build cache, preserve base images
      docker container prune -f
      docker builder prune -f
      # Remove only untagged images (build artifacts), keep tagged base images
      docker image prune -f
      echo "✅ Cleaned temporary artifacts, preserved base images"

  environment:
    name: staging
    url: http://staging.yourdomain.com
  only:
    - dev
  timeout: 20m

deploy_production:
  stage: deploy
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  dependencies:
    - build_all_services
    - test_backend
  before_script:
    - apk add --no-cache docker-compose curl
    - docker --version
    - docker-compose --version
  script:
    - echo "🚀 Deploying to PRODUCTION environment..."

    # Copy production configuration
    - cp ci/config/.env.ci .env

    # Create backup of current production state
    - echo "💾 Creating backup of current production state..."
    - |
      if docker-compose ps | grep -q "Up"; then
        echo "📸 Backing up current production containers..."
        docker-compose ps > production_backup_$(date +%Y%m%d_%H%M%S).txt
      fi

    # Deploy to production
    - echo "📦 Deploying to production..."
    - cd backend/backend
    - docker-compose up -d --force-recreate

    # Wait for services to start
    - echo "⏳ Waiting for production services to start..."
    - sleep 45

    # Comprehensive health checks
    - echo "🩺 Running production health checks..."
    - docker-compose ps
    - docker-compose logs api --tail 30

    # Verify production deployment
    - echo "✅ Verifying production deployment..."
    - |
      if docker-compose exec -T api python -c "
        import urllib.request
        try:
          with urllib.request.urlopen('http://localhost:8000/docs', timeout=15) as r:
            print('✅ Production API is healthy, status:', r.status)
        except Exception as e:
          print('❌ Production API health check failed:', e)
          exit(1)
      "; then
        echo "✅ Production deployment successful!"
      else
        echo "❌ Production deployment failed!"
        echo "🔄 Rolling back production deployment..."
        docker-compose down
        echo "❌ Production rollback completed. Manual intervention required."
        exit 1
      fi

    - echo "🎉 Production deployment completed successfully!"

  after_script:
    - echo "🧹 Production deployment cleanup..."
    # Note: We don't stop production services
    - echo "🧹 Cleaning up temporary build artifacts only..."
    - |
      # Clean only temporary containers and build cache, preserve base images
      docker container prune -f
      docker builder prune -f
      # Remove only untagged images (build artifacts), keep tagged base images
      docker image prune -f
      echo "✅ Cleaned temporary artifacts, preserved base images"

  environment:
    name: production
    url: http://yourdomain.com
  only:
    - main
  when: manual  # Manual deployment to production
  timeout: 25m
