# GitLab CI/CD Pipeline –¥–ª—è Diplom Project
# –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

stages:
  - validate
  - build
  - test
  - security
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  COMPOSE_PROJECT_NAME: diplom-ci

# –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ –¥–ª—è Docker –æ–ø–µ—Ä–∞—Ü–∏–π
.docker-base: &docker-base
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker info
    - docker-compose --version

# –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ –¥–ª—è Python –æ–ø–µ—Ä–∞—Ü–∏–π
.python-base: &python-base
  image: python:3.12-slim
  before_script:
    - pip install --upgrade pip
    - apt-get update && apt-get install -y curl

# ==========================================
# VALIDATION STAGE
# ==========================================

validate:project-structure:
  stage: validate
  <<: *docker-base
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    - |
      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
      required_files=(
        "docker-compose.yaml"
        "Makefile"
        "README.md"
        "functional_tests/docker-compose.test.yaml"
        "functional_tests/Dockerfile"
        "functional_tests/requirements.txt"
      )
      
      for file in "${required_files[@]}"; do
        if [ ! -f "$file" ]; then
          echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª: $file"
          exit 1
        fi
        echo "‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $file"
      done
    
    - echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    - docker-compose config --quiet

    - echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    - |
      required_dirs=(
        "backend/backend"
        "backend/prosto_board_volume-main"
        "frontend/admin"
        "frontend/seller"
        "frontend/buyer"
        "keycloak"
        "docs"
      )

      for dir in "${required_dirs[@]}"; do
        if [ ! -d "$dir" ]; then
          echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
          exit 1
        fi
        echo "‚úÖ –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
      done
    
    - echo "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

# ==========================================
# BUILD STAGE
# ==========================================

build:all-services:
  stage: build
  <<: *docker-base
  script:
    - echo "üèóÔ∏è –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
    - docker-compose build --parallel
    - echo "‚úÖ –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    
    - echo "üß™ –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    - cd functional_tests
    - docker build -t functional-tests:$CI_COMMIT_SHA .
    - echo "‚úÖ –°–±–æ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour
  dependencies:
    - validate:project-structure
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

# ==========================================
# TEST STAGE
# ==========================================

test:integration:
  stage: test
  <<: *docker-base
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
    - docker-compose up -d
    - echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    - sleep 30
    
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    - |
      services=(
        "http://localhost:8000/api/v1/health"
        "http://localhost:8080"
        "http://localhost:8081"
        "http://localhost:8082"
      )
      
      for service in "${services[@]}"; do
        echo "–ü—Ä–æ–≤–µ—Ä–∫–∞: $service"
        curl -f "$service" || echo "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: $service"
      done
    
    - echo "‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
  after_script:
    - docker-compose logs
    - docker-compose down -v
  dependencies:
    - build:all-services
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

test:backend-quality:
  stage: test
  <<: *python-base
  script:
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ backend –∫–æ–¥–∞..."
    - cd backend/backend
    - pip install -r requirements.txt || pip install uv && uv sync
    - echo "üßπ –ó–∞–ø—É—Å–∫ –ª–∏–Ω—Ç–µ—Ä–∞..."
    - ruff check . || echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –ª–∏–Ω—Ç–∏–Ω–≥–∞"
    - echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤..."
    - mypy . || echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Ç–∏–ø–∏–∑–∞—Ü–∏–∏"
    - echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ backend –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
  dependencies:
    - build:all-services
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

# ==========================================
# ADDITIONAL TEST STAGE
# ==========================================

test:backend-unit:
  stage: test
  <<: *python-base
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ backend..."
    - cd backend/backend
    - pip install -r requirements.txt
    - pytest tests/ -v --tb=short
    - echo "‚úÖ Backend unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
  artifacts:
    reports:
      junit: backend/backend/test-results.xml
    paths:
      - backend/backend/htmlcov/
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

test:frontend-unit:
  stage: test
  image: node:18-alpine
  script:
    - echo "üß™ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤ frontend..."
    - cd frontend
    - npm install
    - npm run test:all
    - echo "‚úÖ Frontend unit —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
  artifacts:
    paths:
      - frontend/*/coverage/
    expire_in: 1 week
    when: always
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH
    - if: $CI_PIPELINE_SOURCE == "web"

# ==========================================
# SECURITY STAGE
# ==========================================

security:docker-scan:
  stage: security
  <<: *docker-base
  script:
    - echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
    - |
      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Trivy
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      
      # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
      trivy image --exit-code 0 --severity HIGH,CRITICAL backend:latest || echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ backend"
    - echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
  dependencies:
    - build:all-services
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"
    - if: $CI_PIPELINE_SOURCE == "web"
  allow_failure: true

# ==========================================
# DEPLOY STAGE
# ==========================================

deploy:staging:
  stage: deploy
  <<: *docker-base
  script:
    - echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ staging..."
    - echo "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è staging..."
    - docker tag backend:latest $CI_REGISTRY_IMAGE/backend:staging-$CI_COMMIT_SHA
    - echo "‚úÖ Staging —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
  environment:
    name: staging
    url: https://staging.yourdomain.com
  dependencies:
    - build:all-services
    - test:backend-unit
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
  when: manual

deploy:production:
  stage: deploy
  <<: *docker-base
  script:
    - echo "üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ production..."
    - echo "–¢–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è production..."
    - docker tag backend:latest $CI_REGISTRY_IMAGE/backend:latest
    - docker tag backend:latest $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_SHA
    - echo "‚úÖ Production —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"
  environment:
    name: production
    url: https://yourdomain.com
  dependencies:
    - build:all-services
    - test:backend-unit
    - test:frontend-unit
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
  when: manual
