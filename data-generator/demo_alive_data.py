#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∂–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
"""

import random
from generate_data import DataGenerator
from data_templates import (
    WOOD_TYPES, PRODUCT_TITLE_TEMPLATES, PRODUCT_DESCRIPTIONS,
    CHAT_MESSAGES_BUYER, CHAT_MESSAGES_SELLER, PRODUCT_STORIES,
    WOOD_EMOTIONS, SEASONAL_MOODS, SELLER_PERSONALITIES
)

def demo_alive_products():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∂–∏–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    print("üõçÔ∏è –ü—Ä–∏–º–µ—Ä—ã –∂–∏–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
    print("=" * 60)
    
    generator = DataGenerator()
    
    for i in range(5):
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
        wood_type = random.choice(WOOD_TYPES)
        wood_name = wood_type['neme']
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã
        width, height = random.choice([(100, 25), (150, 40), (200, 50)])
        length = random.choice([3000, 4000, 6000])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_template = random.choice(PRODUCT_TITLE_TEMPLATES)
        title = title_template.format(
            wood_type=wood_name,
            width=width,
            height=height,
            length=length
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏–≤—ã–µ –¥–µ—Ç–∞–ª–∏
        if random.random() < 0.5:
            title += random.choice([
                " [–°–í–ï–ñ–ò–ô –ó–ê–í–û–ó]",
                " [–•–ò–¢ –ü–†–û–î–ê–ñ]",
                " [–ú–ê–°–¢–ï–† –í–´–ë–û–†]",
                " [–°–ï–í–ï–†–ù–û–ï –ö–ê–ß–ï–°–¢–í–û]"
            ])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        description = random.choice(PRODUCT_DESCRIPTIONS).format(wood_type=wood_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if random.random() < 0.6:
            story = random.choice(PRODUCT_STORIES)
            description += f" {story}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏—é
        if wood_name in WOOD_EMOTIONS and random.random() < 0.7:
            emotion = random.choice(WOOD_EMOTIONS[wood_name])
            description += f" –î—Ä–µ–≤–µ—Å–∏–Ω–∞ –æ—Å–æ–±–µ–Ω–Ω–æ {emotion}."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É
        price = random.randint(15000, 80000)
        volume = round((width * height * length) / 1_000_000_000, 4)
        total_price = round(volume * price, 2)
        
        print(f"\nüì¶ –¢–æ–≤–∞—Ä {i+1}:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
        print(f"   –¶–µ–Ω–∞: {total_price:,.2f} ‚ÇΩ ({price:,} ‚ÇΩ/–º¬≥)")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {description}")
        print(f"   –û–±—ä–µ–º: {volume} –º¬≥")

def demo_alive_chat():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ —á–∞—Ç–∞"""
    print("\n\nüí¨ –ü—Ä–∏–º–µ—Ä –∂–∏–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞:")
    print("=" * 60)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    messages = []
    
    # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç
    buyer_msg = random.choice(CHAT_MESSAGES_BUYER)
    if random.random() < 0.3:
        buyer_msg += random.choice([
            " (—Å—Ç—Ä–æ—é –¥–æ–º –¥–ª—è —Å–µ–º—å–∏)",
            " (–¥–µ–ª–∞—é –º–µ–±–µ–ª—å —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏)",
            " (—Ä–µ–º–æ–Ω—Ç –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ)"
        ])
    messages.append(("üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", buyer_msg))
    
    # –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤–µ—á–∞–µ—Ç
    seller_msg = random.choice(CHAT_MESSAGES_SELLER)
    if random.random() < 0.2:
        seller_msg += f" {random.choice(SELLER_PERSONALITIES)}"
    messages.append(("üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü", seller_msg))
    
    # –ï—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    for _ in range(3):
        if random.choice([True, False]):
            msg = random.choice(CHAT_MESSAGES_BUYER)
            messages.append(("üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å", msg))
        else:
            msg = random.choice(CHAT_MESSAGES_SELLER)
            messages.append(("üè™ –ü—Ä–æ–¥–∞–≤–µ—Ü", msg))
    
    # –í—ã–≤–æ–¥–∏–º –¥–∏–∞–ª–æ–≥
    for sender, message in messages:
        print(f"\n{sender}:")
        print(f"   {message}")

def demo_alive_addresses():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∂–∏–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"""
    print("\n\nüè† –ü—Ä–∏–º–µ—Ä—ã –∂–∏–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:")
    print("=" * 60)
    
    generator = DataGenerator()
    
    for i in range(5):
        address = generator.generate_pickup_address()
        print(f"   {i+1}. {address}")

def demo_seasonal_prices():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ü–µ–Ω"""
    print("\n\nüí∞ –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω:")
    print("=" * 60)
    
    generator = DataGenerator()
    
    wood_types = ["–°–æ—Å–Ω–∞", "–î—É–±", "–ë–µ—Ä–µ–∑–∞"]
    base_prices = [20000, 60000, 30000]
    
    for wood_type, base_price in zip(wood_types, base_prices):
        seasonal_price = generator.add_seasonal_price_variation(base_price, wood_type)
        change = ((seasonal_price - base_price) / base_price) * 100
        
        print(f"   {wood_type}:")
        print(f"     –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price:,} ‚ÇΩ/–º¬≥")
        print(f"     –°–µ–∑–æ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {seasonal_price:,.0f} ‚ÇΩ/–º¬≥")
        print(f"     –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}%")

def demo_moods_and_stories():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏–π"""
    print("\n\n‚ú® –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏–∏:")
    print("=" * 60)
    
    print("\nüé≠ –°–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:")
    for mood in SEASONAL_MOODS[:3]:
        print(f"   ‚Ä¢ {mood}")
    
    print("\nüìñ –ò—Å—Ç–æ—Ä–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö:")
    for story in PRODUCT_STORIES[:3]:
        print(f"   ‚Ä¢ {story}")
    
    print("\nüë®‚Äçüíº –õ–∏—á–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤:")
    for personality in SELLER_PERSONALITIES[:3]:
        print(f"   ‚Ä¢ {personality}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    print("üåü –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ñ–ò–í–´–• –î–ê–ù–ù–´–• –ì–ï–ù–ï–†–ê–¢–û–†–ê")
    print("=" * 80)
    print("–¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–∞–Ω–Ω—ã–µ, –∞ –∂–∏–≤—ã–µ –∏—Å—Ç–æ—Ä–∏–∏!")
    print("–ö–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä, –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ —ç–º–æ—Ü–∏–∏.")
    
    demo_alive_products()
    demo_alive_chat()
    demo_alive_addresses()
    demo_seasonal_prices()
    demo_moods_and_stories()
    
    print("\n" + "=" * 80)
    print("üéâ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–ª–∏ –∂–∏–≤—ã–º–∏!")
    print("‚ú® –ö–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é")
    print("üíù –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —ç–º–æ—Ü–∏–∏ –¥–µ–ª–∞—é—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏")
    print("üèÜ –ì–æ—Ç–æ–≤–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∂–∏–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")

if __name__ == "__main__":
    main()
