#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WoodenBoardsShop
"""

import json
import os
import random
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from uuid import uuid4
import requests
from faker import Faker
from tqdm import tqdm
from dotenv import load_dotenv

from data_templates import (
    WOOD_TYPES, WOOD_PRICE_RANGES, PRODUCT_TITLE_TEMPLATES,
    PRODUCT_DESCRIPTIONS, PICKUP_CITIES, STREET_TYPES, STREET_NAMES,
    CHAT_MESSAGES_BUYER, CHAT_MESSAGES_SELLER, BOARD_DIMENSIONS, BOARD_LENGTHS
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DataGenerator:
    def __init__(self):
        self.fake = Faker('ru_RU')
        self.api_base = os.getenv('API_BASE_URL', 'http://localhost:8000/api/v1')
        self.timeout = int(os.getenv('REQUEST_TIMEOUT', '30'))
        
        # –°—á–µ—Ç—á–∏–∫–∏ –∑–∞–ø–∏—Å–µ–π
        self.counts = {
            'wood_types': int(os.getenv('WOOD_TYPES_COUNT', '12')),
            'wood_type_prices': int(os.getenv('WOOD_TYPE_PRICES_COUNT', '80')),
            'buyers': int(os.getenv('BUYERS_COUNT', '75')),
            'sellers': int(os.getenv('SELLERS_COUNT', '25')),
            'products': int(os.getenv('PRODUCTS_COUNT', '350')),
            'chat_threads': int(os.getenv('CHAT_THREADS_COUNT', '150')),
            'chat_messages': int(os.getenv('CHAT_MESSAGES_COUNT', '1200'))
        }
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö UUID
        self.generated_data = {
            'wood_types': [],
            'wood_type_prices': [],
            'buyers': [],
            'sellers': [],
            'products': [],
            'images': [],
            'wooden_boards': [],
            'chat_threads': [],
            'chat_messages': []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.images_source = Path(os.getenv('IMAGES_SOURCE_DIR', 
            '../backend/prosto_board_volume-main/utils/benchmarks/input/wooden_boards_images'))
        self.images_upload = Path(os.getenv('IMAGES_UPLOAD_DIR', './uploaded_images'))
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.images_upload.mkdir(exist_ok=True)

    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ JSON —Ñ–∞–π–ª"""
        with open('generated_uuids.json', 'w', encoding='utf-8') as f:
            json.dump(self.generated_data, f, ensure_ascii=False, indent=2, default=str)

    def make_request(self, method, endpoint, data=None, files=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.api_base}{endpoint}"
        try:
            if method.upper() == 'POST':
                if files:
                    response = requests.post(url, data=data, files=files, timeout=self.timeout)
                else:
                    response = requests.post(url, json=data, timeout=self.timeout)
            else:
                response = requests.request(method, url, json=data, timeout=self.timeout)
            
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            raise

    def generate_wood_types(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã"""
        print("üå≤ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã...")
        
        for wood_data in tqdm(WOOD_TYPES[:self.counts['wood_types']]):
            wood_id = str(uuid4())
            payload = {
                'id': wood_id,
                'neme': wood_data['neme'],
                'description': wood_data['description']
            }
            
            try:
                response = self.make_request('POST', '/wood-types/', payload)
                self.generated_data['wood_types'].append({
                    'id': wood_id,
                    'neme': wood_data['neme']
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã {wood_data['neme']}: {e}")
        
        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['wood_types'])} —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")

    def generate_wood_type_prices(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É"""
        print("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É...")
        
        if not self.generated_data['wood_types']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")
            return
        
        prices_per_type = self.counts['wood_type_prices'] // len(self.generated_data['wood_types'])
        
        for wood_type in tqdm(self.generated_data['wood_types']):
            wood_name = wood_type['neme']
            price_range = WOOD_PRICE_RANGES.get(wood_name, (15000, 50000))
            
            for _ in range(prices_per_type):
                price_id = str(uuid4())
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞
                days_ago = random.randint(1, 730)
                created_date = datetime.now() - timedelta(days=days_ago)
                
                payload = {
                    'id': price_id,
                    'price_per_m3': round(random.uniform(*price_range), 2),
                    'wood_type_id': wood_type['id']
                }
                
                try:
                    response = self.make_request('POST', '/wood-type-prices/', payload)
                    self.generated_data['wood_type_prices'].append(price_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {wood_name}: {e}")
        
        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['wood_type_prices'])} —Ü–µ–Ω –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É")

    def generate_buyers(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...")
        
        for _ in tqdm(range(self.counts['buyers'])):
            buyer_id = str(uuid4())
            keycloak_uuid = str(uuid4())
            
            payload = {
                'id': buyer_id,
                'keycloak_uuid': keycloak_uuid,
                'is_online': random.choice([True, False])
            }
            
            try:
                response = self.make_request('POST', '/buyers/', payload)
                self.generated_data['buyers'].append(buyer_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {e}")
        
        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['buyers'])} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")

    def generate_sellers(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
        print("üè™ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...")
        
        for _ in tqdm(range(self.counts['sellers'])):
            seller_id = str(uuid4())
            keycloak_uuid = str(uuid4())
            
            payload = {
                'id': seller_id,
                'keycloak_uuid': keycloak_uuid,
                'is_online': random.choice([True, False])
            }
            
            try:
                response = self.make_request('POST', '/sellers/', payload)
                self.generated_data['sellers'].append(seller_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞: {e}")
        
        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['sellers'])} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")

    def generate_pickup_address(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞"""
        city = random.choice(PICKUP_CITIES)
        street_type = random.choice(STREET_TYPES)
        street_name = random.choice(STREET_NAMES)
        house_num = random.randint(1, 200)

        return f"–≥. {city}, {street_type} {street_name}, –¥. {house_num}"

    def generate_products(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")

        if not self.generated_data['sellers'] or not self.generated_data['wood_types']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")
            return

        for _ in tqdm(range(self.counts['products'])):
            product_id = str(uuid4())
            seller_id = random.choice(self.generated_data['sellers'])
            wood_type = random.choice(self.generated_data['wood_types'])

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å–∫–∏
            width, height = random.choice(BOARD_DIMENSIONS)
            length = random.choice(BOARD_LENGTHS)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º (–≤ –º¬≥)
            volume = round((width * height * length) / 1_000_000_000, 4)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
            wood_name = wood_type['neme']
            price_range = WOOD_PRICE_RANGES.get(wood_name, (15000, 50000))
            price_per_m3 = random.uniform(*price_range)
            total_price = round(volume * price_per_m3, 2)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            title_template = random.choice(PRODUCT_TITLE_TEMPLATES)
            title = title_template.format(
                wood_type=wood_name,
                width=width,
                height=height,
                length=length
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            description_template = random.choice(PRODUCT_DESCRIPTIONS)
            description = description_template.format(wood_type=wood_name)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –∏ —Å–∞–º–æ–≤—ã–≤–æ–∑
            delivery_possible = random.choice([True, False])
            pickup_location = self.generate_pickup_address() if random.choice([True, False]) else None

            payload = {
                'id': product_id,
                'volume': volume,
                'price': total_price,
                'title': title,
                'descrioption': description,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É –∏–∑ API
                'delivery_possible': delivery_possible,
                'pickup_location': pickup_location,
                'seller_id': seller_id,
                'wood_type_id': wood_type['id']
            }

            try:
                response = self.make_request('POST', '/products/', payload)
                self.generated_data['products'].append(product_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['products'])} —Ç–æ–≤–∞—Ä–æ–≤")

    def copy_and_generate_images(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
        print("üñºÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        if not self.generated_data['products']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not self.images_source.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.images_source}")
            return

        image_files = list(self.images_source.glob('*.jpg')) + list(self.images_source.glob('*.png'))
        if not image_files:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        for product_id in tqdm(self.generated_data['products']):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            source_image = random.choice(image_files)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            image_id = str(uuid4())
            file_extension = source_image.suffix
            new_filename = f"{image_id}{file_extension}"
            target_path = self.images_upload / new_filename

            try:
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                shutil.copy2(source_image, target_path)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                payload = {
                    'id': image_id,
                    'filename': new_filename,
                    'product_id': product_id
                }

                response = self.make_request('POST', '/images/', payload)
                self.generated_data['images'].append({
                    'id': image_id,
                    'filename': new_filename,
                    'product_id': product_id
                })

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['images'])} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    def generate_wooden_boards(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫"""
        print("ü™µ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫...")

        if not self.generated_data['images']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        for image_data in tqdm(self.generated_data['images']):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 1-3 –¥–æ—Å–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            boards_count = random.randint(1, 3)

            for _ in range(boards_count):
                board_id = str(uuid4())

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–æ—Å–∫–∏
                width, height = random.choice(BOARD_DIMENSIONS)
                length = random.choice(BOARD_LENGTHS)

                payload = {
                    'id': board_id,
                    'height': float(height),
                    'width': float(width),
                    'lenght': float(length),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É –∏–∑ API
                    'image_id': image_data['id']
                }

                try:
                    response = self.make_request('POST', '/wooden-boards/', payload)
                    self.generated_data['wooden_boards'].append(board_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏: {e}")

        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['wooden_boards'])} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å–æ–∫")

    def generate_chat_threads(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–∏ —á–∞—Ç–∞"""
        print("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–∞...")

        if not self.generated_data['buyers'] or not self.generated_data['sellers']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")
            return

        for _ in tqdm(range(self.counts['chat_threads'])):
            thread_id = str(uuid4())
            buyer_id = random.choice(self.generated_data['buyers'])
            seller_id = random.choice(self.generated_data['sellers'])

            payload = {
                'id': thread_id,
                'buyer_id': buyer_id,
                'seller_id': seller_id
            }

            try:
                response = self.make_request('POST', '/chat-threads/', payload)
                self.generated_data['chat_threads'].append({
                    'id': thread_id,
                    'buyer_id': buyer_id,
                    'seller_id': seller_id
                })
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ —á–∞—Ç–∞: {e}")

        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['chat_threads'])} –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–∞")

    def generate_chat_messages(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö"""
        print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö...")

        if not self.generated_data['chat_threads']:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–æ—Ç–æ–∫–∏ —á–∞—Ç–∞")
            return

        messages_per_thread = self.counts['chat_messages'] // len(self.generated_data['chat_threads'])

        for thread_data in tqdm(self.generated_data['chat_threads']):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
            for i in range(messages_per_thread):
                message_id = str(uuid4())

                # –ß–µ—Ä–µ–¥—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π (–Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è)
                is_buyer_sender = (i % 2 == 0)

                if is_buyer_sender:
                    message_text = random.choice(CHAT_MESSAGES_BUYER)
                    is_read_by_buyer = True  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    is_read_by_seller = random.choice([True, False])
                else:
                    message_text = random.choice(CHAT_MESSAGES_SELLER)
                    is_read_by_buyer = random.choice([True, False])
                    is_read_by_seller = True  # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏—Ç —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                if '{city}' in message_text:
                    message_text = message_text.format(city=random.choice(PICKUP_CITIES))

                payload = {
                    'id': message_id,
                    'message': message_text,
                    'is_read_by_buyer': is_read_by_buyer,
                    'is_read_by_seller': is_read_by_seller,
                    'thread_id': thread_data['id'],
                    'buyer_id': thread_data['buyer_id'],
                    'seller_id': thread_data['seller_id']
                }

                try:
                    response = self.make_request('POST', '/chat-messages/', payload)
                    self.generated_data['chat_messages'].append(message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        self.save_progress()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.generated_data['chat_messages'])} —Å–æ–æ–±—â–µ–Ω–∏–π")

    def run_generation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print(f"API: {self.api_base}")
        print(f"–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å:")
        for entity, count in self.counts.items():
            print(f"  - {entity}: {count}")
        print()

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            self.generate_wood_types()
            self.generate_wood_type_prices()
            self.generate_buyers()
            self.generate_sellers()
            self.generate_products()
            self.copy_and_generate_images()
            self.generate_wooden_boards()
            self.generate_chat_threads()
            self.generate_chat_messages()

            print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π:")
            for entity, data in self.generated_data.items():
                print(f"  - {entity}: {len(data)}")

        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            print("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ generated_uuids.json")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            print("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ generated_uuids.json")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    generator = DataGenerator()
    generator.run_generation()


if __name__ == "__main__":
    main()
