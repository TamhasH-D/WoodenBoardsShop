#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import os
from pathlib import Path
from datetime import datetime
from generate_data import DataGenerator

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ API"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
    
    generator = DataGenerator()
    
    if generator.check_api_health():
        print("  ‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
    else:
        print("  ‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ backend: make backend-up")
        return False

def check_images():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    generator = DataGenerator()
    
    if not generator.images_source.exists():
        print(f"  ‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {generator.images_source}")
        return False
    
    image_files = list(generator.images_source.glob('*.jpg')) + list(generator.images_source.glob('*.png'))
    
    if len(image_files) == 0:
        print("  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    return True

def check_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    env_file = Path('.env')
    if not env_file.exists():
        print("  ‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("  üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env")
        return False
    
    generator = DataGenerator()
    
    print(f"  üìã –ü—Ä–æ—Ñ–∏–ª—å: {generator.profile}")
    print(f"  üåê API URL: {generator.api_base}")
    print(f"  ‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: {generator.timeout}—Å")
    print(f"  üîÑ –ü–æ–≤—Ç–æ—Ä—ã: {generator.max_retries}")
    
    total_records = sum(generator.counts.values())
    print(f"  üìä –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å: {total_records:,} –∑–∞–ø–∏—Å–µ–π")
    
    return True

def check_previous_generation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª —Å UUID
    uuid_file = Path('generated_uuids.json')
    if uuid_file.exists():
        try:
            with open(uuid_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            total_existing = 0
            print("  üìù –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
            for entity, records in data.items():
                count = len(records) if isinstance(records, list) else 0
                if count > 0:
                    print(f"    - {entity}: {count:,}")
                    total_existing += count
            
            if total_existing > 0:
                print(f"  üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_existing:,}")
                print("  ‚ö†Ô∏è –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: make rm-data")
            else:
                print("  ‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ UUID: {e}")
            return False
    else:
        print("  ‚úÖ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—á–µ—Ç—ã
    report_files = list(Path('.').glob('generation_report_*.json'))
    if report_files:
        print(f"  üìä –ù–∞–π–¥–µ–Ω–æ {len(report_files)} –æ—Ç—á–µ—Ç–æ–≤ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
        latest_report = max(report_files, key=lambda x: x.stat().st_mtime)
        try:
            with open(latest_report, 'r', encoding='utf-8') as f:
                report = json.load(f)
            
            timestamp = datetime.fromisoformat(report['timestamp'].replace('Z', '+00:00'))
            print(f"  üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {timestamp.strftime('%d.%m.%Y %H:%M')}")
            print(f"  üìã –ü—Ä–æ—Ñ–∏–ª—å: {report.get('profile', 'unknown')}")
            
            if 'stats' in report and report['stats'].get('end_time'):
                duration = report['stats']['end_time']
                print(f"  ‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
                
        except Exception as e:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
    
    return True

def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ...")
    
    try:
        import shutil
        total, used, free = shutil.disk_usage('.')
        
        free_gb = free // (1024**3)
        total_gb = total // (1024**3)
        
        print(f"  üíΩ –°–≤–æ–±–æ–¥–Ω–æ: {free_gb} –ì–ë –∏–∑ {total_gb} –ì–ë")
        
        if free_gb < 1:
            print("  ‚ö†Ô∏è –ú–∞–ª–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ (< 1 –ì–ë)")
            return False
        elif free_gb < 5:
            print("  ‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ (< 5 –ì–ë)")
        else:
            print("  ‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ")
            
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    checks = [
        ("API", check_api_status),
        ("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", check_images),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_configuration),
        ("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", check_previous_generation),
        ("–ú–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ", check_disk_space)
    ]
    
    results = {}
    
    for name, check_func in checks:
        try:
            results[name] = check_func()
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {name}: {e}")
            results[name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    print("\n" + "=" * 50)
    print("üìã –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:")
    
    all_good = True
    for name, status in results.items():
        icon = "‚úÖ" if status else "‚ùå"
        print(f"  {icon} {name}")
        if not status:
            all_good = False
    
    if all_good:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: make add-data")
    else:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π.")

if __name__ == "__main__":
    main()
