#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import json
import random
from pathlib import Path
from generate_data import DataGenerator
from data_templates import WOOD_TYPES, CHAT_MESSAGES_BUYER, CHAT_MESSAGES_SELLER

def show_data_samples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö WoodenBoardsShop")
    print("=" * 70)
    
    generator = DataGenerator()
    
    print("\nüìä –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö:")
    total_records = 0
    for entity, count in generator.counts.items():
        print(f"   {entity:20} {count:>6} –∑–∞–ø–∏—Å–µ–π")
        total_records += count
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –¥–æ—Å–∫–∏ (–æ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    images_count = generator.counts['products']  # –ü–æ –æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –Ω–∞ —Ç–æ–≤–∞—Ä
    boards_count = images_count * 2  # –í —Å—Ä–µ–¥–Ω–µ–º 2 –¥–æ—Å–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    total_records += images_count + boards_count
    
    print(f"   {'images':20} {images_count:>6} –∑–∞–ø–∏—Å–µ–π")
    print(f"   {'wooden_boards':20} {boards_count:>6} –∑–∞–ø–∏—Å–µ–π")
    print(f"   {'-' * 20} {'-' * 6}")
    print(f"   {'–ò–¢–û–ì–û':20} {total_records:>6} –∑–∞–ø–∏—Å–µ–π")
    
    print(f"\nüñºÔ∏è –î–æ—Å—Ç—É–ø–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(list(generator.images_source.glob('*.jpg')))}")
    
    print("\nüå≤ –ü—Ä–∏–º–µ—Ä—ã —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã:")
    for i, wood_type in enumerate(WOOD_TYPES[:5], 1):
        print(f"   {i}. {wood_type['neme']} - {wood_type['description']}")
    print(f"   ... –∏ –µ—â–µ {len(WOOD_TYPES) - 5} —Ç–∏–ø–æ–≤")
    
    print("\nüì¶ –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤:")
    from data_templates import PRODUCT_TITLE_TEMPLATES, BOARD_DIMENSIONS, BOARD_LENGTHS
    
    for i in range(3):
        wood_name = random.choice(WOOD_TYPES)['neme']
        width, height = random.choice(BOARD_DIMENSIONS)
        length = random.choice(BOARD_LENGTHS)
        template = random.choice(PRODUCT_TITLE_TEMPLATES)
        title = template.format(wood_type=wood_name, width=width, height=height, length=length)
        print(f"   ‚Ä¢ {title}")
    
    print("\nüè† –ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:")
    for i in range(3):
        address = generator.generate_pickup_address()
        print(f"   ‚Ä¢ {address}")
    
    print("\nüí¨ –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö:")
    print("   –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏:")
    for msg in random.sample(CHAT_MESSAGES_BUYER, 2):
        print(f"     - {msg}")
    print("   –ü—Ä–æ–¥–∞–≤—Ü—ã:")
    for msg in random.sample(CHAT_MESSAGES_SELLER, 2):
        print(f"     - {msg}")

def show_api_endpoints():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç API endpoints, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"""
    print("\nüîó API Endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:")
    endpoints = [
        "POST /api/v1/wood-types/",
        "POST /api/v1/wood-type-prices/",
        "POST /api/v1/buyers/",
        "POST /api/v1/sellers/",
        "POST /api/v1/products/",
        "POST /api/v1/images/",
        "POST /api/v1/wooden-boards/",
        "POST /api/v1/chat-threads/",
        "POST /api/v1/chat-messages/"
    ]
    
    for endpoint in endpoints:
        print(f"   {endpoint}")

def show_data_relationships():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏"""
    print("\nüîó –°–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏:")
    relationships = [
        "WoodType ‚Üí WoodTypePrice (—Ü–µ–Ω—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã)",
        "Seller ‚Üí Product (—Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞)",
        "WoodType ‚Üí Product (—Ç–∏–ø –¥—Ä–µ–≤–µ—Å–∏–Ω—ã —Ç–æ–≤–∞—Ä–∞)",
        "Product ‚Üí Image (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞)",
        "Image ‚Üí WoodenBoard (–∞–Ω–∞–ª–∏–∑ –¥–æ—Å–æ–∫ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)",
        "Buyer + Seller ‚Üí ChatThread (–ø–æ—Ç–æ–∫–∏ –æ–±—â–µ–Ω–∏—è)",
        "ChatThread ‚Üí ChatMessage (—Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ)"
    ]
    
    for rel in relationships:
        print(f"   ‚Ä¢ {rel}")

def show_usage_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüõ†Ô∏è –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("\n   –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:")
    print("   $ make add-data     # –°–æ–∑–¥–∞—Ç—å –≤—Å–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    print("   $ make rm-data      # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
    
    print("\n   –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("   $ cd data-generator")
    print("   $ python test_generator.py      # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("   $ python generate_data.py       # –°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("   $ python remove_data.py         # –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    print("\n   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (data-generator/.env):")
    print("   API_BASE_URL=http://localhost:8000/api/v1")
    print("   PRODUCTS_COUNT=350")
    print("   BUYERS_COUNT=75")
    print("   SELLERS_COUNT=25")

def show_safety_features():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüõ°Ô∏è –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    features = [
        "UUID –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ - –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ generated_uuids.json",
        "–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - –∫–æ–º–∞–Ω–¥–∞ rm-data —É–¥–∞–ª—è–µ—Ç –í–°–ï —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏",
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ - –ø—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏",
        "–ò–∑–æ–ª—è—Ü–∏—è —Ñ–∞–π–ª–æ–≤ - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É",
        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö —Å–±–æ—è—Ö"
    ]
    
    for feature in features:
        print(f"   ‚úì {feature}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    show_data_samples()
    show_api_endpoints()
    show_data_relationships()
    show_usage_examples()
    show_safety_features()
    
    print("\n" + "=" * 70)
    print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("\nüí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:")
    print("   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend API –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: make add-data")
    print("   3. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (~5-10 –º–∏–Ω—É—Ç)")
    print("   4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    print("\nüóëÔ∏è –î–ª—è –æ—á–∏—Å—Ç–∫–∏: make rm-data")

if __name__ == "__main__":
    main()
