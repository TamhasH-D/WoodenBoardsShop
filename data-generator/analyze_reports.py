#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import json
import glob
from datetime import datetime
from pathlib import Path

def load_reports():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    report_files = glob.glob('generation_report_*.json')
    reports = []
    
    for file_path in report_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                report = json.load(f)
                report['file'] = file_path
                reports.append(report)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    reports.sort(key=lambda x: x.get('timestamp', ''))
    return reports

def analyze_performance(reports):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    if not reports:
        print("üìä –ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'–î–∞—Ç–∞':<12} {'–ü—Ä–æ—Ñ–∏–ª—å':<10} {'–ó–∞–ø–∏—Å–µ–π':<8} {'–í—Ä–µ–º—è':<8} {'–ó–∞–ø—Ä–æ—Å—ã':<8} {'–û—à–∏–±–∫–∏':<7} {'–£—Å–ø–µ—Ö%':<7}")
    print("-" * 60)
    
    total_records = 0
    total_time = 0
    total_requests = 0
    total_errors = 0
    
    for report in reports:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            timestamp = datetime.fromisoformat(report['timestamp'].replace('Z', '+00:00'))
            date_str = timestamp.strftime('%d.%m.%Y')
        except:
            date_str = 'Unknown'
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
        actual_counts = report.get('actual_counts', {})
        records = sum(count for count in actual_counts.values() if isinstance(count, int))
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = report.get('stats', {})
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        start_time = stats.get('start_time')
        end_time = stats.get('end_time')
        duration = 'N/A'
        
        if start_time and end_time:
            try:
                start = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                end = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
                duration_seconds = (end - start).total_seconds()
                duration = f"{duration_seconds/60:.1f}–º"
                total_time += duration_seconds
            except:
                pass
        
        # –ó–∞–ø—Ä–æ—Å—ã –∏ –æ—à–∏–±–∫–∏
        requests = stats.get('total_requests', 0)
        errors = stats.get('failed_requests', 0)
        success_rate = ((requests - errors) / requests * 100) if requests > 0 else 0
        
        # –ü—Ä–æ—Ñ–∏–ª—å
        profile = report.get('profile', 'unknown')
        
        print(f"{date_str:<12} {profile:<10} {records:<8,} {duration:<8} {requests:<8} {errors:<7} {success_rate:<6.1f}%")
        
        total_records += records
        total_requests += requests
        total_errors += errors
    
    print("-" * 60)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_success_rate = ((total_requests - total_errors) / total_requests * 100) if total_requests > 0 else 0
    avg_time = total_time / len(reports) / 60 if reports else 0
    
    print(f"{'–ò–¢–û–ì–û':<12} {'':<10} {total_records:<8,} {avg_time:<7.1f}–º {total_requests:<8} {total_errors:<7} {avg_success_rate:<6.1f}%")

def analyze_trends(reports):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if len(reports) < 2:
        return
    
    print(f"\nüìä –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ –æ—Ç—á–µ—Ç–∞
    latest = reports[-1]
    previous = reports[-2]
    
    latest_stats = latest.get('stats', {})
    previous_stats = previous.get('stats', {})
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    latest_time = latest_stats.get('start_time'), latest_stats.get('end_time')
    previous_time = previous_stats.get('start_time'), previous_stats.get('end_time')
    
    if all(latest_time) and all(previous_time):
        try:
            latest_duration = (datetime.fromisoformat(latest_time[1].replace('Z', '+00:00')) - 
                             datetime.fromisoformat(latest_time[0].replace('Z', '+00:00'))).total_seconds()
            previous_duration = (datetime.fromisoformat(previous_time[1].replace('Z', '+00:00')) - 
                               datetime.fromisoformat(previous_time[0].replace('Z', '+00:00'))).total_seconds()
            
            time_change = ((latest_duration - previous_duration) / previous_duration * 100)
            time_icon = "üìà" if time_change > 0 else "üìâ" if time_change < 0 else "‚û°Ô∏è"
            print(f"  {time_icon} –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {time_change:+.1f}%")
        except:
            pass
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    latest_success = ((latest_stats.get('total_requests', 0) - latest_stats.get('failed_requests', 0)) / 
                     latest_stats.get('total_requests', 1) * 100)
    previous_success = ((previous_stats.get('total_requests', 0) - previous_stats.get('failed_requests', 0)) / 
                       previous_stats.get('total_requests', 1) * 100)
    
    success_change = latest_success - previous_success
    success_icon = "üìà" if success_change > 0 else "üìâ" if success_change < 0 else "‚û°Ô∏è"
    print(f"  {success_icon} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤: {success_change:+.1f}%")

def show_profile_statistics(reports):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º"""
    if not reports:
        return
    
    print(f"\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º:")
    
    profile_stats = {}
    
    for report in reports:
        profile = report.get('profile', 'unknown')
        if profile not in profile_stats:
            profile_stats[profile] = {
                'count': 0,
                'total_records': 0,
                'total_time': 0,
                'total_requests': 0,
                'total_errors': 0
            }
        
        stats = report.get('stats', {})
        actual_counts = report.get('actual_counts', {})
        
        profile_stats[profile]['count'] += 1
        profile_stats[profile]['total_records'] += sum(count for count in actual_counts.values() if isinstance(count, int))
        profile_stats[profile]['total_requests'] += stats.get('total_requests', 0)
        profile_stats[profile]['total_errors'] += stats.get('failed_requests', 0)
        
        # –í—Ä–µ–º—è
        start_time = stats.get('start_time')
        end_time = stats.get('end_time')
        if start_time and end_time:
            try:
                start = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
                end = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
                duration = (end - start).total_seconds()
                profile_stats[profile]['total_time'] += duration
            except:
                pass
    
    print(f"{'–ü—Ä–æ—Ñ–∏–ª—å':<12} {'–ó–∞–ø—É—Å–∫–æ–≤':<9} {'–°—Ä.–∑–∞–ø–∏—Å–µ–π':<10} {'–°—Ä.–≤—Ä–µ–º—è':<9} {'–£—Å–ø–µ—Ö%':<7}")
    print("-" * 50)
    
    for profile, stats in profile_stats.items():
        avg_records = stats['total_records'] // stats['count'] if stats['count'] > 0 else 0
        avg_time = stats['total_time'] / stats['count'] / 60 if stats['count'] > 0 else 0
        success_rate = ((stats['total_requests'] - stats['total_errors']) / 
                       stats['total_requests'] * 100) if stats['total_requests'] > 0 else 0
        
        print(f"{profile:<12} {stats['count']:<9} {avg_records:<10,} {avg_time:<8.1f}–º {success_rate:<6.1f}%")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    reports = load_reports()
    
    if not reports:
        print("‚ùå –û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(reports)} –æ—Ç—á–µ—Ç–æ–≤")
    
    analyze_performance(reports)
    analyze_trends(reports)
    show_profile_statistics(reports)
    
    print(f"\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    print(f"  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å 'small' –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print(f"  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ –æ—à–∏–±–æ–∫")
    print(f"  - –£–≤–µ–ª–∏—á—å—Ç–µ REQUEST_TIMEOUT –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º API")

if __name__ == "__main__":
    main()
