#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
"""

import os
import json
from pathlib import Path
from generate_data import DataGenerator

def test_generator_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞...")
    
    generator = DataGenerator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    assert generator.api_base == "http://localhost:8000/api/v1"
    assert generator.counts['wood_types'] == 12
    assert generator.counts['products'] == 350
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    assert generator.images_source.exists(), f"–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {generator.images_source}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_files = list(generator.images_source.glob('*.jpg')) + list(generator.images_source.glob('*.png'))
    assert len(image_files) > 0, "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"‚úÖ API URL: {generator.api_base}")
    print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {sum(generator.counts.values())} –∑–∞–ø–∏—Å–µ–π")

def test_data_templates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    from data_templates import WOOD_TYPES, WOOD_PRICE_RANGES, PICKUP_CITIES
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã
    assert len(WOOD_TYPES) >= 12, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã"
    for wood_type in WOOD_TYPES:
        assert 'neme' in wood_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'neme'"
        assert 'description' in wood_type, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'description'"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã —Ü–µ–Ω
    for wood_type in WOOD_TYPES:
        wood_name = wood_type['neme']
        assert wood_name in WOOD_PRICE_RANGES, f"–ù–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω –¥–ª—è {wood_name}"
        price_range = WOOD_PRICE_RANGES[wood_name]
        assert len(price_range) == 2, f"–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è {wood_name}"
        assert price_range[0] < price_range[1], f"–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Ü–µ–Ω –¥–ª—è {wood_name}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–æ–¥–∞
    assert len(PICKUP_CITIES) > 10, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ—Ä–æ–¥–æ–≤"
    
    print(f"‚úÖ {len(WOOD_TYPES)} —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")
    print(f"‚úÖ {len(WOOD_PRICE_RANGES)} –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ —Ü–µ–Ω")
    print(f"‚úÖ {len(PICKUP_CITIES)} –≥–æ—Ä–æ–¥–æ–≤")

def test_address_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–¥—Ä–µ—Å–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–æ–≤...")
    
    generator = DataGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤
    addresses = []
    for _ in range(5):
        address = generator.generate_pickup_address()
        addresses.append(address)
        assert address.startswith("–≥. "), f"–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–≥. ': {address}"
        assert ", " in address, f"–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ: {address}"
    
    print("‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∞–¥—Ä–µ—Å–æ–≤:")
    for addr in addresses:
        print(f"   {addr}")

def test_uuid_storage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ UUID"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è UUID...")
    
    generator = DataGenerator()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    generator.generated_data['wood_types'] = [
        {'id': 'test-uuid-1', 'neme': '–¢–µ—Å—Ç1'},
        {'id': 'test-uuid-2', 'neme': '–¢–µ—Å—Ç2'}
    ]
    generator.generated_data['buyers'] = ['buyer-uuid-1', 'buyer-uuid-2']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    generator.save_progress()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    assert Path('generated_uuids.json').exists(), "–§–∞–π–ª generated_uuids.json –Ω–µ —Å–æ–∑–¥–∞–Ω"
    
    # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    with open('generated_uuids.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    assert 'wood_types' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è wood_types"
    assert 'buyers' in data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è buyers"
    assert len(data['wood_types']) == 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ wood_types"
    assert len(data['buyers']) == 2, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ buyers"
    
    print("‚úÖ UUID –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ JSON")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    with open('generated_uuids.json', 'w', encoding='utf-8') as f:
        json.dump({}, f)

def test_image_copying():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    generator = DataGenerator()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    source_images = list(generator.images_source.glob('*.jpg'))
    assert len(source_images) > 0, "–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_upload_dir = Path('./test_images')
    test_upload_dir.mkdir(exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    import shutil
    from uuid import uuid4
    
    source_image = source_images[0]
    test_filename = f"{uuid4()}.jpg"
    target_path = test_upload_dir / test_filename
    
    shutil.copy2(source_image, target_path)
    
    assert target_path.exists(), "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ"
    assert target_path.stat().st_size > 0, "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ"
    
    print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {test_filename}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É
    shutil.rmtree(test_upload_dir)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        test_generator_initialization()
        test_data_templates()
        test_address_generation()
        test_uuid_storage()
        test_image_copying()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
        print("   - –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        print("   - –®–∞–±–ª–æ–Ω—ã –¥–∞–Ω–Ω—ã—Ö –≤–∞–ª–∏–¥–Ω—ã")
        print("   - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã")
        print("   - UUID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("   - –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("\nüí° –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ: make add-data")
        print("üí° –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ: make rm-data")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        raise

if __name__ == "__main__":
    main()
