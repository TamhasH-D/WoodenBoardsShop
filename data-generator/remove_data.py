#!/usr/bin/env python3
"""
–£–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ WoodenBoardsShop
"""

import json
import os
import shutil
from pathlib import Path
import requests
from tqdm import tqdm
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class DataRemover:
    def __init__(self):
        self.api_base = os.getenv('API_BASE_URL', 'http://localhost:8000/api/v1')
        self.timeout = int(os.getenv('REQUEST_TIMEOUT', '30'))
        self.images_upload = Path(os.getenv('IMAGES_UPLOAD_DIR', './uploaded_images'))
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö
        self.generated_data = self.load_generated_data()

    def load_generated_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å—è—Ö"""
        try:
            with open('generated_uuids.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª generated_uuids.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ generated_uuids.json")
            return {}

    def make_request(self, method, endpoint, data=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.api_base}{endpoint}"
        try:
            response = requests.request(method, url, json=data, timeout=self.timeout)
            response.raise_for_status()
            return response.json() if response.content else None
        except requests.exceptions.RequestException as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ 404 (–∑–∞–ø–∏—Å—å —É–∂–µ —É–¥–∞–ª–µ–Ω–∞)
            if hasattr(e, 'response') and e.response is not None and e.response.status_code == 404:
                return None
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            if hasattr(e, 'response') and e.response is not None:
                print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            raise

    def remove_chat_messages(self):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
        if not self.generated_data.get('chat_messages'):
            print("üìù –°–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üìù –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞...")
        success_count = 0
        
        for message_id in tqdm(self.generated_data['chat_messages']):
            try:
                self.make_request('DELETE', f'/chat-messages/{message_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞")

    def remove_chat_threads(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ—Ç–æ–∫–∏ —á–∞—Ç–∞"""
        if not self.generated_data.get('chat_threads'):
            print("üí¨ –ü–æ—Ç–æ–∫–∏ —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üí¨ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–∞...")
        success_count = 0
        
        for thread_data in tqdm(self.generated_data['chat_threads']):
            thread_id = thread_data if isinstance(thread_data, str) else thread_data.get('id')
            if thread_id:
                try:
                    self.make_request('DELETE', f'/chat-threads/{thread_id}')
                    success_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ {thread_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} –ø–æ—Ç–æ–∫–æ–≤ —á–∞—Ç–∞")

    def remove_wooden_boards(self):
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫"""
        if not self.generated_data.get('wooden_boards'):
            print("ü™µ –ó–∞–ø–∏—Å–∏ –¥–æ—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("ü™µ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –¥–æ—Å–æ–∫...")
        success_count = 0
        
        for board_id in tqdm(self.generated_data['wooden_boards']):
            try:
                self.make_request('DELETE', f'/wooden-boards/{board_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ—Å–∫–∏ {board_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} –∑–∞–ø–∏—Å–µ–π –¥–æ—Å–æ–∫")

    def remove_images(self):
        """–£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î –∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if not self.generated_data.get('images'):
            print("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üñºÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        success_count = 0
        
        for image_data in tqdm(self.generated_data['images']):
            image_id = image_data if isinstance(image_data, str) else image_data.get('id')
            filename = image_data.get('filename') if isinstance(image_data, dict) else None
            
            if image_id:
                try:
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                    self.make_request('DELETE', f'/images/{image_id}')
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
                    if filename:
                        file_path = self.images_upload / filename
                        if file_path.exists():
                            file_path.unlink()
                    
                    success_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    def remove_products(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã"""
        if not self.generated_data.get('products'):
            print("üì¶ –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üì¶ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        success_count = 0
        
        for product_id in tqdm(self.generated_data['products']):
            try:
                self.make_request('DELETE', f'/products/{product_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} —Ç–æ–≤–∞—Ä–æ–≤")

    def remove_sellers(self):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"""
        if not self.generated_data.get('sellers'):
            print("üè™ –ü—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üè™ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤...")
        success_count = 0
        
        for seller_id in tqdm(self.generated_data['sellers']):
            try:
                self.make_request('DELETE', f'/sellers/{seller_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞ {seller_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} –ø—Ä–æ–¥–∞–≤—Ü–æ–≤")

    def remove_buyers(self):
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
        if not self.generated_data.get('buyers'):
            print("üë• –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üë• –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...")
        success_count = 0
        
        for buyer_id in tqdm(self.generated_data['buyers']):
            try:
                self.make_request('DELETE', f'/buyers/{buyer_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π")

    def remove_wood_type_prices(self):
        """–£–¥–∞–ª—è–µ—Ç —Ü–µ–Ω—ã –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É"""
        if not self.generated_data.get('wood_type_prices'):
            print("üí∞ –¶–µ–Ω—ã –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üí∞ –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É...")
        success_count = 0
        
        for price_id in tqdm(self.generated_data['wood_type_prices']):
            try:
                self.make_request('DELETE', f'/wood-type-prices/{price_id}')
                success_count += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–Ω—ã {price_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} —Ü–µ–Ω –Ω–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—É")

    def remove_wood_types(self):
        """–£–¥–∞–ª—è–µ—Ç —Ç–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã"""
        if not self.generated_data.get('wood_types'):
            print("üå≤ –¢–∏–ø—ã –¥—Ä–µ–≤–µ—Å–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üå≤ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã...")
        success_count = 0
        
        for wood_type_data in tqdm(self.generated_data['wood_types']):
            wood_type_id = wood_type_data if isinstance(wood_type_data, str) else wood_type_data.get('id')
            if wood_type_id:
                try:
                    self.make_request('DELETE', f'/wood-types/{wood_type_id}')
                    success_count += 1
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã {wood_type_id}: {e}")
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {success_count} —Ç–∏–ø–æ–≤ –¥—Ä–µ–≤–µ—Å–∏–Ω—ã")

    def cleanup_files(self):
        """–û—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if self.images_upload.exists():
            try:
                shutil.rmtree(self.images_upload)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ {self.images_upload}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {self.images_upload}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —Å UUID
        try:
            with open('generated_uuids.json', 'w', encoding='utf-8') as f:
                json.dump({}, f)
            print("‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª generated_uuids.json")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–∞ generated_uuids.json: {e}")

    def run_removal(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.generated_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        print("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print(f"API: {self.api_base}")
        print("–î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        for entity, data in self.generated_data.items():
            if data:
                print(f"  - {entity}: {len(data)}")
        print()
        
        try:
            # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            self.remove_chat_messages()
            self.remove_chat_threads()
            self.remove_wooden_boards()
            self.remove_images()
            self.remove_products()
            self.remove_sellers()
            self.remove_buyers()
            self.remove_wood_type_prices()
            self.remove_wood_types()
            
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
            self.cleanup_files()
            
            print("\nüéâ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            raise


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    remover = DataRemover()
    remover.run_removal()


if __name__ == "__main__":
    main()
