#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FUNCTIONAL_TESTS_DIR="functional_tests"
TEST_COMPOSE_FILE="$FUNCTIONAL_TESTS_DIR/docker-compose.test.yaml"
TEST_PROJECT_NAME="diplom-functional-tests"
TIMEOUT=300  # 5 –º–∏–Ω—É—Ç

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if [ ! -f "$TEST_COMPOSE_FILE" ]; then
        log_error "–§–∞–π–ª $TEST_COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    log_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        log "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts..."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        if curl -s -f "http://localhost:8000/health" >/dev/null 2>&1; then
            log_success "Backend API –≥–æ—Ç–æ–≤"
            break
        fi
        
        if [ $attempt -eq $max_attempts ]; then
            log_error "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
            return 1
        fi
        
        sleep 10
        ((attempt++))
    done
    
    log_success "–°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_service_health() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services=(
        "Backend API:http://localhost:8000/health"
        "Admin Frontend:http://localhost:8080"
        "Seller Frontend:http://localhost:8081"
        "Buyer Frontend:http://localhost:8082"
    )
    
    local all_healthy=true
    
    for service in "${services[@]}"; do
        local name=$(echo "$service" | cut -d: -f1)
        local url=$(echo "$service" | cut -d: -f2-)
        
        if curl -s -f "$url" >/dev/null 2>&1; then
            echo -e "  ${GREEN}‚úÖ $name${NC} - –¥–æ—Å—Ç—É–ø–µ–Ω"
        else
            echo -e "  ${RED}‚ùå $name${NC} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
            all_healthy=false
        fi
    done
    
    if [ "$all_healthy" = true ]; then
        log_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
        return 0
    else
        log_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
run_tests() {
    local test_type="${1:-all}"
    local pytest_args="${2:-}"
    
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (—Ç–∏–ø: $test_type)..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    cd "$FUNCTIONAL_TESTS_DIR" && docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" down --remove-orphans 2>/dev/null || true
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    cd "$FUNCTIONAL_TESTS_DIR" && docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" up -d --remove-orphans
    
    # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if ! wait_for_services; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
        cleanup_on_error
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    check_service_health || log_warning "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤..."
    local test_exit_code=0
    
    cd "$FUNCTIONAL_TESTS_DIR" && \
        TEST_TYPE="$test_type" \
        PYTEST_ARGS="$pytest_args" \
        timeout "$TIMEOUT" docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" run --rm functional-tests || test_exit_code=$?
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    cd "$FUNCTIONAL_TESTS_DIR" && docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" down --remove-orphans
    
    if [ $test_exit_code -eq 0 ]; then
        log_success "–¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $test_exit_code)"
    fi
    
    return $test_exit_code
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
cleanup_on_error() {
    log_warning "–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏..."
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    log "–õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    cd "$FUNCTIONAL_TESTS_DIR" && docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" logs --tail=50 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    cd "$FUNCTIONAL_TESTS_DIR" && docker-compose -f docker-compose.test.yaml -p "$TEST_PROJECT_NAME" down --remove-orphans 2>/dev/null || true
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
show_results() {
    log "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    echo ""
    echo -e "${BLUE}üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤:${NC}"
    echo "  ‚Ä¢ HTML –æ—Ç—á–µ—Ç—ã: $FUNCTIONAL_TESTS_DIR/reports/"
    echo "  ‚Ä¢ –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤: $FUNCTIONAL_TESTS_DIR/logs/"
    echo "  ‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: $FUNCTIONAL_TESTS_DIR/screenshots/"
    echo ""
    echo -e "${BLUE}üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC}"
    echo "  ‚Ä¢ make test-logs-stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"
    echo "  ‚Ä¢ make test-reports - –æ—Ç–∫—Ä—ã—Ç—å HTML –æ—Ç—á–µ—Ç—ã"
    echo "  ‚Ä¢ cd $FUNCTIONAL_TESTS_DIR && python utils/log_analyzer.py --latest - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if [ -d "$FUNCTIONAL_TESTS_DIR/logs" ] && [ "$(ls -A $FUNCTIONAL_TESTS_DIR/logs/)" ]; then
        local latest_json=$(ls -t $FUNCTIONAL_TESTS_DIR/logs/test_results_*.json 2>/dev/null | head -1)
        if [ -n "$latest_json" ]; then
            echo ""
            echo -e "${YELLOW}üìà –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:${NC}"
            cd "$FUNCTIONAL_TESTS_DIR" && python3 -c "
import json
try:
    with open('$latest_json', 'r') as f:
        data = json.load(f)
    stats = data['statistics']
    total = stats['total']
    passed = stats['passed']
    failed = stats['failed']
    skipped = stats['skipped']
    success_rate = (passed / total * 100) if total > 0 else 0
    print(f'  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}')
    print(f'  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}')
    print(f'  ‚ùå –£–ø–∞–ª–æ: {failed}')
    print(f'  ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}')
    print(f'  üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%')
except Exception as e:
    print(f'  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}')
" 2>/dev/null || echo "  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
        fi
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
trap cleanup_on_error INT TERM

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local test_type="${1:-all}"
    local pytest_args="${2:-}"
    
    echo -e "${GREEN}üß™ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤${NC}"
    echo -e "${YELLOW}================================${NC}"
    echo ""
    
    check_dependencies
    
    if run_tests "$test_type" "$pytest_args"; then
        log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        show_results
        exit 0
    else
        log_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏"
        show_results
        exit 1
    fi
}

# –°–ø—Ä–∞–≤–∫–∞
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [TEST_TYPE] [PYTEST_ARGS]"
    echo ""
    echo "TEST_TYPE:"
    echo "  all          - –í—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    echo "  api          - –¢–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã"
    echo "  browser      - –¢–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "  integration  - –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo ""
    echo "PYTEST_ARGS:"
    echo "  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è pytest"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                           # –í—Å–µ —Ç–µ—Å—Ç—ã"
    echo "  $0 api                       # –¢–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã"
    echo "  $0 browser '-v -s'           # –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"
    echo "  $0 all '--tb=short'          # –í—Å–µ —Ç–µ—Å—Ç—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º traceback"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
