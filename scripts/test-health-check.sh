#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ -f ".env" ]; then
    source .env
fi

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
BACKEND_PORT=${BACKEND_PORT:-8000}
FRONTEND_ADMIN_PORT=${FRONTEND_ADMIN_PORT:-8080}
FRONTEND_SELLER_PORT=${FRONTEND_SELLER_PORT:-8081}
FRONTEND_BUYER_PORT=${FRONTEND_BUYER_PORT:-8082}
PROSTO_BOARD_PORT=${PROSTO_BOARD_PORT:-8001}
DETECT_PORT=${DETECT_PORT:-8002}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ‚úÖ${NC} $1"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ùå${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è${NC} $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    local port=$1
    local service_name=$2
    
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        echo -e "  ${GREEN}‚úÖ –ü–æ—Ä—Ç $port${NC} ($service_name) - –∑–∞–Ω—è—Ç"
        return 0
    else
        echo -e "  ${RED}‚ùå –ü–æ—Ä—Ç $port${NC} ($service_name) - —Å–≤–æ–±–æ–¥–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å–µ—Ä–≤–∏—Å–∞
check_http_service() {
    local url=$1
    local service_name=$2
    local timeout=${3:-5}
    
    if curl -s -f --max-time "$timeout" "$url" >/dev/null 2>&1; then
        echo -e "  ${GREEN}‚úÖ $service_name${NC} - –¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        return 0
    else
        echo -e "  ${RED}‚ùå $service_name${NC} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($url)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker
check_docker() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    log_success "Docker —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker Compose
check_docker_compose() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose..."
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 1
    fi
    
    log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config_files() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local files=(
        "docker-compose.yaml"
        "functional_tests/docker-compose.test.yaml"
        "functional_tests/Dockerfile"
        "functional_tests/requirements.txt"
        ".env"
    )
    
    local all_exist=true
    
    for file in "${files[@]}"; do
        if [ -f "$file" ]; then
            echo -e "  ${GREEN}‚úÖ $file${NC} - –Ω–∞–π–¥–µ–Ω"
        else
            echo -e "  ${RED}‚ùå $file${NC} - –Ω–µ –Ω–∞–π–¥–µ–Ω"
            all_exist=false
        fi
    done
    
    if [ "$all_exist" = true ]; then
        log_success "–í—Å–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω—ã"
        return 0
    else
        log_error "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤
check_ports() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤..."
    
    local ports=(
        "$BACKEND_PORT:Backend API"
        "$FRONTEND_ADMIN_PORT:Admin Frontend"
        "$FRONTEND_SELLER_PORT:Seller Frontend"
        "$FRONTEND_BUYER_PORT:Buyer Frontend"
        "$PROSTO_BOARD_PORT:YOLO Backend"
        "$DETECT_PORT:YOLO Detect"
    )
    
    local any_running=false
    
    for port_info in "${ports[@]}"; do
        local port=$(echo "$port_info" | cut -d: -f1)
        local service=$(echo "$port_info" | cut -d: -f2)
        
        if check_port "$port" "$service"; then
            any_running=true
        fi
    done
    
    if [ "$any_running" = true ]; then
        log_success "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã"
    else
        log_warning "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤
check_http_services() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services=(
        "http://localhost:$BACKEND_PORT/health:Backend API Health"
        "http://localhost:$BACKEND_PORT/docs:Backend API Docs"
        "http://localhost:$FRONTEND_ADMIN_PORT:Admin Frontend"
        "http://localhost:$FRONTEND_SELLER_PORT:Seller Frontend"
        "http://localhost:$FRONTEND_BUYER_PORT:Buyer Frontend"
        "http://localhost:$PROSTO_BOARD_PORT:YOLO Backend"
        "http://localhost:$DETECT_PORT:YOLO Detect"
    )
    
    local healthy_count=0
    local total_count=${#services[@]}
    
    for service in "${services[@]}"; do
        local url=$(echo "$service" | cut -d: -f1-2)
        local name=$(echo "$service" | cut -d: -f3)
        
        if check_http_service "$url" "$name" 3; then
            ((healthy_count++))
        fi
    done
    
    echo ""
    if [ $healthy_count -eq $total_count ]; then
        log_success "–í—Å–µ HTTP —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã ($healthy_count/$total_count)"
        return 0
    elif [ $healthy_count -gt 0 ]; then
        log_warning "–ß–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã HTTP —Å–µ—Ä–≤–∏—Å—ã ($healthy_count/$total_count)"
        return 1
    else
        log_error "HTTP —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ($healthy_count/$total_count)"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
check_containers() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if ! docker ps >/dev/null 2>&1; then
        log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        return 1
    fi
    
    local running_containers=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep -v "NAMES" | wc -l)
    
    if [ $running_containers -gt 0 ]; then
        echo -e "${GREEN}–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:${NC}"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | head -10
        log_success "–ù–∞–π–¥–µ–Ω–æ $running_containers –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    else
        log_warning "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
    
    local available_space=$(df . | awk 'NR==2 {print $4}')
    local available_gb=$((available_space / 1024 / 1024))
    
    if [ $available_gb -lt 1 ]; then
        log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${available_gb}GB –¥–æ—Å—Ç—É–ø–Ω–æ"
        return 1
    elif [ $available_gb -lt 5 ]; then
        log_warning "–ú–∞–ª–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${available_gb}GB –¥–æ—Å—Ç—É–ø–Ω–æ"
        return 1
    else
        log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: ${available_gb}GB –¥–æ—Å—Ç—É–ø–Ω–æ"
        return 0
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
check_memory() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏..."
    
    if command -v free >/dev/null 2>&1; then
        local available_mem=$(free -m | awk 'NR==2{printf "%.0f", $7}')
        
        if [ $available_mem -lt 512 ]; then
            log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: ${available_mem}MB –¥–æ—Å—Ç—É–ø–Ω–æ"
            return 1
        elif [ $available_mem -lt 1024 ]; then
            log_warning "–ú–∞–ª–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: ${available_mem}MB –¥–æ—Å—Ç—É–ø–Ω–æ"
            return 1
        else
            log_success "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: ${available_mem}MB –¥–æ—Å—Ç—É–ø–Ω–æ"
            return 0
        fi
    else
        log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
check_readiness() {
    local checks_passed=0
    local total_checks=8
    
    echo -e "${GREEN}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é${NC}"
    echo -e "${YELLOW}===============================================${NC}"
    echo ""
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    check_docker && ((checks_passed++)) || true
    check_docker_compose && ((checks_passed++)) || true
    check_config_files && ((checks_passed++)) || true
    check_disk_space && ((checks_passed++)) || true
    check_memory && ((checks_passed++)) || true
    check_ports && ((checks_passed++)) || true
    check_containers && ((checks_passed++)) || true
    check_http_services && ((checks_passed++)) || true
    
    echo ""
    echo -e "${YELLOW}===============================================${NC}"
    
    if [ $checks_passed -eq $total_checks ]; then
        log_success "–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é ($checks_passed/$total_checks)"
        echo ""
        echo -e "${GREEN}üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã:${NC}"
        echo "  ‚Ä¢ make test - –≤—Å–µ —Ç–µ—Å—Ç—ã"
        echo "  ‚Ä¢ make test-api - API —Ç–µ—Å—Ç—ã"
        echo "  ‚Ä¢ make test-browser - –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        echo "  ‚Ä¢ make test-integration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
        return 0
    elif [ $checks_passed -ge $((total_checks * 3 / 4)) ]; then
        log_warning "–°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é ($checks_passed/$total_checks)"
        echo ""
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º${NC}"
        return 1
    else
        log_error "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é ($checks_passed/$total_checks)"
        echo ""
        echo -e "${RED}‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã${NC}"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
show_help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–û–ü–¶–ò–ò]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  -h, --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo "  -q, --quiet    –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (—Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏)"
    echo "  -v, --verbose  –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º"
    echo ""
    echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."
    echo "–ü—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è: Docker, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, —Ä–µ—Å—É—Ä—Å—ã, —Å–µ—Ä–≤–∏—Å—ã."
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
QUIET=false
VERBOSE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -q|--quiet)
            QUIET=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        *)
            echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
            show_help
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if [ "$QUIET" = true ]; then
    check_readiness >/dev/null 2>&1
    exit $?
else
    check_readiness
    exit $?
fi
