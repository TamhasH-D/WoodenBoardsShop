#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
"""

import asyncio
import json
import websockets
import uuid
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WS_URL = "ws://localhost:8000/ws/chat"
THREAD_ID = str(uuid.uuid4())
BUYER_ID = str(uuid.uuid4())
SELLER_ID = str(uuid.uuid4())

async def test_buyer_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    uri = f"{WS_URL}/{THREAD_ID}?user_id={BUYER_ID}&user_type=buyer"
    print(f"üîµ Buyer connecting to: {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üîµ Buyer connected successfully!")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            test_message = {
                "type": "message",
                "message": "–ü—Ä–∏–≤–µ—Ç –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!",
                "message_id": str(uuid.uuid4()),
                "timestamp": datetime.now().isoformat()
            }
            
            await websocket.send(json.dumps(test_message))
            print(f"üîµ Buyer sent: {test_message['message']}")
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç—ã
            try:
                while True:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    data = json.loads(response)
                    print(f"üîµ Buyer received: {data}")
                    
                    if data.get('type') == 'message' and data.get('sender_type') == 'seller':
                        print("üîµ Buyer received message from seller!")
                        break
                        
            except asyncio.TimeoutError:
                print("üîµ Buyer timeout waiting for messages")
                
    except Exception as e:
        print(f"üîµ Buyer connection error: {e}")

async def test_seller_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"""
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –ø–µ—Ä–≤—ã–º
    await asyncio.sleep(1)
    
    uri = f"{WS_URL}/{THREAD_ID}?user_id={SELLER_ID}&user_type=seller"
    print(f"üü† Seller connecting to: {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üü† Seller connected successfully!")
            
            # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
            try:
                while True:
                    response = await asyncio.wait_for(websocket.recv(), timeout=10.0)
                    data = json.loads(response)
                    print(f"üü† Seller received: {data}")
                    
                    if data.get('type') == 'message' and data.get('sender_type') == 'buyer':
                        print("üü† Seller received message from buyer!")
                        
                        # –û—Ç–≤–µ—á–∞–µ–º
                        reply_message = {
                            "type": "message",
                            "message": "–ü—Ä–∏–≤–µ—Ç –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞! –ö–∞–∫ –¥–µ–ª–∞?",
                            "message_id": str(uuid.uuid4()),
                            "timestamp": datetime.now().isoformat()
                        }
                        
                        await websocket.send(json.dumps(reply_message))
                        print(f"üü† Seller sent: {reply_message['message']}")
                        break
                        
            except asyncio.TimeoutError:
                print("üü† Seller timeout waiting for messages")
                
    except Exception as e:
        print(f"üü† Seller connection error: {e}")

async def test_ping_pong():
    """–¢–µ—Å—Ç ping/pong –º–µ—Ö–∞–Ω–∏–∑–º–∞"""
    uri = f"{WS_URL}/{THREAD_ID}?user_id={str(uuid.uuid4())}&user_type=buyer"
    print(f"üèì Testing ping/pong: {uri}")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üèì Connected for ping/pong test")
            
            # –ñ–¥–µ–º ping –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            try:
                while True:
                    response = await asyncio.wait_for(websocket.recv(), timeout=35.0)
                    data = json.loads(response)
                    print(f"üèì Received: {data}")
                    
                    if data.get('type') == 'ping':
                        print("üèì Received ping, sending pong...")
                        pong_message = {
                            "type": "pong",
                            "timestamp": datetime.now().isoformat()
                        }
                        await websocket.send(json.dumps(pong_message))
                        print("üèì Pong sent!")
                        break
                        
            except asyncio.TimeoutError:
                print("üèì Timeout waiting for ping")
                
    except Exception as e:
        print(f"üèì Ping/pong test error: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ Starting WebSocket chat tests...")
    print(f"üìã Thread ID: {THREAD_ID}")
    print(f"üë§ Buyer ID: {BUYER_ID}")
    print(f"üè™ Seller ID: {SELLER_ID}")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        test_buyer_connection(),
        test_seller_connection(),
    ]
    
    try:
        await asyncio.gather(*tasks)
        print("-" * 50)
        print("‚úÖ Basic chat test completed!")
        
        # –¢–µ—Å—Ç ping/pong
        print("\nüèì Testing ping/pong mechanism...")
        await test_ping_pong()
        
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
    
    print("\nüèÅ All tests completed!")

if __name__ == "__main__":
    print("WebSocket Chat Test")
    print("==================")
    print("Make sure the backend server is running on localhost:8000")
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Test interrupted by user")
    except Exception as e:
        print(f"\nüí• Unexpected error: {e}")
