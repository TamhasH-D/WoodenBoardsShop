# Diplom Project Makefile
# Simple commands for development with .env support

# Load environment variables from .env file
ifneq (,$(wildcard ./.env))
    include .env
    export
endif

# Set default values if not defined in .env
BACKEND_PORT ?= 8000
FRONTEND_ADMIN_PORT ?= 8080
FRONTEND_SELLER_PORT ?= 8081
FRONTEND_BUYER_PORT ?= 8082
BACKEND_HOST ?= localhost

# Docker compose commands
COMPOSE := docker compose
BACKEND_DIR := backend/backend

.PHONY: help
help: ## Show available commands
	@echo "🚀 Diplom Project - Available Commands"
	@echo "======================================"
	@echo ""
	@echo "📦 Main Commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -v "^help:" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "🌐 Service URLs (from .env):"
	@echo "  Backend API:      http://$(BACKEND_HOST):$(BACKEND_PORT)"
	@echo "  API Docs:         http://$(BACKEND_HOST):$(BACKEND_PORT)/docs"
	@echo "  Admin Frontend:   http://$(BACKEND_HOST):$(FRONTEND_ADMIN_PORT)"
	@echo "  Seller Frontend:  http://$(BACKEND_HOST):$(FRONTEND_SELLER_PORT)"
	@echo "  Buyer Frontend:   http://$(BACKEND_HOST):$(FRONTEND_BUYER_PORT)"
	@echo ""
	@echo "⚙️  Configuration:"
	@echo "  .env file:        $(if $(wildcard ./.env),✅ Found,❌ Not found - using defaults)"
	@echo "  Backend Port:     $(BACKEND_PORT)"
	@echo "  Backend Host:     $(BACKEND_HOST)"

# ============================================================================
# 🚀 MAIN COMMANDS
# ============================================================================

.PHONY: up
up: ## Start all services
	$(COMPOSE) up -d

.PHONY: down
down: ## Stop all services
	$(COMPOSE) down

.PHONY: build
build: ## Build all services
	$(COMPOSE) build

.PHONY: rebuild
rebuild: down build up ## Rebuild and restart all services

.PHONY: logs
logs: ## Show logs from all services
	$(COMPOSE) logs -f

.PHONY: ps
ps: ## List running containers
	$(COMPOSE) ps

# ============================================================================
# 🔧 BACKEND COMMANDS
# ============================================================================

.PHONY: backend-up
backend-up: ## Start only backend services
	cd $(BACKEND_DIR) && $(COMPOSE) up -d

.PHONY: backend-down
backend-down: ## Stop backend services
	cd $(BACKEND_DIR) && $(COMPOSE) down

.PHONY: backend-logs
backend-logs: ## Show backend logs
	cd $(BACKEND_DIR) && $(COMPOSE) logs -f

.PHONY: backend-migrate
backend-migrate: ## Run database migrations
	cd $(BACKEND_DIR) && $(COMPOSE) exec api alembic upgrade head

# ============================================================================
# 🧹 CLEANUP & UTILITY
# ============================================================================

.PHONY: clean
clean: ## Clean Docker resources
	docker system prune -f

.PHONY: dev
dev: backend-up ## Quick start for development (backend only)
	@echo "🎯 Backend ready at http://$(BACKEND_HOST):$(BACKEND_PORT)/docs"

.PHONY: env
env: ## Show current environment variables from .env
	@echo "🔧 Current Environment Configuration"
	@echo "===================================="
	@echo ""
	@echo "📁 .env file status: $(if $(wildcard ./.env),✅ Found,❌ Not found)"
	@echo ""
	@echo "🌐 Service Configuration:"
	@echo "  BACKEND_HOST:           $(BACKEND_HOST)"
	@echo "  BACKEND_PORT:           $(BACKEND_PORT)"
	@echo "  FRONTEND_ADMIN_PORT:    $(FRONTEND_ADMIN_PORT)"
	@echo "  FRONTEND_SELLER_PORT:   $(FRONTEND_SELLER_PORT)"
	@echo "  FRONTEND_BUYER_PORT:    $(FRONTEND_BUYER_PORT)"
	@echo ""
	@echo "🗄️  Database Configuration:"
	@echo "  BACKEND_PG_HOST:        $(BACKEND_PG_HOST)"
	@echo "  BACKEND_PG_PORT:        $(BACKEND_PG_PORT)"
	@echo "  BACKEND_PG_DATABASE:    $(BACKEND_PG_DATABASE)"
	@echo "  BACKEND_PG_USER:        $(BACKEND_PG_USER)"
	@echo ""
	@echo "🔴 Redis Configuration:"
	@echo "  BACKEND_REDIS_HOST:     $(BACKEND_REDIS_HOST)"
	@echo "  BACKEND_REDIS_PORT:     $(BACKEND_REDIS_PORT)"

.PHONY: env-create
env-create: ## Create .env file with default values
	@if [ -f .env ]; then \
		echo "❌ .env file already exists. Use 'make env-reset' to overwrite."; \
	else \
		echo "📝 Creating .env file with default values..."; \
		echo "# Diplom Project Environment Variables" > .env; \
		echo "# Generated by 'make env-create'" >> .env; \
		echo "" >> .env; \
		echo "### Backend API Settings ###" >> .env; \
		echo "BACKEND_HOST=localhost" >> .env; \
		echo "BACKEND_PORT=8000" >> .env; \
		echo "BACKEND_DEBUG=true" >> .env; \
		echo "BACKEND_LOG_LEVEL=info" >> .env; \
		echo "" >> .env; \
		echo "### Database Configuration ###" >> .env; \
		echo "BACKEND_PG_HOST=postgres" >> .env; \
		echo "BACKEND_PG_PORT=5432" >> .env; \
		echo "BACKEND_PG_USER=backend" >> .env; \
		echo "BACKEND_PG_PASSWORD=backend" >> .env; \
		echo "BACKEND_PG_DATABASE=backend" >> .env; \
		echo "" >> .env; \
		echo "### Redis Configuration ###" >> .env; \
		echo "BACKEND_REDIS_HOST=redis" >> .env; \
		echo "BACKEND_REDIS_PORT=6379" >> .env; \
		echo "BACKEND_REDIS_PASSWORD=" >> .env; \
		echo "" >> .env; \
		echo "### Frontend Services Ports ###" >> .env; \
		echo "FRONTEND_ADMIN_PORT=8080" >> .env; \
		echo "FRONTEND_SELLER_PORT=8081" >> .env; \
		echo "FRONTEND_BUYER_PORT=8082" >> .env; \
		echo "✅ .env file created successfully!"; \
		echo "📝 Edit .env file to customize your configuration"; \
	fi

.PHONY: env-reset
env-reset: ## Reset .env file to default values (overwrites existing)
	@echo "🔄 Resetting .env file to default values..."
	@$(MAKE) --no-print-directory env-remove
	@$(MAKE) --no-print-directory env-create

.PHONY: env-remove
env-remove: ## Remove .env file
	@if [ -f .env ]; then \
		echo "🗑️  Removing .env file..."; \
		rm .env; \
		echo "✅ .env file removed"; \
	else \
		echo "ℹ️  .env file does not exist"; \
	fi