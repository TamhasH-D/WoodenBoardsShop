# Diplom Project Makefile
# Simple commands for development with .env support

# Load environment variables from .env file
ifneq (,$(wildcard ./.env))
    include .env
    export
endif

# Set default values if not defined in .env
BACKEND_PORT ?= 8000
FRONTEND_ADMIN_PORT ?= 8080
FRONTEND_SELLER_PORT ?= 8081
FRONTEND_BUYER_PORT ?= 8082
BACKEND_HOST ?= localhost

# Docker compose commands with environment variables
COMPOSE := docker compose --env-file .env
BACKEND_DIR := backend/backend

.PHONY: help
help: ## Show available commands
	@printf "\033[0;32müöÄ Diplom Project - Available Commands\033[0m\n"
	@printf "\033[1;33m======================================\033[0m\n"
	@printf "\n"
	@printf "\033[0;34müì¶ Main Commands:\033[0m\n"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -v "^help:" | grep -v "^help-test:" | grep -v "^test-" | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@printf "\n"
	@printf "\033[0;34müß™ Testing Commands:\033[0m\n"
	@grep -E '^test[a-zA-Z_-]*:.*?## .*$$' $(MAKEFILE_LIST) | head -12 | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-25s\033[0m %s\n", $$1, $$2}'
	@printf "  \033[0;32mhelp-test\033[0m                –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é\n"
	@printf "\n"
	@printf "\033[0;34müåê Service URLs (accessible from host system):\033[0m\n"
	@printf "  Backend API:      http://localhost:$(BACKEND_PORT)\n"
	@printf "  API Docs:         http://localhost:$(BACKEND_PORT)/docs\n"
	@printf "  Admin Frontend:   http://localhost:$(FRONTEND_ADMIN_PORT)\n"
	@printf "  Seller Frontend:  http://localhost:$(FRONTEND_SELLER_PORT)\n"
	@printf "  Buyer Frontend:   http://localhost:$(FRONTEND_BUYER_PORT)\n"
	@printf "  YOLO Backend:     http://localhost:$(PROSTO_BOARD_PORT)\n"
	@printf "  YOLO Detect:      http://localhost:$(DETECT_PORT)\n"

# ============================================================================
# üöÄ MAIN COMMANDS
# ============================================================================

.PHONY: up
up: ## Start all services
	$(COMPOSE) up -d

.PHONY: down
down: ## Stop all services
	$(COMPOSE) down

.PHONY: build
build: ## Build all services
	$(COMPOSE) build --no-cache

.PHONY: rebuild
rebuild: down  build up ## Rebuild and restart all services

.PHONY: logs
logs: ## Show logs from all services
	$(COMPOSE) logs -f

.PHONY: ps
ps: ## List running containers
	$(COMPOSE) ps

# ============================================================================
# üîß BACKEND COMMANDS
# ============================================================================

.PHONY: backend-up
backend-up: ## Start only backend services
	cd $(BACKEND_DIR) && docker compose --env-file ../../.env up -d

.PHONY: backend-down
backend-down: ## Stop backend services
	cd $(BACKEND_DIR) && docker compose down

.PHONY: backend-logs
backend-logs: ## Show backend logs
	cd $(BACKEND_DIR) && docker compose logs -f

.PHONY: backend-migrate
backend-migrate: ## Run database migrations
	cd $(BACKEND_DIR) && docker compose exec api alembic upgrade head

# ============================================================================
# üß™ FUNCTIONAL TESTS
# ============================================================================

# Colors disabled for compatibility

# Test configuration
FUNCTIONAL_TESTS_DIR := functional_tests
TEST_COMPOSE_FILE := $(FUNCTIONAL_TESTS_DIR)/docker-compose.test.yaml
TEST_PROJECT_NAME := diplom-functional-tests

# Check dependencies
.PHONY: check-test-deps
check-test-deps:
	@echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
	@command -v docker >/dev/null 2>&1 || { echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
	@command -v docker-compose >/dev/null 2>&1 || { echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; exit 1; }
	@[ -f "$(TEST_COMPOSE_FILE)" ] || { echo "‚ùå –§–∞–π–ª $(TEST_COMPOSE_FILE) –Ω–µ –Ω–∞–π–¥–µ–Ω"; exit 1; }
	@echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

.PHONY: help-test
help-test: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	@echo "$(GREEN)üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã - –°–ø—Ä–∞–≤–∫–∞$(NC)"
	@echo "$(YELLOW)========================================$(NC)"
	@echo ""
	@echo "$(BLUE)üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:$(NC)"
	@echo "  $(GREEN)make test$(NC)              - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-api$(NC)          - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-browser$(NC)      - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-integration$(NC)  - –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo ""
	@echo "$(BLUE)üîÑ –ö–æ–º–∞–Ω–¥—ã —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π (–ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ):$(NC)"
	@echo "  $(GREEN)make test-rebuild$(NC)      - –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
	@echo "  $(GREEN)make test-api-rebuild$(NC)  - –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
	@echo "  $(GREEN)make test-browser-rebuild$(NC) - –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
	@echo "  $(GREEN)make test-integration-rebuild$(NC) - –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π"
	@echo ""
	@echo "$(BLUE)‚ö° –ö–æ–º–∞–Ω–¥—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏:$(NC)"
	@echo "  $(GREEN)make test-quick$(NC)        - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-local$(NC)        - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ Docker)"
	@echo "  $(GREEN)make test-debug$(NC)        - –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"
	@echo "  $(GREEN)make test-coverage$(NC)     - –ó–∞–ø—É—Å–∫ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"
	@echo ""
	@echo "$(BLUE)üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º:$(NC)"
	@echo "  $(GREEN)make test-build$(NC)        - –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-up$(NC)           - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  $(GREEN)make test-down$(NC)         - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "  $(GREEN)make test-clean$(NC)        - –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
	@echo ""
	@echo "$(BLUE)üìä –†–∞–±–æ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:$(NC)"
	@echo "  $(GREEN)make test-logs$(NC)         - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-reports$(NC)      - –û—Ç–∫—Ä—ã—Ç–∏–µ HTML –æ—Ç—á–µ—Ç–æ–≤"
	@echo "  $(GREEN)make test-status$(NC)       - –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo ""
	@echo "$(BLUE)üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:$(NC)"
	@echo "  $(GREEN)make test-logs-latest$(NC)  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–µ—Å—Ç–æ–≤"
	@echo "  $(GREEN)make test-logs-tail$(NC)    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
	@echo "  $(GREEN)make test-logs-stats$(NC)   - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"

# ============================================================================
# üß™ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ============================================================================

.PHONY: test
test: check-test-deps ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (api + browser + integration)
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
	@TEST_TYPE=all $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-api
test-api: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ API —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üîå –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@TEST_TYPE=api $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-browser
test-browser: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@TEST_TYPE=browser $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-integration
test-integration: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@TEST_TYPE=integration $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-rebuild
test-rebuild: check-test-deps ## –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π –æ–±—Ä–∞–∑–æ–≤
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) test-build
	@TEST_TYPE=all $(MAKE) _run-tests-no-build
	@$(MAKE) _show-test-results

.PHONY: test-api-rebuild
test-api-rebuild: check-test-deps ## –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π –æ–±—Ä–∞–∑–æ–≤
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ API —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) test-build
	@TEST_TYPE=api $(MAKE) _run-tests-no-build
	@$(MAKE) _show-test-results

.PHONY: test-browser-rebuild
test-browser-rebuild: check-test-deps ## –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π –æ–±—Ä–∞–∑–æ–≤
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) test-build
	@TEST_TYPE=browser $(MAKE) _run-tests-no-build
	@$(MAKE) _show-test-results

.PHONY: test-integration-rebuild
test-integration-rebuild: check-test-deps ## –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π –æ–±—Ä–∞–∑–æ–≤
	@echo "$(YELLOW)üîÑ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ—Å–±–æ—Ä–∫–æ–π...$(NC)"
	@$(MAKE) test-build
	@TEST_TYPE=integration $(MAKE) _run-tests-no-build
	@$(MAKE) _show-test-results

# ============================================================================
# ‚ö° –ö–û–ú–ê–ù–î–´ –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –û–ü–¶–ò–Ø–ú–ò
# ============================================================================

.PHONY: test-quick
test-quick: check-test-deps ## –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@TEST_TYPE=api PYTEST_ARGS="-m critical" $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-local
test-local: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ (–±–µ–∑ Docker)
	@echo "$(YELLOW)üè† –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ...$(NC)"
	@if [ ! -d "$(FUNCTIONAL_TESTS_DIR)/venv" ]; then \
		echo "$(BLUE)üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...$(NC)"; \
		cd $(FUNCTIONAL_TESTS_DIR) && python3 -m venv venv; \
		cd $(FUNCTIONAL_TESTS_DIR) && source venv/bin/activate && pip install -r requirements.txt; \
	fi
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏...$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && source venv/bin/activate && \
		BACKEND_URL=http://localhost:$(BACKEND_PORT) \
		FRONTEND_ADMIN_URL=http://localhost:$(FRONTEND_ADMIN_PORT) \
		FRONTEND_SELLER_URL=http://localhost:$(FRONTEND_SELLER_PORT) \
		FRONTEND_BUYER_URL=http://localhost:$(FRONTEND_BUYER_PORT) \
		TEST_TYPE=${TEST_TYPE:-all} \
		pytest -v --html=reports/local_tests_report.html --self-contained-html
	@$(MAKE) _show-test-results

.PHONY: test-with-script
test-with-script: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
	@echo "$(YELLOW)üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç...$(NC)"
	@./scripts/test-runner.sh ${TEST_TYPE:-all} "${PYTEST_ARGS}"

.PHONY: test-health
test-health: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
	@./scripts/test-health-check.sh

.PHONY: test-debug
test-debug: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
	@echo "$(YELLOW)üêõ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏...$(NC)"
	@TEST_TYPE=${TEST_TYPE:-all} PYTEST_ARGS="-v -s --tb=long --capture=no" $(MAKE) _run-tests
	@$(MAKE) _show-test-results

.PHONY: test-coverage
test-coverage: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
	@echo "$(YELLOW)üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–∫—Ä—ã—Ç–∏–∏...$(NC)"
	@TEST_TYPE=${TEST_TYPE:-all} PYTEST_ARGS="--cov=. --cov-report=html:reports/coverage --cov-report=xml:reports/coverage.xml --cov-report=term" $(MAKE) _run-tests
	@$(MAKE) _show-test-results
	@echo "$(GREEN)üìà –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: $(FUNCTIONAL_TESTS_DIR)/reports/coverage/index.html$(NC)"

# ============================================================================
# üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–ï–ú
# ============================================================================

.PHONY: test-build
test-build: check-test-deps ## –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) build --no-cache
	@echo "$(GREEN)‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

.PHONY: test-up
test-up: check-test-deps ## –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) up -d --remove-orphans
	@echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 10
	@$(MAKE) test-status
	@echo "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"

.PHONY: test-down
test-down: ## –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) down --remove-orphans
	@echo "‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

.PHONY: test-clean
test-clean: test-down ## –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) down -v --remove-orphans
	@docker system prune -f --filter "label=com.docker.compose.project=$(TEST_PROJECT_NAME)"
	@echo "$(BLUE)üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ –ª–æ–≥–æ–≤...$(NC)"
	@rm -rf $(FUNCTIONAL_TESTS_DIR)/reports/* $(FUNCTIONAL_TESTS_DIR)/screenshots/* 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞$(NC)"

# ============================================================================
# üìä –†–ê–ë–û–¢–ê –° –†–ï–ó–£–õ–¨–¢–ê–¢–ê–ú–ò
# ============================================================================

.PHONY: test-logs
test-logs: ## –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üìã –õ–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) logs functional-tests

.PHONY: test-logs-latest
test-logs-latest: ## –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üìã –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Ç–µ—Å—Ç–æ–≤:$(NC)"
	@if [ -d "$(FUNCTIONAL_TESTS_DIR)/logs" ] && [ "$$(ls -A $(FUNCTIONAL_TESTS_DIR)/logs/)" ]; then \
		LATEST_LOG=$$(ls -t $(FUNCTIONAL_TESTS_DIR)/logs/test_results_*.log 2>/dev/null | head -1); \
		if [ -n "$$LATEST_LOG" ]; then \
			echo "$(GREEN)–§–∞–π–ª: $$LATEST_LOG$(NC)"; \
			cat "$$LATEST_LOG"; \
		else \
			echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

.PHONY: test-logs-tail
test-logs-tail: ## –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
	@echo "$(YELLOW)üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∞...$(NC)"
	@if [ -d "$(FUNCTIONAL_TESTS_DIR)/logs" ] && [ "$$(ls -A $(FUNCTIONAL_TESTS_DIR)/logs/)" ]; then \
		LATEST_LOG=$$(ls -t $(FUNCTIONAL_TESTS_DIR)/logs/test_results_*.log 2>/dev/null | head -1); \
		if [ -n "$$LATEST_LOG" ]; then \
			echo "$(GREEN)–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: $$LATEST_LOG$(NC)"; \
			tail -f "$$LATEST_LOG"; \
		else \
			echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

.PHONY: test-logs-stats
test-logs-stats: ## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
	@echo "$(YELLOW)üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:$(NC)"
	@if [ -d "$(FUNCTIONAL_TESTS_DIR)/logs" ] && [ "$$(ls -A $(FUNCTIONAL_TESTS_DIR)/logs/)" ]; then \
		LATEST_JSON=$$(ls -t $(FUNCTIONAL_TESTS_DIR)/logs/test_results_*.json 2>/dev/null | head -1); \
		if [ -n "$$LATEST_JSON" ]; then \
			echo "$(GREEN)JSON –æ—Ç—á–µ—Ç: $$LATEST_JSON$(NC)"; \
			cd $(FUNCTIONAL_TESTS_DIR) && python3 -c "import json; data=json.load(open('$$LATEST_JSON')); stats=data['statistics']; print(f'–í—Å–µ–≥–æ: {stats[\"total\"]}, –ü—Ä–æ–π–¥–µ–Ω–æ: {stats[\"passed\"]}, –£–ø–∞–ª–æ: {stats[\"failed\"]}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {stats[\"skipped\"]}')"; \
		else \
			LATEST_LOG=$$(ls -t $(FUNCTIONAL_TESTS_DIR)/logs/test_results_*.log 2>/dev/null | head -1); \
			if [ -n "$$LATEST_LOG" ]; then \
				echo "$(GREEN)–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–∞: $$LATEST_LOG$(NC)"; \
				grep "–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê" -A 10 "$$LATEST_LOG" | tail -8; \
			else \
				echo "$(RED)‚ùå –õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã$(NC)"; \
			fi; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç$(NC)"; \
	fi

.PHONY: test-reports
test-reports: ## –û—Ç–∫—Ä—ã—Ç–∏–µ HTML –æ—Ç—á–µ—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
	@echo "$(YELLOW)üìä –û—Ç–∫—Ä—ã—Ç–∏–µ HTML –æ—Ç—á–µ—Ç–æ–≤...$(NC)"
	@if [ -d "$(FUNCTIONAL_TESTS_DIR)/reports" ]; then \
		REPORTS_FOUND=0; \
		for report in $(FUNCTIONAL_TESTS_DIR)/reports/*_report.html; do \
			if [ -f "$$report" ]; then \
				echo "$(GREEN)üìÑ –ù–∞–π–¥–µ–Ω –æ—Ç—á–µ—Ç: $$report$(NC)"; \
				if command -v xdg-open >/dev/null 2>&1; then \
					xdg-open "$$report" 2>/dev/null & \
				elif command -v open >/dev/null 2>&1; then \
					open "$$report" 2>/dev/null & \
				else \
					echo "$(BLUE)üí° –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: file://$(PWD)/$$report$(NC)"; \
				fi; \
				REPORTS_FOUND=1; \
			fi; \
		done; \
		if [ $$REPORTS_FOUND -eq 0 ]; then \
			echo "$(RED)‚ùå HTML –æ—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ $(FUNCTIONAL_TESTS_DIR)/reports/$(NC)"; \
		fi; \
	else \
		echo "$(RED)‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è reports –Ω–µ –Ω–∞–π–¥–µ–Ω–∞$(NC)"; \
	fi

.PHONY: test-status
test-status: ## –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "üîç –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) ps
	@echo ""
	@echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
	@$(MAKE) _check-service-health

# ============================================================================
# üîß –í–ù–£–¢–†–ï–ù–ù–ò–ï –§–£–ù–ö–¶–ò–ò
# ============================================================================

.PHONY: _run-tests
_run-tests:
	@echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@$(MAKE) test-down 2>/dev/null || true
	@$(MAKE) test-up
	@echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (TEST_TYPE=$(TEST_TYPE))..."
	@cd $(FUNCTIONAL_TESTS_DIR) && \
		TEST_TYPE=$(TEST_TYPE) \
		PYTEST_ARGS="$(PYTEST_ARGS)" \
		docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) run --rm functional-tests || \
		(echo "‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π" && $(MAKE) _cleanup-on-error && exit 1)
	@$(MAKE) test-down

.PHONY: _run-tests-no-build
_run-tests-no-build:
	@echo "$(BLUE)üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏)...$(NC)"
	@$(MAKE) test-down 2>/dev/null || true
	@echo "$(BLUE)üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –≥–æ—Ç–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏...$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) up -d --remove-orphans
	@echo "$(BLUE)‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...$(NC)"
	@sleep 10
	@echo "$(BLUE)üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ (TEST_TYPE=$(TEST_TYPE))...$(NC)"
	@cd $(FUNCTIONAL_TESTS_DIR) && \
		TEST_TYPE=$(TEST_TYPE) \
		PYTEST_ARGS="$(PYTEST_ARGS)" \
		docker-compose -f docker-compose.test.yaml -p $(TEST_PROJECT_NAME) run --rm functional-tests || \
		(echo "$(RED)‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π$(NC)" && $(MAKE) _cleanup-on-error && exit 1)
	@$(MAKE) test-down

.PHONY: _show-test-results
_show-test-results:
	@echo ""
	@echo "$(GREEN)‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!$(NC)"
	@echo "$(BLUE)üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤:$(NC)"
	@echo "  ‚Ä¢ HTML –æ—Ç—á–µ—Ç—ã: $(FUNCTIONAL_TESTS_DIR)/reports/"
	@echo "  ‚Ä¢ –õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤: $(FUNCTIONAL_TESTS_DIR)/logs/"
	@echo "  ‚Ä¢ –°–∫—Ä–∏–Ω—à–æ—Ç—ã: $(FUNCTIONAL_TESTS_DIR)/screenshots/"
	@echo ""
	@echo "$(BLUE)üîç –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:$(NC)"
	@echo "  ‚Ä¢ $(GREEN)make test-logs-stats$(NC) - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"
	@echo "  ‚Ä¢ $(GREEN)make test-reports$(NC) - –æ—Ç–∫—Ä—ã—Ç—å HTML –æ—Ç—á–µ—Ç—ã"
	@echo "  ‚Ä¢ $(GREEN)cd $(FUNCTIONAL_TESTS_DIR) && python utils/log_analyzer.py --latest$(NC) - –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"

.PHONY: _check-service-health
_check-service-health:
	@for service in "Backend API:http://localhost:$(BACKEND_PORT)/health" \
					"Admin Frontend:http://localhost:$(FRONTEND_ADMIN_PORT)" \
					"Seller Frontend:http://localhost:$(FRONTEND_SELLER_PORT)" \
					"Buyer Frontend:http://localhost:$(FRONTEND_BUYER_PORT)"; do \
		name=$$(echo $$service | cut -d: -f1); \
		url=$$(echo $$service | cut -d: -f2-); \
		if curl -s -f "$$url" >/dev/null 2>&1; then \
			echo "  ‚úÖ $$name - –¥–æ—Å—Ç—É–ø–µ–Ω"; \
		else \
			echo "  ‚ùå $$name - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ($$url)"; \
		fi; \
	done

.PHONY: _cleanup-on-error
_cleanup-on-error:
	@echo "$(YELLOW)üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...$(NC)"
	@$(MAKE) test-logs 2>/dev/null || true
	@$(MAKE) test-down 2>/dev/null || true

# ============================================================================
# üßπ CLEANUP & UTILITY
# ============================================================================

.PHONY: clean
clean: ## Clean Docker resources
	docker system prune -f

.PHONY: clean-all
clean-all: down ## Clean all Docker resources including networks
	docker system prune -af
	docker network prune -f

.PHONY: test-clean-logs
test-clean-logs: ## –û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤
	@echo "$(YELLOW)üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Ç–µ—Å—Ç–æ–≤...$(NC)"
	@rm -rf $(FUNCTIONAL_TESTS_DIR)/logs/*
	@echo "$(GREEN)‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

.PHONY: test-clean-old-logs
test-clean-old-logs: ## –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
	@echo "$(YELLOW)üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (>30 –¥–Ω–µ–π)...$(NC)"
	@find $(FUNCTIONAL_TESTS_DIR)/logs/ -name "test_results_*.log" -mtime +30 -delete 2>/dev/null || true
	@find $(FUNCTIONAL_TESTS_DIR)/logs/ -name "test_results_*.json" -mtime +30 -delete 2>/dev/null || true
	@echo "$(GREEN)‚úÖ –°—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã$(NC)"

.PHONY: dev
dev: backend-up ## Quick start for development (backend only)
	@echo "üéØ Backend ready at http://localhost:$(BACKEND_PORT)/docs"